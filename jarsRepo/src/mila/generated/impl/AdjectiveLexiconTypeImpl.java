//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v1.0.5-b16-fcs 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2008.12.01 at 02:23:12 PM IST 
//

package mila.generated.impl;

public class AdjectiveLexiconTypeImpl implements
		mila.generated.AdjectiveLexiconType, com.sun.xml.bind.JAXBObject,
		mila.generated.impl.runtime.UnmarshallableObject,
		mila.generated.impl.runtime.XMLSerializable,
		mila.generated.impl.runtime.ValidatableObject {

	public static class AddImpl extends mila.generated.impl.NounExceptionTypeImpl
			implements mila.generated.AdjectiveLexiconType.Add,
			com.sun.xml.bind.RIElement, com.sun.xml.bind.JAXBObject,
			mila.generated.impl.runtime.UnmarshallableObject,
			mila.generated.impl.runtime.XMLSerializable,
			mila.generated.impl.runtime.ValidatableObject {

		public class Unmarshaller extends
				mila.generated.impl.runtime.AbstractUnmarshallingEventHandlerImpl {

			public Unmarshaller(
					mila.generated.impl.runtime.UnmarshallingContext context) {
				super(context, "----");
			}

			protected Unmarshaller(
					mila.generated.impl.runtime.UnmarshallingContext context,
					int startState) {
				this(context);
				state = startState;
			}

			@Override
			public void enterAttribute(java.lang.String ___uri,
					java.lang.String ___local, java.lang.String ___qname)
					throws org.xml.sax.SAXException {
				int attIdx;
				outer: while (true) {
					switch (state) {
					case 1:
						if (("construct" == ___local) && ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((mila.generated.impl.NounExceptionTypeImpl) mila.generated.impl.AdjectiveLexiconTypeImpl.AddImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						if (("dotted" == ___local) && ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((mila.generated.impl.NounExceptionTypeImpl) mila.generated.impl.AdjectiveLexiconTypeImpl.AddImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						if (("dual" == ___local) && ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((mila.generated.impl.NounExceptionTypeImpl) mila.generated.impl.AdjectiveLexiconTypeImpl.AddImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						if (("feminine" == ___local) && ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((mila.generated.impl.NounExceptionTypeImpl) mila.generated.impl.AdjectiveLexiconTypeImpl.AddImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						if (("gender" == ___local) && ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((mila.generated.impl.NounExceptionTypeImpl) mila.generated.impl.AdjectiveLexiconTypeImpl.AddImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						if (("inflectConstructP" == ___local) && ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((mila.generated.impl.NounExceptionTypeImpl) mila.generated.impl.AdjectiveLexiconTypeImpl.AddImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						if (("inflectConstructS" == ___local) && ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((mila.generated.impl.NounExceptionTypeImpl) mila.generated.impl.AdjectiveLexiconTypeImpl.AddImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						if (("inflectPossessiveP" == ___local)
								&& ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((mila.generated.impl.NounExceptionTypeImpl) mila.generated.impl.AdjectiveLexiconTypeImpl.AddImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						if (("inflectPossessiveS" == ___local)
								&& ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((mila.generated.impl.NounExceptionTypeImpl) mila.generated.impl.AdjectiveLexiconTypeImpl.AddImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						if (("number" == ___local) && ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((mila.generated.impl.NounExceptionTypeImpl) mila.generated.impl.AdjectiveLexiconTypeImpl.AddImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						if (("plural" == ___local) && ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((mila.generated.impl.NounExceptionTypeImpl) mila.generated.impl.AdjectiveLexiconTypeImpl.AddImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						if (("possessive" == ___local) && ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((mila.generated.impl.NounExceptionTypeImpl) mila.generated.impl.AdjectiveLexiconTypeImpl.AddImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						if (("script" == ___local) && ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((mila.generated.impl.NounExceptionTypeImpl) mila.generated.impl.AdjectiveLexiconTypeImpl.AddImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						if (("transliterated" == ___local) && ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((mila.generated.impl.NounExceptionTypeImpl) mila.generated.impl.AdjectiveLexiconTypeImpl.AddImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						break;
					case 3:
						revertToParentFromEnterAttribute(___uri, ___local,
								___qname);
						return;
					}
					super.enterAttribute(___uri, ___local, ___qname);
					break;
				}
			}

			@Override
			public void enterElement(java.lang.String ___uri,
					java.lang.String ___local, java.lang.String ___qname,
					org.xml.sax.Attributes __atts)
					throws org.xml.sax.SAXException {
				int attIdx;
				outer: while (true) {
					switch (state) {
					case 0:
						if (("add" == ___local) && ("" == ___uri)) {
							context.pushAttributes(__atts, true);
							state = 1;
							return;
						}
						break;
					case 1:
						attIdx = context.getAttribute("", "construct");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						attIdx = context.getAttribute("", "dotted");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						attIdx = context.getAttribute("", "dual");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						attIdx = context.getAttribute("", "feminine");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						attIdx = context.getAttribute("", "gender");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						attIdx = context.getAttribute("", "inflectConstructP");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						attIdx = context.getAttribute("", "inflectConstructS");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						attIdx = context.getAttribute("", "inflectPossessiveP");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						attIdx = context.getAttribute("", "inflectPossessiveS");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						attIdx = context.getAttribute("", "number");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						attIdx = context.getAttribute("", "plural");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						attIdx = context.getAttribute("", "possessive");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						attIdx = context.getAttribute("", "script");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						attIdx = context.getAttribute("", "transliterated");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						break;
					case 3:
						revertToParentFromEnterElement(___uri, ___local,
								___qname, __atts);
						return;
					}
					super.enterElement(___uri, ___local, ___qname, __atts);
					break;
				}
			}

			@Override
			public void handleText(final java.lang.String value)
					throws org.xml.sax.SAXException {
				int attIdx;
				outer: while (true) {
					try {
						switch (state) {
						case 1:
							attIdx = context.getAttribute("", "construct");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							attIdx = context.getAttribute("", "dotted");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							attIdx = context.getAttribute("", "dual");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							attIdx = context.getAttribute("", "feminine");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							attIdx = context.getAttribute("", "gender");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							attIdx = context.getAttribute("",
									"inflectConstructP");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							attIdx = context.getAttribute("",
									"inflectConstructS");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							attIdx = context.getAttribute("",
									"inflectPossessiveP");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							attIdx = context.getAttribute("",
									"inflectPossessiveS");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							attIdx = context.getAttribute("", "number");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							attIdx = context.getAttribute("", "plural");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							attIdx = context.getAttribute("", "possessive");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							attIdx = context.getAttribute("", "script");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							attIdx = context.getAttribute("", "transliterated");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							break;
						case 3:
							revertToParentFromText(value);
							return;
						}
					} catch (java.lang.RuntimeException e) {
						handleUnexpectedTextException(value, e);
					}
					break;
				}
			}

			@Override
			public void leaveAttribute(java.lang.String ___uri,
					java.lang.String ___local, java.lang.String ___qname)
					throws org.xml.sax.SAXException {
				int attIdx;
				outer: while (true) {
					switch (state) {
					case 1:
						attIdx = context.getAttribute("", "construct");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "dotted");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "dual");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "feminine");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "gender");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "inflectConstructP");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "inflectConstructS");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "inflectPossessiveP");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "inflectPossessiveS");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "number");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "plural");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "possessive");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "script");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "transliterated");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						break;
					case 3:
						revertToParentFromLeaveAttribute(___uri, ___local,
								___qname);
						return;
					}
					super.leaveAttribute(___uri, ___local, ___qname);
					break;
				}
			}

			@Override
			public void leaveElement(java.lang.String ___uri,
					java.lang.String ___local, java.lang.String ___qname)
					throws org.xml.sax.SAXException {
				int attIdx;
				outer: while (true) {
					switch (state) {
					case 2:
						if (("add" == ___local) && ("" == ___uri)) {
							context.popAttributes();
							state = 3;
							return;
						}
						break;
					case 1:
						attIdx = context.getAttribute("", "construct");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "dotted");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "dual");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "feminine");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "gender");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "inflectConstructP");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "inflectConstructS");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "inflectPossessiveP");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "inflectPossessiveS");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "number");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "plural");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "possessive");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "script");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "transliterated");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						break;
					case 3:
						revertToParentFromLeaveElement(___uri, ___local,
								___qname);
						return;
					}
					super.leaveElement(___uri, ___local, ___qname);
					break;
				}
			}

			@Override
			public java.lang.Object owner() {
				return mila.generated.impl.AdjectiveLexiconTypeImpl.AddImpl.this;
			}

		}

		public final static java.lang.Class version = (mila.generated.impl.JAXBVersion.class);

		private static com.sun.msv.grammar.Grammar schemaFragment;

		private final static java.lang.Class PRIMARY_INTERFACE_CLASS() {
			return (mila.generated.AdjectiveLexiconType.Add.class);
		}

		@Override
		public java.lang.String ____jaxb_ri____getLocalName() {
			return "add";
		}

		@Override
		public java.lang.String ____jaxb_ri____getNamespaceURI() {
			return "";
		}

		@Override
		public com.sun.msv.verifier.DocumentDeclaration createRawValidator() {
			if (schemaFragment == null) {
				schemaFragment = com.sun.xml.bind.validator.SchemaDeserializer
						.deserialize(("\u00ac\u00ed\u0000\u0005sr\u0000\'com.sun.msv.grammar.trex.ElementPattern\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000"
								+ "\tnameClasst\u0000\u001fLcom/sun/msv/grammar/NameClass;xr\u0000\u001ecom.sun.msv."
								+ "grammar.ElementExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002Z\u0000\u001aignoreUndeclaredAttributesL\u0000"
								+ "\fcontentModelt\u0000 Lcom/sun/msv/grammar/Expression;xr\u0000\u001ecom.sun."
								+ "msv.grammar.Expression\u00f8\u0018\u0082\u00e8N5~O\u0002\u0000\u0002L\u0000\u0013epsilonReducibilityt\u0000\u0013Lj"
								+ "ava/lang/Boolean;L\u0000\u000bexpandedExpq\u0000~\u0000\u0003xppp\u0000sr\u0000\u001fcom.sun.msv.gra"
								+ "mmar.SequenceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.sun.msv.grammar.BinaryExp"
								+ "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0004exp1q\u0000~\u0000\u0003L\u0000\u0004exp2q\u0000~\u0000\u0003xq\u0000~\u0000\u0004ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007pps"
								+ "q\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000"
								+ "\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsr\u0000\u001bcom.sun.msv.g"
								+ "rammar.DataExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\u0002dtt\u0000\u001fLorg/relaxng/datatype/Datat"
								+ "ype;L\u0000\u0006exceptq\u0000~\u0000\u0003L\u0000\u0004namet\u0000\u001dLcom/sun/msv/util/StringPair;xq\u0000"
								+ "~\u0000\u0004ppsr\u0000\"com.sun.msv.datatype.xsd.TokenType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000#co"
								+ "m.sun.msv.datatype.xsd.StringType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001Z\u0000\risAlwaysValid"
								+ "xr\u0000*com.sun.msv.datatype.xsd.BuiltinAtomicType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000"
								+ "%com.sun.msv.datatype.xsd.ConcreteType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\'com.sun"
								+ ".msv.datatype.xsd.XSDatatypeImpl\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\fnamespaceUrit\u0000"
								+ "\u0012Ljava/lang/String;L\u0000\btypeNameq\u0000~\u0000\"L\u0000\nwhiteSpacet\u0000.Lcom/sun/"
								+ "msv/datatype/xsd/WhiteSpaceProcessor;xpt\u0000 http://www.w3.org/"
								+ "2001/XMLSchemat\u0000\u0005tokensr\u00005com.sun.msv.datatype.xsd.WhiteSpac"
								+ "eProcessor$Collapse\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000,com.sun.msv.datatype.xsd.W"
								+ "hiteSpaceProcessor\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xp\u0001sr\u00000com.sun.msv.grammar.Expr"
								+ "ession$NullSetExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0004ppsr\u0000\u001bcom.sun.msv.u"
								+ "til.StringPair\u00d0t\u001ejB\u008f\u008d\u00a0\u0002\u0000\u0002L\u0000\tlocalNameq\u0000~\u0000\"L\u0000\fnamespaceURIq\u0000~"
								+ "\u0000\"xpq\u0000~\u0000&q\u0000~\u0000%sr\u0000\u001dcom.sun.msv.grammar.ChoiceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq"
								+ "\u0000~\u0000\bppsr\u0000 com.sun.msv.grammar.AttributeExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0003expq"
								+ "\u0000~\u0000\u0003L\u0000\tnameClassq\u0000~\u0000\u0001xq\u0000~\u0000\u0004sr\u0000\u0011java.lang.Boolean\u00cd r\u0080\u00d5\u009c\u00fa\u00ee\u0002\u0000\u0001Z"
								+ "\u0000\u0005valuexp\u0000psq\u0000~\u0000\u0019ppsr\u0000)com.sun.msv.datatype.xsd.EnumerationF"
								+ "acet\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\u0006valuest\u0000\u000fLjava/util/Set;xr\u00009com.sun.msv.da"
								+ "tatype.xsd.DataTypeWithValueConstraintFacet\"\u00a7Ro\u00ca\u00c7\u008aT\u0002\u0000\u0000xr\u0000*co"
								+ "m.sun.msv.datatype.xsd.DataTypeWithFacet\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0005Z\u0000\fisFace"
								+ "tFixedZ\u0000\u0012needValueCheckFlagL\u0000\bbaseTypet\u0000)Lcom/sun/msv/dataty"
								+ "pe/xsd/XSDatatypeImpl;L\u0000\fconcreteTypet\u0000\'Lcom/sun/msv/datatyp"
								+ "e/xsd/ConcreteType;L\u0000\tfacetNameq\u0000~\u0000\"xq\u0000~\u0000!t\u0000\u0000t\u0000\u000eThreeStateTy"
								+ "peq\u0000~\u0000)\u0000\u0000q\u0000~\u0000$q\u0000~\u0000$t\u0000\u000benumerationsr\u0000\u0011java.util.HashSet\u00baD\u0085\u0095\u0096\u00b8"
								+ "\u00b74\u0003\u0000\u0000xpw\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\u0003t\u0000\u000bunspecifiedt\u0000\u0004truet\u0000\u0005falsexq\u0000~\u0000+sq\u0000~"
								+ "\u0000,q\u0000~\u0000=q\u0000~\u0000<sr\u0000#com.sun.msv.grammar.SimpleNameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002"
								+ "\u0000\u0002L\u0000\tlocalNameq\u0000~\u0000\"L\u0000\fnamespaceURIq\u0000~\u0000\"xr\u0000\u001dcom.sun.msv.gramm"
								+ "ar.NameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xpt\u0000\tconstructq\u0000~\u0000<sr\u00000com.sun.msv.gr"
								+ "ammar.Expression$EpsilonExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0004sq\u0000~\u00002\u0001q\u0000"
								+ "~\u0000Jsq\u0000~\u0000.ppsq\u0000~\u00000q\u0000~\u00003pq\u0000~\u0000\u001csq\u0000~\u0000Et\u0000\u0006dottedq\u0000~\u0000<q\u0000~\u0000Jsq\u0000~\u0000.p"
								+ "psq\u0000~\u00000q\u0000~\u00003pq\u0000~\u00004sq\u0000~\u0000Et\u0000\u0004dualq\u0000~\u0000<q\u0000~\u0000Jsq\u0000~\u0000.ppsq\u0000~\u00000q\u0000~\u00003"
								+ "psq\u0000~\u0000\u0019ppsq\u0000~\u00005q\u0000~\u0000<t\u0000\fFeminineTypeq\u0000~\u0000)\u0000\u0000q\u0000~\u0000$q\u0000~\u0000$q\u0000~\u0000>sq\u0000"
								+ "~\u0000?w\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\u0004t\u0000\u000bunspecifiedt\u0000\u0002itt\u0000\u0001ht\u0000\u0001txq\u0000~\u0000+sq\u0000~\u0000,q\u0000~\u0000"
								+ "Xq\u0000~\u0000<sq\u0000~\u0000Et\u0000\bfeminineq\u0000~\u0000<q\u0000~\u0000Jsq\u0000~\u0000.ppsq\u0000~\u00000q\u0000~\u00003psq\u0000~\u0000\u0019p"
								+ "psq\u0000~\u00005q\u0000~\u0000<t\u0000\nGenderTypeq\u0000~\u0000)\u0000\u0000q\u0000~\u0000$q\u0000~\u0000$q\u0000~\u0000>sq\u0000~\u0000?w\f\u0000\u0000\u0000\u0010?"
								+ "@\u0000\u0000\u0000\u0000\u0000\u0004t\u0000\u000bunspecifiedt\u0000\bfemininet\u0000\u0016masculine and femininet\u0000\t"
								+ "masculinexq\u0000~\u0000+sq\u0000~\u0000,q\u0000~\u0000eq\u0000~\u0000<sq\u0000~\u0000Et\u0000\u0006genderq\u0000~\u0000<q\u0000~\u0000Jsq\u0000~"
								+ "\u0000.ppsq\u0000~\u00000q\u0000~\u00003psq\u0000~\u0000\u0019ppsr\u0000$com.sun.msv.datatype.xsd.Boolean"
								+ "Type\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u001fq\u0000~\u0000%t\u0000\u0007booleanq\u0000~\u0000)q\u0000~\u0000+sq\u0000~\u0000,q\u0000~\u0000sq\u0000~"
								+ "\u0000%sq\u0000~\u0000Et\u0000\u0011inflectConstructPq\u0000~\u0000<q\u0000~\u0000Jsq\u0000~\u0000.ppsq\u0000~\u00000q\u0000~\u00003pq\u0000"
								+ "~\u0000psq\u0000~\u0000Et\u0000\u0011inflectConstructSq\u0000~\u0000<q\u0000~\u0000Jsq\u0000~\u0000.ppsq\u0000~\u00000q\u0000~\u00003pq"
								+ "\u0000~\u0000psq\u0000~\u0000Et\u0000\u0012inflectPossessivePq\u0000~\u0000<q\u0000~\u0000Jsq\u0000~\u0000.ppsq\u0000~\u00000q\u0000~\u00003"
								+ "pq\u0000~\u0000psq\u0000~\u0000Et\u0000\u0012inflectPossessiveSq\u0000~\u0000<q\u0000~\u0000Jsq\u0000~\u0000.ppsq\u0000~\u00000q\u0000~"
								+ "\u00003psq\u0000~\u0000\u0019ppsq\u0000~\u00005q\u0000~\u0000<t\u0000\nNumberTypeq\u0000~\u0000)\u0000\u0000q\u0000~\u0000$q\u0000~\u0000$q\u0000~\u0000>sq\u0000"
								+ "~\u0000?w\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\u0006t\u0000\u000bunspecifiedt\u0000\u0013singular and pluralt\u0000\u0004dual"
								+ "t\u0000\u000fdual and pluralt\u0000\bsingulart\u0000\u0006pluralxq\u0000~\u0000+sq\u0000~\u0000,q\u0000~\u0000\u0087q\u0000~\u0000<"
								+ "sq\u0000~\u0000Et\u0000\u0006numberq\u0000~\u0000<q\u0000~\u0000Jsq\u0000~\u0000.ppsq\u0000~\u00000q\u0000~\u00003psq\u0000~\u0000\u0019ppsq\u0000~\u00005q"
								+ "\u0000~\u0000<t\u0000\nPluralTypeq\u0000~\u0000)\u0000\u0000q\u0000~\u0000$q\u0000~\u0000$q\u0000~\u0000>sq\u0000~\u0000?w\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\bt"
								+ "\u0000\u000bunspecifiedt\u0000\u0003awtt\u0000\u0002wtt\u0000\u0002imt\u0000\u0003iimt\u0000\u0001mt\u0000\tim and wtt\u0000\u0003iwtxq\u0000"
								+ "~\u0000+sq\u0000~\u0000,q\u0000~\u0000\u0096q\u0000~\u0000<sq\u0000~\u0000Et\u0000\u0006pluralq\u0000~\u0000<q\u0000~\u0000Jsq\u0000~\u0000.ppsq\u0000~\u00000q\u0000"
								+ "~\u00003psq\u0000~\u0000\u0019ppsq\u0000~\u00005q\u0000~\u0000<t\u0000\u0007PGNTypeq\u0000~\u0000)\u0000\u0000q\u0000~\u0000$q\u0000~\u0000$q\u0000~\u0000>sq\u0000~\u0000"
								+ "?w\f\u0000\u0000\u0000 ?@\u0000\u0000\u0000\u0000\u0000\u0013t\u0000\t123p/M/Sgt\u0000\u00072p/M/Plt\u0000\u00073p/M/Sgt\u0000\b1p/MF/Sgt\u0000"
								+ "\t123p/M/Plt\u0000\b2p/MF/Plt\u0000\u00072p/M/Sgt\u0000\u00071p/F/Sgt\u0000\b3p/MF/Plt\u0000\u00073p/F/"
								+ "Plt\u0000\u00071p/M/Sgt\u0000\u000bunspecifiedt\u0000\u00072p/F/Plt\u0000\t123p/F/Plt\u0000\u00073p/M/Plt\u0000"
								+ "\u00073p/F/Sgt\u0000\t123p/F/Sgt\u0000\b1p/MF/Plt\u0000\u00072p/F/Sgxq\u0000~\u0000+sq\u0000~\u0000,q\u0000~\u0000\u00a7q\u0000"
								+ "~\u0000<sq\u0000~\u0000Et\u0000\npossessiveq\u0000~\u0000<q\u0000~\u0000Jsq\u0000~\u0000.ppsq\u0000~\u00000q\u0000~\u00003psq\u0000~\u0000\u0019pp"
								+ "sq\u0000~\u00005q\u0000~\u0000<t\u0000\nScriptTypeq\u0000~\u0000)\u0000\u0000q\u0000~\u0000$q\u0000~\u0000$q\u0000~\u0000>sq\u0000~\u0000?w\f\u0000\u0000\u0000\u0010?@"
								+ "\u0000\u0000\u0000\u0000\u0000\u0004t\u0000\u0004typot\u0000\u0006formalt\u0000\u0005slangt\u0000\ncolloquialxq\u0000~\u0000+sq\u0000~\u0000,q\u0000~\u0000\u00c3"
								+ "q\u0000~\u0000<sq\u0000~\u0000Et\u0000\u0006scriptq\u0000~\u0000<q\u0000~\u0000Jsq\u0000~\u00000ppq\u0000~\u0000\u001csq\u0000~\u0000Et\u0000\u000etranslit"
								+ "eratedq\u0000~\u0000<sq\u0000~\u00000ppq\u0000~\u0000\u001csq\u0000~\u0000Et\u0000\bundottedq\u0000~\u0000<sq\u0000~\u0000.ppsq\u0000~\u00000"
								+ "q\u0000~\u00003psq\u0000~\u0000\u0019ppsr\u0000\"com.sun.msv.datatype.xsd.QnameType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001"
								+ "\u0002\u0000\u0000xq\u0000~\u0000\u001fq\u0000~\u0000%t\u0000\u0005QNameq\u0000~\u0000)q\u0000~\u0000+sq\u0000~\u0000,q\u0000~\u0000\u00d7q\u0000~\u0000%sq\u0000~\u0000Et\u0000\u0004typ"
								+ "et\u0000)http://www.w3.org/2001/XMLSchema-instanceq\u0000~\u0000Jsq\u0000~\u0000Et\u0000\u0003a"
								+ "ddq\u0000~\u0000<sr\u0000\"com.sun.msv.grammar.ExpressionPool\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\be"
								+ "xpTablet\u0000/Lcom/sun/msv/grammar/ExpressionPool$ClosedHash;xps"
								+ "r\u0000-com.sun.msv.grammar.ExpressionPool$ClosedHash\u00d7j\u00d0N\u00ef\u00e8\u00ed\u001c\u0003\u0000\u0003I"
								+ "\u0000\u0005countB\u0000\rstreamVersionL\u0000\u0006parentt\u0000$Lcom/sun/msv/grammar/Expr"
								+ "essionPool;xp\u0000\u0000\u0000\u001e\u0001pq\u0000~\u0000\rq\u0000~\u0000\u00d2q\u0000~\u0000nq\u0000~\u0000/q\u0000~\u0000Lq\u0000~\u0000\nq\u0000~\u0000\u0083q\u0000~\u0000\u0017q"
								+ "\u0000~\u0000aq\u0000~\u0000\u0092q\u0000~\u0000\u0016q\u0000~\u0000Pq\u0000~\u0000wq\u0000~\u0000\fq\u0000~\u0000\u000eq\u0000~\u0000\u0015q\u0000~\u0000\u0010q\u0000~\u0000\u007fq\u0000~\u0000\u00a3q\u0000~\u0000\u000fq"
								+ "\u0000~\u0000\u000bq\u0000~\u0000\tq\u0000~\u0000{q\u0000~\u0000Tq\u0000~\u0000\u00bfq\u0000~\u0000\u0011q\u0000~\u0000\u0014q\u0000~\u0000\u0018q\u0000~\u0000\u0012q\u0000~\u0000\u0013x"));
			}
			return new com.sun.msv.verifier.regexp.REDocumentDeclaration(
					schemaFragment);
		}

		@Override
		public mila.generated.impl.runtime.UnmarshallingEventHandler createUnmarshaller(
				mila.generated.impl.runtime.UnmarshallingContext context) {
			return new mila.generated.impl.AdjectiveLexiconTypeImpl.AddImpl.Unmarshaller(
					context);
		}

		@Override
		public java.lang.Class getPrimaryInterface() {
			return (mila.generated.AdjectiveLexiconType.Add.class);
		}

		@Override
		public void serializeAttributes(
				mila.generated.impl.runtime.XMLSerializer context)
				throws org.xml.sax.SAXException {
		}

		@Override
		public void serializeBody(mila.generated.impl.runtime.XMLSerializer context)
				throws org.xml.sax.SAXException {
			context.startElement("", "add");
			super.serializeURIs(context);
			context.endNamespaceDecls();
			super.serializeAttributes(context);
			context.endAttributes();
			super.serializeBody(context);
			context.endElement();
		}

		@Override
		public void serializeURIs(mila.generated.impl.runtime.XMLSerializer context)
				throws org.xml.sax.SAXException {
		}

	}

	public static class RemoveImpl extends mila.generated.impl.NounExceptionTypeImpl
			implements mila.generated.AdjectiveLexiconType.Remove,
			com.sun.xml.bind.RIElement, com.sun.xml.bind.JAXBObject,
			mila.generated.impl.runtime.UnmarshallableObject,
			mila.generated.impl.runtime.XMLSerializable,
			mila.generated.impl.runtime.ValidatableObject {

		public class Unmarshaller extends
				mila.generated.impl.runtime.AbstractUnmarshallingEventHandlerImpl {

			public Unmarshaller(
					mila.generated.impl.runtime.UnmarshallingContext context) {
				super(context, "----");
			}

			protected Unmarshaller(
					mila.generated.impl.runtime.UnmarshallingContext context,
					int startState) {
				this(context);
				state = startState;
			}

			@Override
			public void enterAttribute(java.lang.String ___uri,
					java.lang.String ___local, java.lang.String ___qname)
					throws org.xml.sax.SAXException {
				int attIdx;
				outer: while (true) {
					switch (state) {
					case 3:
						revertToParentFromEnterAttribute(___uri, ___local,
								___qname);
						return;
					case 1:
						if (("construct" == ___local) && ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((mila.generated.impl.NounExceptionTypeImpl) mila.generated.impl.AdjectiveLexiconTypeImpl.RemoveImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						if (("dotted" == ___local) && ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((mila.generated.impl.NounExceptionTypeImpl) mila.generated.impl.AdjectiveLexiconTypeImpl.RemoveImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						if (("dual" == ___local) && ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((mila.generated.impl.NounExceptionTypeImpl) mila.generated.impl.AdjectiveLexiconTypeImpl.RemoveImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						if (("feminine" == ___local) && ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((mila.generated.impl.NounExceptionTypeImpl) mila.generated.impl.AdjectiveLexiconTypeImpl.RemoveImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						if (("gender" == ___local) && ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((mila.generated.impl.NounExceptionTypeImpl) mila.generated.impl.AdjectiveLexiconTypeImpl.RemoveImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						if (("inflectConstructP" == ___local) && ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((mila.generated.impl.NounExceptionTypeImpl) mila.generated.impl.AdjectiveLexiconTypeImpl.RemoveImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						if (("inflectConstructS" == ___local) && ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((mila.generated.impl.NounExceptionTypeImpl) mila.generated.impl.AdjectiveLexiconTypeImpl.RemoveImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						if (("inflectPossessiveP" == ___local)
								&& ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((mila.generated.impl.NounExceptionTypeImpl) mila.generated.impl.AdjectiveLexiconTypeImpl.RemoveImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						if (("inflectPossessiveS" == ___local)
								&& ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((mila.generated.impl.NounExceptionTypeImpl) mila.generated.impl.AdjectiveLexiconTypeImpl.RemoveImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						if (("number" == ___local) && ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((mila.generated.impl.NounExceptionTypeImpl) mila.generated.impl.AdjectiveLexiconTypeImpl.RemoveImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						if (("plural" == ___local) && ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((mila.generated.impl.NounExceptionTypeImpl) mila.generated.impl.AdjectiveLexiconTypeImpl.RemoveImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						if (("possessive" == ___local) && ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((mila.generated.impl.NounExceptionTypeImpl) mila.generated.impl.AdjectiveLexiconTypeImpl.RemoveImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						if (("script" == ___local) && ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((mila.generated.impl.NounExceptionTypeImpl) mila.generated.impl.AdjectiveLexiconTypeImpl.RemoveImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						if (("transliterated" == ___local) && ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((mila.generated.impl.NounExceptionTypeImpl) mila.generated.impl.AdjectiveLexiconTypeImpl.RemoveImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						break;
					}
					super.enterAttribute(___uri, ___local, ___qname);
					break;
				}
			}

			@Override
			public void enterElement(java.lang.String ___uri,
					java.lang.String ___local, java.lang.String ___qname,
					org.xml.sax.Attributes __atts)
					throws org.xml.sax.SAXException {
				int attIdx;
				outer: while (true) {
					switch (state) {
					case 0:
						if (("remove" == ___local) && ("" == ___uri)) {
							context.pushAttributes(__atts, true);
							state = 1;
							return;
						}
						break;
					case 3:
						revertToParentFromEnterElement(___uri, ___local,
								___qname, __atts);
						return;
					case 1:
						attIdx = context.getAttribute("", "construct");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						attIdx = context.getAttribute("", "dotted");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						attIdx = context.getAttribute("", "dual");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						attIdx = context.getAttribute("", "feminine");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						attIdx = context.getAttribute("", "gender");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						attIdx = context.getAttribute("", "inflectConstructP");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						attIdx = context.getAttribute("", "inflectConstructS");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						attIdx = context.getAttribute("", "inflectPossessiveP");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						attIdx = context.getAttribute("", "inflectPossessiveS");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						attIdx = context.getAttribute("", "number");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						attIdx = context.getAttribute("", "plural");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						attIdx = context.getAttribute("", "possessive");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						attIdx = context.getAttribute("", "script");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						attIdx = context.getAttribute("", "transliterated");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						break;
					}
					super.enterElement(___uri, ___local, ___qname, __atts);
					break;
				}
			}

			@Override
			public void handleText(final java.lang.String value)
					throws org.xml.sax.SAXException {
				int attIdx;
				outer: while (true) {
					try {
						switch (state) {
						case 3:
							revertToParentFromText(value);
							return;
						case 1:
							attIdx = context.getAttribute("", "construct");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							attIdx = context.getAttribute("", "dotted");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							attIdx = context.getAttribute("", "dual");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							attIdx = context.getAttribute("", "feminine");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							attIdx = context.getAttribute("", "gender");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							attIdx = context.getAttribute("",
									"inflectConstructP");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							attIdx = context.getAttribute("",
									"inflectConstructS");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							attIdx = context.getAttribute("",
									"inflectPossessiveP");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							attIdx = context.getAttribute("",
									"inflectPossessiveS");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							attIdx = context.getAttribute("", "number");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							attIdx = context.getAttribute("", "plural");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							attIdx = context.getAttribute("", "possessive");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							attIdx = context.getAttribute("", "script");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							attIdx = context.getAttribute("", "transliterated");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							break;
						}
					} catch (java.lang.RuntimeException e) {
						handleUnexpectedTextException(value, e);
					}
					break;
				}
			}

			@Override
			public void leaveAttribute(java.lang.String ___uri,
					java.lang.String ___local, java.lang.String ___qname)
					throws org.xml.sax.SAXException {
				int attIdx;
				outer: while (true) {
					switch (state) {
					case 3:
						revertToParentFromLeaveAttribute(___uri, ___local,
								___qname);
						return;
					case 1:
						attIdx = context.getAttribute("", "construct");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "dotted");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "dual");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "feminine");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "gender");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "inflectConstructP");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "inflectConstructS");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "inflectPossessiveP");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "inflectPossessiveS");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "number");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "plural");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "possessive");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "script");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "transliterated");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						break;
					}
					super.leaveAttribute(___uri, ___local, ___qname);
					break;
				}
			}

			@Override
			public void leaveElement(java.lang.String ___uri,
					java.lang.String ___local, java.lang.String ___qname)
					throws org.xml.sax.SAXException {
				int attIdx;
				outer: while (true) {
					switch (state) {
					case 3:
						revertToParentFromLeaveElement(___uri, ___local,
								___qname);
						return;
					case 2:
						if (("remove" == ___local) && ("" == ___uri)) {
							context.popAttributes();
							state = 3;
							return;
						}
						break;
					case 1:
						attIdx = context.getAttribute("", "construct");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "dotted");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "dual");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "feminine");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "gender");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "inflectConstructP");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "inflectConstructS");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "inflectPossessiveP");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "inflectPossessiveS");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "number");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "plural");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "possessive");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "script");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "transliterated");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						break;
					}
					super.leaveElement(___uri, ___local, ___qname);
					break;
				}
			}

			@Override
			public java.lang.Object owner() {
				return mila.generated.impl.AdjectiveLexiconTypeImpl.RemoveImpl.this;
			}

		}

		public final static java.lang.Class version = (mila.generated.impl.JAXBVersion.class);

		private static com.sun.msv.grammar.Grammar schemaFragment;

		private final static java.lang.Class PRIMARY_INTERFACE_CLASS() {
			return (mila.generated.AdjectiveLexiconType.Remove.class);
		}

		@Override
		public java.lang.String ____jaxb_ri____getLocalName() {
			return "remove";
		}

		@Override
		public java.lang.String ____jaxb_ri____getNamespaceURI() {
			return "";
		}

		@Override
		public com.sun.msv.verifier.DocumentDeclaration createRawValidator() {
			if (schemaFragment == null) {
				schemaFragment = com.sun.xml.bind.validator.SchemaDeserializer
						.deserialize(("\u00ac\u00ed\u0000\u0005sr\u0000\'com.sun.msv.grammar.trex.ElementPattern\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000"
								+ "\tnameClasst\u0000\u001fLcom/sun/msv/grammar/NameClass;xr\u0000\u001ecom.sun.msv."
								+ "grammar.ElementExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002Z\u0000\u001aignoreUndeclaredAttributesL\u0000"
								+ "\fcontentModelt\u0000 Lcom/sun/msv/grammar/Expression;xr\u0000\u001ecom.sun."
								+ "msv.grammar.Expression\u00f8\u0018\u0082\u00e8N5~O\u0002\u0000\u0002L\u0000\u0013epsilonReducibilityt\u0000\u0013Lj"
								+ "ava/lang/Boolean;L\u0000\u000bexpandedExpq\u0000~\u0000\u0003xppp\u0000sr\u0000\u001fcom.sun.msv.gra"
								+ "mmar.SequenceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.sun.msv.grammar.BinaryExp"
								+ "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0004exp1q\u0000~\u0000\u0003L\u0000\u0004exp2q\u0000~\u0000\u0003xq\u0000~\u0000\u0004ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007pps"
								+ "q\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000"
								+ "\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsr\u0000\u001bcom.sun.msv.g"
								+ "rammar.DataExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\u0002dtt\u0000\u001fLorg/relaxng/datatype/Datat"
								+ "ype;L\u0000\u0006exceptq\u0000~\u0000\u0003L\u0000\u0004namet\u0000\u001dLcom/sun/msv/util/StringPair;xq\u0000"
								+ "~\u0000\u0004ppsr\u0000\"com.sun.msv.datatype.xsd.TokenType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000#co"
								+ "m.sun.msv.datatype.xsd.StringType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001Z\u0000\risAlwaysValid"
								+ "xr\u0000*com.sun.msv.datatype.xsd.BuiltinAtomicType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000"
								+ "%com.sun.msv.datatype.xsd.ConcreteType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\'com.sun"
								+ ".msv.datatype.xsd.XSDatatypeImpl\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\fnamespaceUrit\u0000"
								+ "\u0012Ljava/lang/String;L\u0000\btypeNameq\u0000~\u0000\"L\u0000\nwhiteSpacet\u0000.Lcom/sun/"
								+ "msv/datatype/xsd/WhiteSpaceProcessor;xpt\u0000 http://www.w3.org/"
								+ "2001/XMLSchemat\u0000\u0005tokensr\u00005com.sun.msv.datatype.xsd.WhiteSpac"
								+ "eProcessor$Collapse\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000,com.sun.msv.datatype.xsd.W"
								+ "hiteSpaceProcessor\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xp\u0001sr\u00000com.sun.msv.grammar.Expr"
								+ "ession$NullSetExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0004ppsr\u0000\u001bcom.sun.msv.u"
								+ "til.StringPair\u00d0t\u001ejB\u008f\u008d\u00a0\u0002\u0000\u0002L\u0000\tlocalNameq\u0000~\u0000\"L\u0000\fnamespaceURIq\u0000~"
								+ "\u0000\"xpq\u0000~\u0000&q\u0000~\u0000%sr\u0000\u001dcom.sun.msv.grammar.ChoiceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq"
								+ "\u0000~\u0000\bppsr\u0000 com.sun.msv.grammar.AttributeExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0003expq"
								+ "\u0000~\u0000\u0003L\u0000\tnameClassq\u0000~\u0000\u0001xq\u0000~\u0000\u0004sr\u0000\u0011java.lang.Boolean\u00cd r\u0080\u00d5\u009c\u00fa\u00ee\u0002\u0000\u0001Z"
								+ "\u0000\u0005valuexp\u0000psq\u0000~\u0000\u0019ppsr\u0000)com.sun.msv.datatype.xsd.EnumerationF"
								+ "acet\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\u0006valuest\u0000\u000fLjava/util/Set;xr\u00009com.sun.msv.da"
								+ "tatype.xsd.DataTypeWithValueConstraintFacet\"\u00a7Ro\u00ca\u00c7\u008aT\u0002\u0000\u0000xr\u0000*co"
								+ "m.sun.msv.datatype.xsd.DataTypeWithFacet\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0005Z\u0000\fisFace"
								+ "tFixedZ\u0000\u0012needValueCheckFlagL\u0000\bbaseTypet\u0000)Lcom/sun/msv/dataty"
								+ "pe/xsd/XSDatatypeImpl;L\u0000\fconcreteTypet\u0000\'Lcom/sun/msv/datatyp"
								+ "e/xsd/ConcreteType;L\u0000\tfacetNameq\u0000~\u0000\"xq\u0000~\u0000!t\u0000\u0000t\u0000\u000eThreeStateTy"
								+ "peq\u0000~\u0000)\u0000\u0000q\u0000~\u0000$q\u0000~\u0000$t\u0000\u000benumerationsr\u0000\u0011java.util.HashSet\u00baD\u0085\u0095\u0096\u00b8"
								+ "\u00b74\u0003\u0000\u0000xpw\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\u0003t\u0000\u000bunspecifiedt\u0000\u0004truet\u0000\u0005falsexq\u0000~\u0000+sq\u0000~"
								+ "\u0000,q\u0000~\u0000=q\u0000~\u0000<sr\u0000#com.sun.msv.grammar.SimpleNameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002"
								+ "\u0000\u0002L\u0000\tlocalNameq\u0000~\u0000\"L\u0000\fnamespaceURIq\u0000~\u0000\"xr\u0000\u001dcom.sun.msv.gramm"
								+ "ar.NameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xpt\u0000\tconstructq\u0000~\u0000<sr\u00000com.sun.msv.gr"
								+ "ammar.Expression$EpsilonExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0004sq\u0000~\u00002\u0001q\u0000"
								+ "~\u0000Jsq\u0000~\u0000.ppsq\u0000~\u00000q\u0000~\u00003pq\u0000~\u0000\u001csq\u0000~\u0000Et\u0000\u0006dottedq\u0000~\u0000<q\u0000~\u0000Jsq\u0000~\u0000.p"
								+ "psq\u0000~\u00000q\u0000~\u00003pq\u0000~\u00004sq\u0000~\u0000Et\u0000\u0004dualq\u0000~\u0000<q\u0000~\u0000Jsq\u0000~\u0000.ppsq\u0000~\u00000q\u0000~\u00003"
								+ "psq\u0000~\u0000\u0019ppsq\u0000~\u00005q\u0000~\u0000<t\u0000\fFeminineTypeq\u0000~\u0000)\u0000\u0000q\u0000~\u0000$q\u0000~\u0000$q\u0000~\u0000>sq\u0000"
								+ "~\u0000?w\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\u0004t\u0000\u000bunspecifiedt\u0000\u0002itt\u0000\u0001ht\u0000\u0001txq\u0000~\u0000+sq\u0000~\u0000,q\u0000~\u0000"
								+ "Xq\u0000~\u0000<sq\u0000~\u0000Et\u0000\bfeminineq\u0000~\u0000<q\u0000~\u0000Jsq\u0000~\u0000.ppsq\u0000~\u00000q\u0000~\u00003psq\u0000~\u0000\u0019p"
								+ "psq\u0000~\u00005q\u0000~\u0000<t\u0000\nGenderTypeq\u0000~\u0000)\u0000\u0000q\u0000~\u0000$q\u0000~\u0000$q\u0000~\u0000>sq\u0000~\u0000?w\f\u0000\u0000\u0000\u0010?"
								+ "@\u0000\u0000\u0000\u0000\u0000\u0004t\u0000\u000bunspecifiedt\u0000\bfemininet\u0000\u0016masculine and femininet\u0000\t"
								+ "masculinexq\u0000~\u0000+sq\u0000~\u0000,q\u0000~\u0000eq\u0000~\u0000<sq\u0000~\u0000Et\u0000\u0006genderq\u0000~\u0000<q\u0000~\u0000Jsq\u0000~"
								+ "\u0000.ppsq\u0000~\u00000q\u0000~\u00003psq\u0000~\u0000\u0019ppsr\u0000$com.sun.msv.datatype.xsd.Boolean"
								+ "Type\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u001fq\u0000~\u0000%t\u0000\u0007booleanq\u0000~\u0000)q\u0000~\u0000+sq\u0000~\u0000,q\u0000~\u0000sq\u0000~"
								+ "\u0000%sq\u0000~\u0000Et\u0000\u0011inflectConstructPq\u0000~\u0000<q\u0000~\u0000Jsq\u0000~\u0000.ppsq\u0000~\u00000q\u0000~\u00003pq\u0000"
								+ "~\u0000psq\u0000~\u0000Et\u0000\u0011inflectConstructSq\u0000~\u0000<q\u0000~\u0000Jsq\u0000~\u0000.ppsq\u0000~\u00000q\u0000~\u00003pq"
								+ "\u0000~\u0000psq\u0000~\u0000Et\u0000\u0012inflectPossessivePq\u0000~\u0000<q\u0000~\u0000Jsq\u0000~\u0000.ppsq\u0000~\u00000q\u0000~\u00003"
								+ "pq\u0000~\u0000psq\u0000~\u0000Et\u0000\u0012inflectPossessiveSq\u0000~\u0000<q\u0000~\u0000Jsq\u0000~\u0000.ppsq\u0000~\u00000q\u0000~"
								+ "\u00003psq\u0000~\u0000\u0019ppsq\u0000~\u00005q\u0000~\u0000<t\u0000\nNumberTypeq\u0000~\u0000)\u0000\u0000q\u0000~\u0000$q\u0000~\u0000$q\u0000~\u0000>sq\u0000"
								+ "~\u0000?w\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\u0006t\u0000\u000bunspecifiedt\u0000\u0013singular and pluralt\u0000\u0004dual"
								+ "t\u0000\u000fdual and pluralt\u0000\bsingulart\u0000\u0006pluralxq\u0000~\u0000+sq\u0000~\u0000,q\u0000~\u0000\u0087q\u0000~\u0000<"
								+ "sq\u0000~\u0000Et\u0000\u0006numberq\u0000~\u0000<q\u0000~\u0000Jsq\u0000~\u0000.ppsq\u0000~\u00000q\u0000~\u00003psq\u0000~\u0000\u0019ppsq\u0000~\u00005q"
								+ "\u0000~\u0000<t\u0000\nPluralTypeq\u0000~\u0000)\u0000\u0000q\u0000~\u0000$q\u0000~\u0000$q\u0000~\u0000>sq\u0000~\u0000?w\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\bt"
								+ "\u0000\u000bunspecifiedt\u0000\u0003awtt\u0000\u0002wtt\u0000\u0002imt\u0000\u0003iimt\u0000\u0001mt\u0000\tim and wtt\u0000\u0003iwtxq\u0000"
								+ "~\u0000+sq\u0000~\u0000,q\u0000~\u0000\u0096q\u0000~\u0000<sq\u0000~\u0000Et\u0000\u0006pluralq\u0000~\u0000<q\u0000~\u0000Jsq\u0000~\u0000.ppsq\u0000~\u00000q\u0000"
								+ "~\u00003psq\u0000~\u0000\u0019ppsq\u0000~\u00005q\u0000~\u0000<t\u0000\u0007PGNTypeq\u0000~\u0000)\u0000\u0000q\u0000~\u0000$q\u0000~\u0000$q\u0000~\u0000>sq\u0000~\u0000"
								+ "?w\f\u0000\u0000\u0000 ?@\u0000\u0000\u0000\u0000\u0000\u0013t\u0000\t123p/M/Sgt\u0000\u00072p/M/Plt\u0000\u00073p/M/Sgt\u0000\b1p/MF/Sgt\u0000"
								+ "\t123p/M/Plt\u0000\b2p/MF/Plt\u0000\u00072p/M/Sgt\u0000\u00071p/F/Sgt\u0000\b3p/MF/Plt\u0000\u00073p/F/"
								+ "Plt\u0000\u00071p/M/Sgt\u0000\u000bunspecifiedt\u0000\u00072p/F/Plt\u0000\t123p/F/Plt\u0000\u00073p/M/Plt\u0000"
								+ "\u00073p/F/Sgt\u0000\t123p/F/Sgt\u0000\b1p/MF/Plt\u0000\u00072p/F/Sgxq\u0000~\u0000+sq\u0000~\u0000,q\u0000~\u0000\u00a7q\u0000"
								+ "~\u0000<sq\u0000~\u0000Et\u0000\npossessiveq\u0000~\u0000<q\u0000~\u0000Jsq\u0000~\u0000.ppsq\u0000~\u00000q\u0000~\u00003psq\u0000~\u0000\u0019pp"
								+ "sq\u0000~\u00005q\u0000~\u0000<t\u0000\nScriptTypeq\u0000~\u0000)\u0000\u0000q\u0000~\u0000$q\u0000~\u0000$q\u0000~\u0000>sq\u0000~\u0000?w\f\u0000\u0000\u0000\u0010?@"
								+ "\u0000\u0000\u0000\u0000\u0000\u0004t\u0000\u0004typot\u0000\u0006formalt\u0000\u0005slangt\u0000\ncolloquialxq\u0000~\u0000+sq\u0000~\u0000,q\u0000~\u0000\u00c3"
								+ "q\u0000~\u0000<sq\u0000~\u0000Et\u0000\u0006scriptq\u0000~\u0000<q\u0000~\u0000Jsq\u0000~\u00000ppq\u0000~\u0000\u001csq\u0000~\u0000Et\u0000\u000etranslit"
								+ "eratedq\u0000~\u0000<sq\u0000~\u00000ppq\u0000~\u0000\u001csq\u0000~\u0000Et\u0000\bundottedq\u0000~\u0000<sq\u0000~\u0000.ppsq\u0000~\u00000"
								+ "q\u0000~\u00003psq\u0000~\u0000\u0019ppsr\u0000\"com.sun.msv.datatype.xsd.QnameType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001"
								+ "\u0002\u0000\u0000xq\u0000~\u0000\u001fq\u0000~\u0000%t\u0000\u0005QNameq\u0000~\u0000)q\u0000~\u0000+sq\u0000~\u0000,q\u0000~\u0000\u00d7q\u0000~\u0000%sq\u0000~\u0000Et\u0000\u0004typ"
								+ "et\u0000)http://www.w3.org/2001/XMLSchema-instanceq\u0000~\u0000Jsq\u0000~\u0000Et\u0000\u0006r"
								+ "emoveq\u0000~\u0000<sr\u0000\"com.sun.msv.grammar.ExpressionPool\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L"
								+ "\u0000\bexpTablet\u0000/Lcom/sun/msv/grammar/ExpressionPool$ClosedHash;"
								+ "xpsr\u0000-com.sun.msv.grammar.ExpressionPool$ClosedHash\u00d7j\u00d0N\u00ef\u00e8\u00ed\u001c\u0003"
								+ "\u0000\u0003I\u0000\u0005countB\u0000\rstreamVersionL\u0000\u0006parentt\u0000$Lcom/sun/msv/grammar/E"
								+ "xpressionPool;xp\u0000\u0000\u0000\u001e\u0001pq\u0000~\u0000\rq\u0000~\u0000\u00d2q\u0000~\u0000nq\u0000~\u0000/q\u0000~\u0000Lq\u0000~\u0000\nq\u0000~\u0000\u0083q\u0000~"
								+ "\u0000\u0017q\u0000~\u0000aq\u0000~\u0000\u0092q\u0000~\u0000\u0016q\u0000~\u0000Pq\u0000~\u0000wq\u0000~\u0000\fq\u0000~\u0000\u000eq\u0000~\u0000\u0015q\u0000~\u0000\u0010q\u0000~\u0000\u007fq\u0000~\u0000\u00a3q\u0000~"
								+ "\u0000\u000fq\u0000~\u0000\u000bq\u0000~\u0000\tq\u0000~\u0000{q\u0000~\u0000Tq\u0000~\u0000\u00bfq\u0000~\u0000\u0011q\u0000~\u0000\u0014q\u0000~\u0000\u0018q\u0000~\u0000\u0012q\u0000~\u0000\u0013x"));
			}
			return new com.sun.msv.verifier.regexp.REDocumentDeclaration(
					schemaFragment);
		}

		@Override
		public mila.generated.impl.runtime.UnmarshallingEventHandler createUnmarshaller(
				mila.generated.impl.runtime.UnmarshallingContext context) {
			return new mila.generated.impl.AdjectiveLexiconTypeImpl.RemoveImpl.Unmarshaller(
					context);
		}

		@Override
		public java.lang.Class getPrimaryInterface() {
			return (mila.generated.AdjectiveLexiconType.Remove.class);
		}

		@Override
		public void serializeAttributes(
				mila.generated.impl.runtime.XMLSerializer context)
				throws org.xml.sax.SAXException {
		}

		@Override
		public void serializeBody(mila.generated.impl.runtime.XMLSerializer context)
				throws org.xml.sax.SAXException {
			context.startElement("", "remove");
			super.serializeURIs(context);
			context.endNamespaceDecls();
			super.serializeAttributes(context);
			context.endAttributes();
			super.serializeBody(context);
			context.endElement();
		}

		@Override
		public void serializeURIs(mila.generated.impl.runtime.XMLSerializer context)
				throws org.xml.sax.SAXException {
		}

	}

	public static class ReplaceImpl extends
			mila.generated.impl.NounExceptionTypeImpl implements
			mila.generated.AdjectiveLexiconType.Replace, com.sun.xml.bind.RIElement,
			com.sun.xml.bind.JAXBObject,
			mila.generated.impl.runtime.UnmarshallableObject,
			mila.generated.impl.runtime.XMLSerializable,
			mila.generated.impl.runtime.ValidatableObject {

		public class Unmarshaller extends
				mila.generated.impl.runtime.AbstractUnmarshallingEventHandlerImpl {

			public Unmarshaller(
					mila.generated.impl.runtime.UnmarshallingContext context) {
				super(context, "----");
			}

			protected Unmarshaller(
					mila.generated.impl.runtime.UnmarshallingContext context,
					int startState) {
				this(context);
				state = startState;
			}

			@Override
			public void enterAttribute(java.lang.String ___uri,
					java.lang.String ___local, java.lang.String ___qname)
					throws org.xml.sax.SAXException {
				int attIdx;
				outer: while (true) {
					switch (state) {
					case 1:
						if (("construct" == ___local) && ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((mila.generated.impl.NounExceptionTypeImpl) mila.generated.impl.AdjectiveLexiconTypeImpl.ReplaceImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						if (("dotted" == ___local) && ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((mila.generated.impl.NounExceptionTypeImpl) mila.generated.impl.AdjectiveLexiconTypeImpl.ReplaceImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						if (("dual" == ___local) && ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((mila.generated.impl.NounExceptionTypeImpl) mila.generated.impl.AdjectiveLexiconTypeImpl.ReplaceImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						if (("feminine" == ___local) && ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((mila.generated.impl.NounExceptionTypeImpl) mila.generated.impl.AdjectiveLexiconTypeImpl.ReplaceImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						if (("gender" == ___local) && ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((mila.generated.impl.NounExceptionTypeImpl) mila.generated.impl.AdjectiveLexiconTypeImpl.ReplaceImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						if (("inflectConstructP" == ___local) && ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((mila.generated.impl.NounExceptionTypeImpl) mila.generated.impl.AdjectiveLexiconTypeImpl.ReplaceImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						if (("inflectConstructS" == ___local) && ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((mila.generated.impl.NounExceptionTypeImpl) mila.generated.impl.AdjectiveLexiconTypeImpl.ReplaceImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						if (("inflectPossessiveP" == ___local)
								&& ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((mila.generated.impl.NounExceptionTypeImpl) mila.generated.impl.AdjectiveLexiconTypeImpl.ReplaceImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						if (("inflectPossessiveS" == ___local)
								&& ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((mila.generated.impl.NounExceptionTypeImpl) mila.generated.impl.AdjectiveLexiconTypeImpl.ReplaceImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						if (("number" == ___local) && ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((mila.generated.impl.NounExceptionTypeImpl) mila.generated.impl.AdjectiveLexiconTypeImpl.ReplaceImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						if (("plural" == ___local) && ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((mila.generated.impl.NounExceptionTypeImpl) mila.generated.impl.AdjectiveLexiconTypeImpl.ReplaceImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						if (("possessive" == ___local) && ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((mila.generated.impl.NounExceptionTypeImpl) mila.generated.impl.AdjectiveLexiconTypeImpl.ReplaceImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						if (("script" == ___local) && ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((mila.generated.impl.NounExceptionTypeImpl) mila.generated.impl.AdjectiveLexiconTypeImpl.ReplaceImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						if (("transliterated" == ___local) && ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((mila.generated.impl.NounExceptionTypeImpl) mila.generated.impl.AdjectiveLexiconTypeImpl.ReplaceImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						break;
					case 3:
						revertToParentFromEnterAttribute(___uri, ___local,
								___qname);
						return;
					}
					super.enterAttribute(___uri, ___local, ___qname);
					break;
				}
			}

			@Override
			public void enterElement(java.lang.String ___uri,
					java.lang.String ___local, java.lang.String ___qname,
					org.xml.sax.Attributes __atts)
					throws org.xml.sax.SAXException {
				int attIdx;
				outer: while (true) {
					switch (state) {
					case 1:
						attIdx = context.getAttribute("", "construct");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						attIdx = context.getAttribute("", "dotted");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						attIdx = context.getAttribute("", "dual");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						attIdx = context.getAttribute("", "feminine");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						attIdx = context.getAttribute("", "gender");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						attIdx = context.getAttribute("", "inflectConstructP");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						attIdx = context.getAttribute("", "inflectConstructS");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						attIdx = context.getAttribute("", "inflectPossessiveP");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						attIdx = context.getAttribute("", "inflectPossessiveS");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						attIdx = context.getAttribute("", "number");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						attIdx = context.getAttribute("", "plural");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						attIdx = context.getAttribute("", "possessive");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						attIdx = context.getAttribute("", "script");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						attIdx = context.getAttribute("", "transliterated");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						break;
					case 3:
						revertToParentFromEnterElement(___uri, ___local,
								___qname, __atts);
						return;
					case 0:
						if (("replace" == ___local) && ("" == ___uri)) {
							context.pushAttributes(__atts, true);
							state = 1;
							return;
						}
						break;
					}
					super.enterElement(___uri, ___local, ___qname, __atts);
					break;
				}
			}

			@Override
			public void handleText(final java.lang.String value)
					throws org.xml.sax.SAXException {
				int attIdx;
				outer: while (true) {
					try {
						switch (state) {
						case 1:
							attIdx = context.getAttribute("", "construct");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							attIdx = context.getAttribute("", "dotted");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							attIdx = context.getAttribute("", "dual");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							attIdx = context.getAttribute("", "feminine");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							attIdx = context.getAttribute("", "gender");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							attIdx = context.getAttribute("",
									"inflectConstructP");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							attIdx = context.getAttribute("",
									"inflectConstructS");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							attIdx = context.getAttribute("",
									"inflectPossessiveP");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							attIdx = context.getAttribute("",
									"inflectPossessiveS");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							attIdx = context.getAttribute("", "number");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							attIdx = context.getAttribute("", "plural");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							attIdx = context.getAttribute("", "possessive");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							attIdx = context.getAttribute("", "script");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							attIdx = context.getAttribute("", "transliterated");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							break;
						case 3:
							revertToParentFromText(value);
							return;
						}
					} catch (java.lang.RuntimeException e) {
						handleUnexpectedTextException(value, e);
					}
					break;
				}
			}

			@Override
			public void leaveAttribute(java.lang.String ___uri,
					java.lang.String ___local, java.lang.String ___qname)
					throws org.xml.sax.SAXException {
				int attIdx;
				outer: while (true) {
					switch (state) {
					case 1:
						attIdx = context.getAttribute("", "construct");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "dotted");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "dual");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "feminine");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "gender");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "inflectConstructP");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "inflectConstructS");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "inflectPossessiveP");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "inflectPossessiveS");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "number");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "plural");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "possessive");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "script");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "transliterated");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						break;
					case 3:
						revertToParentFromLeaveAttribute(___uri, ___local,
								___qname);
						return;
					}
					super.leaveAttribute(___uri, ___local, ___qname);
					break;
				}
			}

			@Override
			public void leaveElement(java.lang.String ___uri,
					java.lang.String ___local, java.lang.String ___qname)
					throws org.xml.sax.SAXException {
				int attIdx;
				outer: while (true) {
					switch (state) {
					case 2:
						if (("replace" == ___local) && ("" == ___uri)) {
							context.popAttributes();
							state = 3;
							return;
						}
						break;
					case 1:
						attIdx = context.getAttribute("", "construct");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "dotted");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "dual");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "feminine");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "gender");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "inflectConstructP");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "inflectConstructS");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "inflectPossessiveP");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "inflectPossessiveS");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "number");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "plural");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "possessive");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "script");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "transliterated");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						break;
					case 3:
						revertToParentFromLeaveElement(___uri, ___local,
								___qname);
						return;
					}
					super.leaveElement(___uri, ___local, ___qname);
					break;
				}
			}

			@Override
			public java.lang.Object owner() {
				return mila.generated.impl.AdjectiveLexiconTypeImpl.ReplaceImpl.this;
			}

		}

		public final static java.lang.Class version = (mila.generated.impl.JAXBVersion.class);

		private static com.sun.msv.grammar.Grammar schemaFragment;

		private final static java.lang.Class PRIMARY_INTERFACE_CLASS() {
			return (mila.generated.AdjectiveLexiconType.Replace.class);
		}

		@Override
		public java.lang.String ____jaxb_ri____getLocalName() {
			return "replace";
		}

		@Override
		public java.lang.String ____jaxb_ri____getNamespaceURI() {
			return "";
		}

		@Override
		public com.sun.msv.verifier.DocumentDeclaration createRawValidator() {
			if (schemaFragment == null) {
				schemaFragment = com.sun.xml.bind.validator.SchemaDeserializer
						.deserialize(("\u00ac\u00ed\u0000\u0005sr\u0000\'com.sun.msv.grammar.trex.ElementPattern\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000"
								+ "\tnameClasst\u0000\u001fLcom/sun/msv/grammar/NameClass;xr\u0000\u001ecom.sun.msv."
								+ "grammar.ElementExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002Z\u0000\u001aignoreUndeclaredAttributesL\u0000"
								+ "\fcontentModelt\u0000 Lcom/sun/msv/grammar/Expression;xr\u0000\u001ecom.sun."
								+ "msv.grammar.Expression\u00f8\u0018\u0082\u00e8N5~O\u0002\u0000\u0002L\u0000\u0013epsilonReducibilityt\u0000\u0013Lj"
								+ "ava/lang/Boolean;L\u0000\u000bexpandedExpq\u0000~\u0000\u0003xppp\u0000sr\u0000\u001fcom.sun.msv.gra"
								+ "mmar.SequenceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.sun.msv.grammar.BinaryExp"
								+ "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0004exp1q\u0000~\u0000\u0003L\u0000\u0004exp2q\u0000~\u0000\u0003xq\u0000~\u0000\u0004ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007pps"
								+ "q\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000"
								+ "\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsr\u0000\u001bcom.sun.msv.g"
								+ "rammar.DataExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\u0002dtt\u0000\u001fLorg/relaxng/datatype/Datat"
								+ "ype;L\u0000\u0006exceptq\u0000~\u0000\u0003L\u0000\u0004namet\u0000\u001dLcom/sun/msv/util/StringPair;xq\u0000"
								+ "~\u0000\u0004ppsr\u0000\"com.sun.msv.datatype.xsd.TokenType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000#co"
								+ "m.sun.msv.datatype.xsd.StringType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001Z\u0000\risAlwaysValid"
								+ "xr\u0000*com.sun.msv.datatype.xsd.BuiltinAtomicType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000"
								+ "%com.sun.msv.datatype.xsd.ConcreteType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\'com.sun"
								+ ".msv.datatype.xsd.XSDatatypeImpl\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\fnamespaceUrit\u0000"
								+ "\u0012Ljava/lang/String;L\u0000\btypeNameq\u0000~\u0000\"L\u0000\nwhiteSpacet\u0000.Lcom/sun/"
								+ "msv/datatype/xsd/WhiteSpaceProcessor;xpt\u0000 http://www.w3.org/"
								+ "2001/XMLSchemat\u0000\u0005tokensr\u00005com.sun.msv.datatype.xsd.WhiteSpac"
								+ "eProcessor$Collapse\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000,com.sun.msv.datatype.xsd.W"
								+ "hiteSpaceProcessor\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xp\u0001sr\u00000com.sun.msv.grammar.Expr"
								+ "ession$NullSetExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0004ppsr\u0000\u001bcom.sun.msv.u"
								+ "til.StringPair\u00d0t\u001ejB\u008f\u008d\u00a0\u0002\u0000\u0002L\u0000\tlocalNameq\u0000~\u0000\"L\u0000\fnamespaceURIq\u0000~"
								+ "\u0000\"xpq\u0000~\u0000&q\u0000~\u0000%sr\u0000\u001dcom.sun.msv.grammar.ChoiceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq"
								+ "\u0000~\u0000\bppsr\u0000 com.sun.msv.grammar.AttributeExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0003expq"
								+ "\u0000~\u0000\u0003L\u0000\tnameClassq\u0000~\u0000\u0001xq\u0000~\u0000\u0004sr\u0000\u0011java.lang.Boolean\u00cd r\u0080\u00d5\u009c\u00fa\u00ee\u0002\u0000\u0001Z"
								+ "\u0000\u0005valuexp\u0000psq\u0000~\u0000\u0019ppsr\u0000)com.sun.msv.datatype.xsd.EnumerationF"
								+ "acet\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\u0006valuest\u0000\u000fLjava/util/Set;xr\u00009com.sun.msv.da"
								+ "tatype.xsd.DataTypeWithValueConstraintFacet\"\u00a7Ro\u00ca\u00c7\u008aT\u0002\u0000\u0000xr\u0000*co"
								+ "m.sun.msv.datatype.xsd.DataTypeWithFacet\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0005Z\u0000\fisFace"
								+ "tFixedZ\u0000\u0012needValueCheckFlagL\u0000\bbaseTypet\u0000)Lcom/sun/msv/dataty"
								+ "pe/xsd/XSDatatypeImpl;L\u0000\fconcreteTypet\u0000\'Lcom/sun/msv/datatyp"
								+ "e/xsd/ConcreteType;L\u0000\tfacetNameq\u0000~\u0000\"xq\u0000~\u0000!t\u0000\u0000t\u0000\u000eThreeStateTy"
								+ "peq\u0000~\u0000)\u0000\u0000q\u0000~\u0000$q\u0000~\u0000$t\u0000\u000benumerationsr\u0000\u0011java.util.HashSet\u00baD\u0085\u0095\u0096\u00b8"
								+ "\u00b74\u0003\u0000\u0000xpw\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\u0003t\u0000\u000bunspecifiedt\u0000\u0004truet\u0000\u0005falsexq\u0000~\u0000+sq\u0000~"
								+ "\u0000,q\u0000~\u0000=q\u0000~\u0000<sr\u0000#com.sun.msv.grammar.SimpleNameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002"
								+ "\u0000\u0002L\u0000\tlocalNameq\u0000~\u0000\"L\u0000\fnamespaceURIq\u0000~\u0000\"xr\u0000\u001dcom.sun.msv.gramm"
								+ "ar.NameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xpt\u0000\tconstructq\u0000~\u0000<sr\u00000com.sun.msv.gr"
								+ "ammar.Expression$EpsilonExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0004sq\u0000~\u00002\u0001q\u0000"
								+ "~\u0000Jsq\u0000~\u0000.ppsq\u0000~\u00000q\u0000~\u00003pq\u0000~\u0000\u001csq\u0000~\u0000Et\u0000\u0006dottedq\u0000~\u0000<q\u0000~\u0000Jsq\u0000~\u0000.p"
								+ "psq\u0000~\u00000q\u0000~\u00003pq\u0000~\u00004sq\u0000~\u0000Et\u0000\u0004dualq\u0000~\u0000<q\u0000~\u0000Jsq\u0000~\u0000.ppsq\u0000~\u00000q\u0000~\u00003"
								+ "psq\u0000~\u0000\u0019ppsq\u0000~\u00005q\u0000~\u0000<t\u0000\fFeminineTypeq\u0000~\u0000)\u0000\u0000q\u0000~\u0000$q\u0000~\u0000$q\u0000~\u0000>sq\u0000"
								+ "~\u0000?w\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\u0004t\u0000\u000bunspecifiedt\u0000\u0002itt\u0000\u0001ht\u0000\u0001txq\u0000~\u0000+sq\u0000~\u0000,q\u0000~\u0000"
								+ "Xq\u0000~\u0000<sq\u0000~\u0000Et\u0000\bfeminineq\u0000~\u0000<q\u0000~\u0000Jsq\u0000~\u0000.ppsq\u0000~\u00000q\u0000~\u00003psq\u0000~\u0000\u0019p"
								+ "psq\u0000~\u00005q\u0000~\u0000<t\u0000\nGenderTypeq\u0000~\u0000)\u0000\u0000q\u0000~\u0000$q\u0000~\u0000$q\u0000~\u0000>sq\u0000~\u0000?w\f\u0000\u0000\u0000\u0010?"
								+ "@\u0000\u0000\u0000\u0000\u0000\u0004t\u0000\u000bunspecifiedt\u0000\bfemininet\u0000\u0016masculine and femininet\u0000\t"
								+ "masculinexq\u0000~\u0000+sq\u0000~\u0000,q\u0000~\u0000eq\u0000~\u0000<sq\u0000~\u0000Et\u0000\u0006genderq\u0000~\u0000<q\u0000~\u0000Jsq\u0000~"
								+ "\u0000.ppsq\u0000~\u00000q\u0000~\u00003psq\u0000~\u0000\u0019ppsr\u0000$com.sun.msv.datatype.xsd.Boolean"
								+ "Type\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u001fq\u0000~\u0000%t\u0000\u0007booleanq\u0000~\u0000)q\u0000~\u0000+sq\u0000~\u0000,q\u0000~\u0000sq\u0000~"
								+ "\u0000%sq\u0000~\u0000Et\u0000\u0011inflectConstructPq\u0000~\u0000<q\u0000~\u0000Jsq\u0000~\u0000.ppsq\u0000~\u00000q\u0000~\u00003pq\u0000"
								+ "~\u0000psq\u0000~\u0000Et\u0000\u0011inflectConstructSq\u0000~\u0000<q\u0000~\u0000Jsq\u0000~\u0000.ppsq\u0000~\u00000q\u0000~\u00003pq"
								+ "\u0000~\u0000psq\u0000~\u0000Et\u0000\u0012inflectPossessivePq\u0000~\u0000<q\u0000~\u0000Jsq\u0000~\u0000.ppsq\u0000~\u00000q\u0000~\u00003"
								+ "pq\u0000~\u0000psq\u0000~\u0000Et\u0000\u0012inflectPossessiveSq\u0000~\u0000<q\u0000~\u0000Jsq\u0000~\u0000.ppsq\u0000~\u00000q\u0000~"
								+ "\u00003psq\u0000~\u0000\u0019ppsq\u0000~\u00005q\u0000~\u0000<t\u0000\nNumberTypeq\u0000~\u0000)\u0000\u0000q\u0000~\u0000$q\u0000~\u0000$q\u0000~\u0000>sq\u0000"
								+ "~\u0000?w\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\u0006t\u0000\u000bunspecifiedt\u0000\u0013singular and pluralt\u0000\u0004dual"
								+ "t\u0000\u000fdual and pluralt\u0000\bsingulart\u0000\u0006pluralxq\u0000~\u0000+sq\u0000~\u0000,q\u0000~\u0000\u0087q\u0000~\u0000<"
								+ "sq\u0000~\u0000Et\u0000\u0006numberq\u0000~\u0000<q\u0000~\u0000Jsq\u0000~\u0000.ppsq\u0000~\u00000q\u0000~\u00003psq\u0000~\u0000\u0019ppsq\u0000~\u00005q"
								+ "\u0000~\u0000<t\u0000\nPluralTypeq\u0000~\u0000)\u0000\u0000q\u0000~\u0000$q\u0000~\u0000$q\u0000~\u0000>sq\u0000~\u0000?w\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\bt"
								+ "\u0000\u000bunspecifiedt\u0000\u0003awtt\u0000\u0002wtt\u0000\u0002imt\u0000\u0003iimt\u0000\u0001mt\u0000\tim and wtt\u0000\u0003iwtxq\u0000"
								+ "~\u0000+sq\u0000~\u0000,q\u0000~\u0000\u0096q\u0000~\u0000<sq\u0000~\u0000Et\u0000\u0006pluralq\u0000~\u0000<q\u0000~\u0000Jsq\u0000~\u0000.ppsq\u0000~\u00000q\u0000"
								+ "~\u00003psq\u0000~\u0000\u0019ppsq\u0000~\u00005q\u0000~\u0000<t\u0000\u0007PGNTypeq\u0000~\u0000)\u0000\u0000q\u0000~\u0000$q\u0000~\u0000$q\u0000~\u0000>sq\u0000~\u0000"
								+ "?w\f\u0000\u0000\u0000 ?@\u0000\u0000\u0000\u0000\u0000\u0013t\u0000\t123p/M/Sgt\u0000\u00072p/M/Plt\u0000\u00073p/M/Sgt\u0000\b1p/MF/Sgt\u0000"
								+ "\t123p/M/Plt\u0000\b2p/MF/Plt\u0000\u00072p/M/Sgt\u0000\u00071p/F/Sgt\u0000\b3p/MF/Plt\u0000\u00073p/F/"
								+ "Plt\u0000\u00071p/M/Sgt\u0000\u000bunspecifiedt\u0000\u00072p/F/Plt\u0000\t123p/F/Plt\u0000\u00073p/M/Plt\u0000"
								+ "\u00073p/F/Sgt\u0000\t123p/F/Sgt\u0000\b1p/MF/Plt\u0000\u00072p/F/Sgxq\u0000~\u0000+sq\u0000~\u0000,q\u0000~\u0000\u00a7q\u0000"
								+ "~\u0000<sq\u0000~\u0000Et\u0000\npossessiveq\u0000~\u0000<q\u0000~\u0000Jsq\u0000~\u0000.ppsq\u0000~\u00000q\u0000~\u00003psq\u0000~\u0000\u0019pp"
								+ "sq\u0000~\u00005q\u0000~\u0000<t\u0000\nScriptTypeq\u0000~\u0000)\u0000\u0000q\u0000~\u0000$q\u0000~\u0000$q\u0000~\u0000>sq\u0000~\u0000?w\f\u0000\u0000\u0000\u0010?@"
								+ "\u0000\u0000\u0000\u0000\u0000\u0004t\u0000\u0004typot\u0000\u0006formalt\u0000\u0005slangt\u0000\ncolloquialxq\u0000~\u0000+sq\u0000~\u0000,q\u0000~\u0000\u00c3"
								+ "q\u0000~\u0000<sq\u0000~\u0000Et\u0000\u0006scriptq\u0000~\u0000<q\u0000~\u0000Jsq\u0000~\u00000ppq\u0000~\u0000\u001csq\u0000~\u0000Et\u0000\u000etranslit"
								+ "eratedq\u0000~\u0000<sq\u0000~\u00000ppq\u0000~\u0000\u001csq\u0000~\u0000Et\u0000\bundottedq\u0000~\u0000<sq\u0000~\u0000.ppsq\u0000~\u00000"
								+ "q\u0000~\u00003psq\u0000~\u0000\u0019ppsr\u0000\"com.sun.msv.datatype.xsd.QnameType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001"
								+ "\u0002\u0000\u0000xq\u0000~\u0000\u001fq\u0000~\u0000%t\u0000\u0005QNameq\u0000~\u0000)q\u0000~\u0000+sq\u0000~\u0000,q\u0000~\u0000\u00d7q\u0000~\u0000%sq\u0000~\u0000Et\u0000\u0004typ"
								+ "et\u0000)http://www.w3.org/2001/XMLSchema-instanceq\u0000~\u0000Jsq\u0000~\u0000Et\u0000\u0007r"
								+ "eplaceq\u0000~\u0000<sr\u0000\"com.sun.msv.grammar.ExpressionPool\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001"
								+ "L\u0000\bexpTablet\u0000/Lcom/sun/msv/grammar/ExpressionPool$ClosedHash"
								+ ";xpsr\u0000-com.sun.msv.grammar.ExpressionPool$ClosedHash\u00d7j\u00d0N\u00ef\u00e8\u00ed\u001c"
								+ "\u0003\u0000\u0003I\u0000\u0005countB\u0000\rstreamVersionL\u0000\u0006parentt\u0000$Lcom/sun/msv/grammar/"
								+ "ExpressionPool;xp\u0000\u0000\u0000\u001e\u0001pq\u0000~\u0000\rq\u0000~\u0000\u00d2q\u0000~\u0000nq\u0000~\u0000/q\u0000~\u0000Lq\u0000~\u0000\nq\u0000~\u0000\u0083q\u0000"
								+ "~\u0000\u0017q\u0000~\u0000aq\u0000~\u0000\u0092q\u0000~\u0000\u0016q\u0000~\u0000Pq\u0000~\u0000wq\u0000~\u0000\fq\u0000~\u0000\u000eq\u0000~\u0000\u0015q\u0000~\u0000\u0010q\u0000~\u0000\u007fq\u0000~\u0000\u00a3q\u0000"
								+ "~\u0000\u000fq\u0000~\u0000\u000bq\u0000~\u0000\tq\u0000~\u0000{q\u0000~\u0000Tq\u0000~\u0000\u00bfq\u0000~\u0000\u0011q\u0000~\u0000\u0014q\u0000~\u0000\u0018q\u0000~\u0000\u0012q\u0000~\u0000\u0013x"));
			}
			return new com.sun.msv.verifier.regexp.REDocumentDeclaration(
					schemaFragment);
		}

		@Override
		public mila.generated.impl.runtime.UnmarshallingEventHandler createUnmarshaller(
				mila.generated.impl.runtime.UnmarshallingContext context) {
			return new mila.generated.impl.AdjectiveLexiconTypeImpl.ReplaceImpl.Unmarshaller(
					context);
		}

		@Override
		public java.lang.Class getPrimaryInterface() {
			return (mila.generated.AdjectiveLexiconType.Replace.class);
		}

		@Override
		public void serializeAttributes(
				mila.generated.impl.runtime.XMLSerializer context)
				throws org.xml.sax.SAXException {
		}

		@Override
		public void serializeBody(mila.generated.impl.runtime.XMLSerializer context)
				throws org.xml.sax.SAXException {
			context.startElement("", "replace");
			super.serializeURIs(context);
			context.endNamespaceDecls();
			super.serializeAttributes(context);
			context.endAttributes();
			super.serializeBody(context);
			context.endElement();
		}

		@Override
		public void serializeURIs(mila.generated.impl.runtime.XMLSerializer context)
				throws org.xml.sax.SAXException {
		}

	}

	public class Unmarshaller extends
			mila.generated.impl.runtime.AbstractUnmarshallingEventHandlerImpl {

		public Unmarshaller(mila.generated.impl.runtime.UnmarshallingContext context) {
			super(context, "--------------------------------------------");
		}

		protected Unmarshaller(
				mila.generated.impl.runtime.UnmarshallingContext context,
				int startState) {
			this(context);
			state = startState;
		}

		private void eatText1(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_Acronym = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		private void eatText10(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_Number = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		private void eatText11(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_Root = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		private void eatText12(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_DottedPlural = com.sun.xml.bind.WhiteSpaceProcessor
						.collapse(value);
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		private void eatText13(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_Gender = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		private void eatText14(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_Pattern = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		private void eatText2(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_Plural = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		private void eatText3(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_InflectConstructP = javax.xml.bind.DatatypeConverter
						.parseBoolean(com.sun.xml.bind.WhiteSpaceProcessor
								.collapse(value));
				has_InflectConstructP = true;
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		private void eatText4(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_InflectConstructS = javax.xml.bind.DatatypeConverter
						.parseBoolean(com.sun.xml.bind.WhiteSpaceProcessor
								.collapse(value));
				has_InflectConstructS = true;
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		private void eatText5(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_InflectionBase = com.sun.xml.bind.WhiteSpaceProcessor
						.collapse(value);
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		private void eatText6(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_IpSource = com.sun.xml.bind.WhiteSpaceProcessor
						.collapse(value);
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		private void eatText7(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_Feminine = com.sun.xml.bind.WhiteSpaceProcessor
						.collapse(value);
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		private void eatText8(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_InflectionPattern = com.sun.xml.bind.WhiteSpaceProcessor
						.collapse(value);
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		private void eatText9(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_Foreign = javax.xml.bind.DatatypeConverter
						.parseBoolean(com.sun.xml.bind.WhiteSpaceProcessor
								.collapse(value));
				has_Foreign = true;
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		@Override
		public void enterAttribute(java.lang.String ___uri,
				java.lang.String ___local, java.lang.String ___qname)
				throws org.xml.sax.SAXException {
			int attIdx;
			outer: while (true) {
				switch (state) {
				case 0:
					if (("acronym" == ___local) && ("" == ___uri)) {
						state = 1;
						return;
					}
					state = 3;
					continue outer;
				case 43:
					revertToParentFromEnterAttribute(___uri, ___local, ___qname);
					return;
				case 36:
					if (("plural" == ___local) && ("" == ___uri)) {
						state = 37;
						return;
					}
					state = 39;
					continue outer;
				case 15:
					if (("inflectConstructP" == ___local) && ("" == ___uri)) {
						state = 16;
						return;
					}
					state = 18;
					continue outer;
				case 18:
					if (("inflectConstructS" == ___local) && ("" == ___uri)) {
						state = 19;
						return;
					}
					state = 21;
					continue outer;
				case 42:
					state = 43;
					continue outer;
				case 21:
					if (("inflectionBase" == ___local) && ("" == ___uri)) {
						state = 22;
						return;
					}
					state = 24;
					continue outer;
				case 27:
					if (("ipSource" == ___local) && ("" == ___uri)) {
						state = 28;
						return;
					}
					state = 30;
					continue outer;
				case 6:
					if (("feminine" == ___local) && ("" == ___uri)) {
						state = 7;
						return;
					}
					state = 9;
					continue outer;
				case 24:
					if (("inflectionPattern" == ___local) && ("" == ___uri)) {
						state = 25;
						return;
					}
					state = 27;
					continue outer;
				case 9:
					if (("foreign" == ___local) && ("" == ___uri)) {
						state = 10;
						return;
					}
					state = 12;
					continue outer;
				case 30:
					if (("number" == ___local) && ("" == ___uri)) {
						state = 31;
						return;
					}
					state = 33;
					continue outer;
				case 39:
					if (("root" == ___local) && ("" == ___uri)) {
						state = 40;
						return;
					}
					state = 42;
					continue outer;
				case 3:
					if (("dottedPlural" == ___local) && ("" == ___uri)) {
						state = 4;
						return;
					}
					state = 6;
					continue outer;
				case 12:
					if (("gender" == ___local) && ("" == ___uri)) {
						state = 13;
						return;
					}
					state = 15;
					continue outer;
				case 33:
					if (("pattern" == ___local) && ("" == ___uri)) {
						state = 34;
						return;
					}
					state = 36;
					continue outer;
				}
				super.enterAttribute(___uri, ___local, ___qname);
				break;
			}
		}

		@Override
		public void enterElement(java.lang.String ___uri,
				java.lang.String ___local, java.lang.String ___qname,
				org.xml.sax.Attributes __atts) throws org.xml.sax.SAXException {
			int attIdx;
			outer: while (true) {
				switch (state) {
				case 0:
					attIdx = context.getAttribute("", "acronym");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 3;
						eatText1(v);
						continue outer;
					}
					state = 3;
					continue outer;
				case 43:
					if (("add" == ___local) && ("" == ___uri)) {
						_getAddOrReplaceOrRemove()
								.add(spawnChildFromEnterElement(
										(mila.generated.impl.AdjectiveLexiconTypeImpl.AddImpl.class),
										43, ___uri, ___local, ___qname, __atts));
						return;
					}
					if (("replace" == ___local) && ("" == ___uri)) {
						_getAddOrReplaceOrRemove()
								.add(spawnChildFromEnterElement(
										(mila.generated.impl.AdjectiveLexiconTypeImpl.ReplaceImpl.class),
										43, ___uri, ___local, ___qname, __atts));
						return;
					}
					if (("remove" == ___local) && ("" == ___uri)) {
						_getAddOrReplaceOrRemove()
								.add(spawnChildFromEnterElement(
										(mila.generated.impl.AdjectiveLexiconTypeImpl.RemoveImpl.class),
										43, ___uri, ___local, ___qname, __atts));
						return;
					}
					revertToParentFromEnterElement(___uri, ___local, ___qname,
							__atts);
					return;
				case 36:
					attIdx = context.getAttribute("", "plural");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 39;
						eatText2(v);
						continue outer;
					}
					state = 39;
					continue outer;
				case 15:
					attIdx = context.getAttribute("", "inflectConstructP");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 18;
						eatText3(v);
						continue outer;
					}
					state = 18;
					continue outer;
				case 18:
					attIdx = context.getAttribute("", "inflectConstructS");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 21;
						eatText4(v);
						continue outer;
					}
					state = 21;
					continue outer;
				case 42:
					if (("add" == ___local) && ("" == ___uri)) {
						_getAddOrReplaceOrRemove()
								.add(spawnChildFromEnterElement(
										(mila.generated.impl.AdjectiveLexiconTypeImpl.AddImpl.class),
										43, ___uri, ___local, ___qname, __atts));
						return;
					}
					if (("replace" == ___local) && ("" == ___uri)) {
						_getAddOrReplaceOrRemove()
								.add(spawnChildFromEnterElement(
										(mila.generated.impl.AdjectiveLexiconTypeImpl.ReplaceImpl.class),
										43, ___uri, ___local, ___qname, __atts));
						return;
					}
					if (("remove" == ___local) && ("" == ___uri)) {
						_getAddOrReplaceOrRemove()
								.add(spawnChildFromEnterElement(
										(mila.generated.impl.AdjectiveLexiconTypeImpl.RemoveImpl.class),
										43, ___uri, ___local, ___qname, __atts));
						return;
					}
					state = 43;
					continue outer;
				case 21:
					attIdx = context.getAttribute("", "inflectionBase");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 24;
						eatText5(v);
						continue outer;
					}
					state = 24;
					continue outer;
				case 27:
					attIdx = context.getAttribute("", "ipSource");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 30;
						eatText6(v);
						continue outer;
					}
					state = 30;
					continue outer;
				case 6:
					attIdx = context.getAttribute("", "feminine");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 9;
						eatText7(v);
						continue outer;
					}
					state = 9;
					continue outer;
				case 24:
					attIdx = context.getAttribute("", "inflectionPattern");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 27;
						eatText8(v);
						continue outer;
					}
					state = 27;
					continue outer;
				case 9:
					attIdx = context.getAttribute("", "foreign");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 12;
						eatText9(v);
						continue outer;
					}
					state = 12;
					continue outer;
				case 30:
					attIdx = context.getAttribute("", "number");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 33;
						eatText10(v);
						continue outer;
					}
					state = 33;
					continue outer;
				case 39:
					attIdx = context.getAttribute("", "root");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 42;
						eatText11(v);
						continue outer;
					}
					state = 42;
					continue outer;
				case 3:
					attIdx = context.getAttribute("", "dottedPlural");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 6;
						eatText12(v);
						continue outer;
					}
					state = 6;
					continue outer;
				case 12:
					attIdx = context.getAttribute("", "gender");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 15;
						eatText13(v);
						continue outer;
					}
					state = 15;
					continue outer;
				case 33:
					attIdx = context.getAttribute("", "pattern");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 36;
						eatText14(v);
						continue outer;
					}
					state = 36;
					continue outer;
				}
				super.enterElement(___uri, ___local, ___qname, __atts);
				break;
			}
		}

		@Override
		public void handleText(final java.lang.String value)
				throws org.xml.sax.SAXException {
			int attIdx;
			outer: while (true) {
				try {
					switch (state) {
					case 0:
						attIdx = context.getAttribute("", "acronym");
						if (attIdx >= 0) {
							final java.lang.String v = context
									.eatAttribute(attIdx);
							state = 3;
							eatText1(v);
							continue outer;
						}
						state = 3;
						continue outer;
					case 40:
						state = 41;
						eatText11(value);
						return;
					case 43:
						revertToParentFromText(value);
						return;
					case 37:
						state = 38;
						eatText2(value);
						return;
					case 1:
						state = 2;
						eatText1(value);
						return;
					case 22:
						state = 23;
						eatText5(value);
						return;
					case 36:
						attIdx = context.getAttribute("", "plural");
						if (attIdx >= 0) {
							final java.lang.String v = context
									.eatAttribute(attIdx);
							state = 39;
							eatText2(v);
							continue outer;
						}
						state = 39;
						continue outer;
					case 34:
						state = 35;
						eatText14(value);
						return;
					case 15:
						attIdx = context.getAttribute("", "inflectConstructP");
						if (attIdx >= 0) {
							final java.lang.String v = context
									.eatAttribute(attIdx);
							state = 18;
							eatText3(v);
							continue outer;
						}
						state = 18;
						continue outer;
					case 28:
						state = 29;
						eatText6(value);
						return;
					case 18:
						attIdx = context.getAttribute("", "inflectConstructS");
						if (attIdx >= 0) {
							final java.lang.String v = context
									.eatAttribute(attIdx);
							state = 21;
							eatText4(v);
							continue outer;
						}
						state = 21;
						continue outer;
					case 42:
						state = 43;
						continue outer;
					case 10:
						state = 11;
						eatText9(value);
						return;
					case 21:
						attIdx = context.getAttribute("", "inflectionBase");
						if (attIdx >= 0) {
							final java.lang.String v = context
									.eatAttribute(attIdx);
							state = 24;
							eatText5(v);
							continue outer;
						}
						state = 24;
						continue outer;
					case 31:
						state = 32;
						eatText10(value);
						return;
					case 27:
						attIdx = context.getAttribute("", "ipSource");
						if (attIdx >= 0) {
							final java.lang.String v = context
									.eatAttribute(attIdx);
							state = 30;
							eatText6(v);
							continue outer;
						}
						state = 30;
						continue outer;
					case 7:
						state = 8;
						eatText7(value);
						return;
					case 6:
						attIdx = context.getAttribute("", "feminine");
						if (attIdx >= 0) {
							final java.lang.String v = context
									.eatAttribute(attIdx);
							state = 9;
							eatText7(v);
							continue outer;
						}
						state = 9;
						continue outer;
					case 24:
						attIdx = context.getAttribute("", "inflectionPattern");
						if (attIdx >= 0) {
							final java.lang.String v = context
									.eatAttribute(attIdx);
							state = 27;
							eatText8(v);
							continue outer;
						}
						state = 27;
						continue outer;
					case 9:
						attIdx = context.getAttribute("", "foreign");
						if (attIdx >= 0) {
							final java.lang.String v = context
									.eatAttribute(attIdx);
							state = 12;
							eatText9(v);
							continue outer;
						}
						state = 12;
						continue outer;
					case 16:
						state = 17;
						eatText3(value);
						return;
					case 30:
						attIdx = context.getAttribute("", "number");
						if (attIdx >= 0) {
							final java.lang.String v = context
									.eatAttribute(attIdx);
							state = 33;
							eatText10(v);
							continue outer;
						}
						state = 33;
						continue outer;
					case 39:
						attIdx = context.getAttribute("", "root");
						if (attIdx >= 0) {
							final java.lang.String v = context
									.eatAttribute(attIdx);
							state = 42;
							eatText11(v);
							continue outer;
						}
						state = 42;
						continue outer;
					case 19:
						state = 20;
						eatText4(value);
						return;
					case 4:
						state = 5;
						eatText12(value);
						return;
					case 3:
						attIdx = context.getAttribute("", "dottedPlural");
						if (attIdx >= 0) {
							final java.lang.String v = context
									.eatAttribute(attIdx);
							state = 6;
							eatText12(v);
							continue outer;
						}
						state = 6;
						continue outer;
					case 13:
						state = 14;
						eatText13(value);
						return;
					case 25:
						state = 26;
						eatText8(value);
						return;
					case 12:
						attIdx = context.getAttribute("", "gender");
						if (attIdx >= 0) {
							final java.lang.String v = context
									.eatAttribute(attIdx);
							state = 15;
							eatText13(v);
							continue outer;
						}
						state = 15;
						continue outer;
					case 33:
						attIdx = context.getAttribute("", "pattern");
						if (attIdx >= 0) {
							final java.lang.String v = context
									.eatAttribute(attIdx);
							state = 36;
							eatText14(v);
							continue outer;
						}
						state = 36;
						continue outer;
					}
				} catch (java.lang.RuntimeException e) {
					handleUnexpectedTextException(value, e);
				}
				break;
			}
		}

		@Override
		public void leaveAttribute(java.lang.String ___uri,
				java.lang.String ___local, java.lang.String ___qname)
				throws org.xml.sax.SAXException {
			int attIdx;
			outer: while (true) {
				switch (state) {
				case 5:
					if (("dottedPlural" == ___local) && ("" == ___uri)) {
						state = 6;
						return;
					}
					break;
				case 0:
					attIdx = context.getAttribute("", "acronym");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 3;
						eatText1(v);
						continue outer;
					}
					state = 3;
					continue outer;
				case 43:
					revertToParentFromLeaveAttribute(___uri, ___local, ___qname);
					return;
				case 14:
					if (("gender" == ___local) && ("" == ___uri)) {
						state = 15;
						return;
					}
					break;
				case 20:
					if (("inflectConstructS" == ___local) && ("" == ___uri)) {
						state = 21;
						return;
					}
					break;
				case 36:
					attIdx = context.getAttribute("", "plural");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 39;
						eatText2(v);
						continue outer;
					}
					state = 39;
					continue outer;
				case 15:
					attIdx = context.getAttribute("", "inflectConstructP");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 18;
						eatText3(v);
						continue outer;
					}
					state = 18;
					continue outer;
				case 18:
					attIdx = context.getAttribute("", "inflectConstructS");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 21;
						eatText4(v);
						continue outer;
					}
					state = 21;
					continue outer;
				case 42:
					state = 43;
					continue outer;
				case 21:
					attIdx = context.getAttribute("", "inflectionBase");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 24;
						eatText5(v);
						continue outer;
					}
					state = 24;
					continue outer;
				case 23:
					if (("inflectionBase" == ___local) && ("" == ___uri)) {
						state = 24;
						return;
					}
					break;
				case 27:
					attIdx = context.getAttribute("", "ipSource");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 30;
						eatText6(v);
						continue outer;
					}
					state = 30;
					continue outer;
				case 6:
					attIdx = context.getAttribute("", "feminine");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 9;
						eatText7(v);
						continue outer;
					}
					state = 9;
					continue outer;
				case 24:
					attIdx = context.getAttribute("", "inflectionPattern");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 27;
						eatText8(v);
						continue outer;
					}
					state = 27;
					continue outer;
				case 9:
					attIdx = context.getAttribute("", "foreign");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 12;
						eatText9(v);
						continue outer;
					}
					state = 12;
					continue outer;
				case 8:
					if (("feminine" == ___local) && ("" == ___uri)) {
						state = 9;
						return;
					}
					break;
				case 11:
					if (("foreign" == ___local) && ("" == ___uri)) {
						state = 12;
						return;
					}
					break;
				case 32:
					if (("number" == ___local) && ("" == ___uri)) {
						state = 33;
						return;
					}
					break;
				case 30:
					attIdx = context.getAttribute("", "number");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 33;
						eatText10(v);
						continue outer;
					}
					state = 33;
					continue outer;
				case 39:
					attIdx = context.getAttribute("", "root");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 42;
						eatText11(v);
						continue outer;
					}
					state = 42;
					continue outer;
				case 3:
					attIdx = context.getAttribute("", "dottedPlural");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 6;
						eatText12(v);
						continue outer;
					}
					state = 6;
					continue outer;
				case 12:
					attIdx = context.getAttribute("", "gender");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 15;
						eatText13(v);
						continue outer;
					}
					state = 15;
					continue outer;
				case 2:
					if (("acronym" == ___local) && ("" == ___uri)) {
						state = 3;
						return;
					}
					break;
				case 41:
					if (("root" == ___local) && ("" == ___uri)) {
						state = 42;
						return;
					}
					break;
				case 17:
					if (("inflectConstructP" == ___local) && ("" == ___uri)) {
						state = 18;
						return;
					}
					break;
				case 38:
					if (("plural" == ___local) && ("" == ___uri)) {
						state = 39;
						return;
					}
					break;
				case 35:
					if (("pattern" == ___local) && ("" == ___uri)) {
						state = 36;
						return;
					}
					break;
				case 26:
					if (("inflectionPattern" == ___local) && ("" == ___uri)) {
						state = 27;
						return;
					}
					break;
				case 29:
					if (("ipSource" == ___local) && ("" == ___uri)) {
						state = 30;
						return;
					}
					break;
				case 33:
					attIdx = context.getAttribute("", "pattern");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 36;
						eatText14(v);
						continue outer;
					}
					state = 36;
					continue outer;
				}
				super.leaveAttribute(___uri, ___local, ___qname);
				break;
			}
		}

		@Override
		public void leaveElement(java.lang.String ___uri,
				java.lang.String ___local, java.lang.String ___qname)
				throws org.xml.sax.SAXException {
			int attIdx;
			outer: while (true) {
				switch (state) {
				case 0:
					attIdx = context.getAttribute("", "acronym");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 3;
						eatText1(v);
						continue outer;
					}
					state = 3;
					continue outer;
				case 43:
					revertToParentFromLeaveElement(___uri, ___local, ___qname);
					return;
				case 36:
					attIdx = context.getAttribute("", "plural");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 39;
						eatText2(v);
						continue outer;
					}
					state = 39;
					continue outer;
				case 15:
					attIdx = context.getAttribute("", "inflectConstructP");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 18;
						eatText3(v);
						continue outer;
					}
					state = 18;
					continue outer;
				case 18:
					attIdx = context.getAttribute("", "inflectConstructS");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 21;
						eatText4(v);
						continue outer;
					}
					state = 21;
					continue outer;
				case 42:
					state = 43;
					continue outer;
				case 21:
					attIdx = context.getAttribute("", "inflectionBase");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 24;
						eatText5(v);
						continue outer;
					}
					state = 24;
					continue outer;
				case 27:
					attIdx = context.getAttribute("", "ipSource");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 30;
						eatText6(v);
						continue outer;
					}
					state = 30;
					continue outer;
				case 6:
					attIdx = context.getAttribute("", "feminine");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 9;
						eatText7(v);
						continue outer;
					}
					state = 9;
					continue outer;
				case 24:
					attIdx = context.getAttribute("", "inflectionPattern");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 27;
						eatText8(v);
						continue outer;
					}
					state = 27;
					continue outer;
				case 9:
					attIdx = context.getAttribute("", "foreign");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 12;
						eatText9(v);
						continue outer;
					}
					state = 12;
					continue outer;
				case 30:
					attIdx = context.getAttribute("", "number");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 33;
						eatText10(v);
						continue outer;
					}
					state = 33;
					continue outer;
				case 39:
					attIdx = context.getAttribute("", "root");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 42;
						eatText11(v);
						continue outer;
					}
					state = 42;
					continue outer;
				case 3:
					attIdx = context.getAttribute("", "dottedPlural");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 6;
						eatText12(v);
						continue outer;
					}
					state = 6;
					continue outer;
				case 12:
					attIdx = context.getAttribute("", "gender");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 15;
						eatText13(v);
						continue outer;
					}
					state = 15;
					continue outer;
				case 33:
					attIdx = context.getAttribute("", "pattern");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 36;
						eatText14(v);
						continue outer;
					}
					state = 36;
					continue outer;
				}
				super.leaveElement(___uri, ___local, ___qname);
				break;
			}
		}

		@Override
		public java.lang.Object owner() {
			return mila.generated.impl.AdjectiveLexiconTypeImpl.this;
		}

	}

	protected java.lang.String _Feminine;
	protected java.lang.String _Gender;
	protected java.lang.String _DottedPlural;
	protected java.lang.String _Plural;
	protected boolean has_Foreign;
	protected boolean _Foreign;
	protected java.lang.String _IpSource;
	protected boolean has_InflectConstructS;
	protected boolean _InflectConstructS;
	protected java.lang.String _InflectionPattern;
	protected java.lang.String _Number;
	protected java.lang.String _Root;
	protected java.lang.String _Acronym;
	protected java.lang.String _InflectionBase;
	protected com.sun.xml.bind.util.ListImpl _AddOrReplaceOrRemove;
	protected boolean has_InflectConstructP;

	protected boolean _InflectConstructP;

	protected java.lang.String _Pattern;

	public final static java.lang.Class version = (mila.generated.impl.JAXBVersion.class);

	private static com.sun.msv.grammar.Grammar schemaFragment;

	private final static java.lang.Class PRIMARY_INTERFACE_CLASS() {
		return (mila.generated.AdjectiveLexiconType.class);
	}

	protected com.sun.xml.bind.util.ListImpl _getAddOrReplaceOrRemove() {
		if (_AddOrReplaceOrRemove == null) {
			_AddOrReplaceOrRemove = new com.sun.xml.bind.util.ListImpl(
					new java.util.ArrayList());
		}
		return _AddOrReplaceOrRemove;
	}

	@Override
	public com.sun.msv.verifier.DocumentDeclaration createRawValidator() {
		if (schemaFragment == null) {
			schemaFragment = com.sun.xml.bind.validator.SchemaDeserializer
					.deserialize(("\u00ac\u00ed\u0000\u0005sr\u0000\u001fcom.sun.msv.grammar.SequenceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.su"
							+ "n.msv.grammar.BinaryExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0004exp1t\u0000 Lcom/sun/msv/gra"
							+ "mmar/Expression;L\u0000\u0004exp2q\u0000~\u0000\u0002xr\u0000\u001ecom.sun.msv.grammar.Expressi"
							+ "on\u00f8\u0018\u0082\u00e8N5~O\u0002\u0000\u0002L\u0000\u0013epsilonReducibilityt\u0000\u0013Ljava/lang/Boolean;L\u0000\u000b"
							+ "expandedExpq\u0000~\u0000\u0002xpppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000pp"
							+ "sq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~"
							+ "\u0000\u0000ppsr\u0000 com.sun.msv.grammar.OneOrMoreExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001ccom.s"
							+ "un.msv.grammar.UnaryExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\u0003expq\u0000~\u0000\u0002xq\u0000~\u0000\u0003ppsr\u0000\u001dcom"
							+ ".sun.msv.grammar.ChoiceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0001ppsq\u0000~\u0000\u0016ppsq\u0000~\u0000\u0016p"
							+ "psq\u0000~\u0000\u0013sr\u0000\u0011java.lang.Boolean\u00cd r\u0080\u00d5\u009c\u00fa\u00ee\u0002\u0000\u0001Z\u0000\u0005valuexp\u0000psr\u0000\'com.s"
							+ "un.msv.grammar.trex.ElementPattern\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\tnameClasst\u0000\u001f"
							+ "Lcom/sun/msv/grammar/NameClass;xr\u0000\u001ecom.sun.msv.grammar.Eleme"
							+ "ntExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002Z\u0000\u001aignoreUndeclaredAttributesL\u0000\fcontentModel"
							+ "q\u0000~\u0000\u0002xq\u0000~\u0000\u0003q\u0000~\u0000\u001cp\u0000sq\u0000~\u0000\u0016ppsq\u0000~\u0000\u0013q\u0000~\u0000\u001cpsr\u0000 com.sun.msv.gramma"
							+ "r.AttributeExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0003expq\u0000~\u0000\u0002L\u0000\tnameClassq\u0000~\u0000\u001exq\u0000~\u0000\u0003q"
							+ "\u0000~\u0000\u001cpsr\u00002com.sun.msv.grammar.Expression$AnyStringExpression\u0000"
							+ "\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003sq\u0000~\u0000\u001b\u0001q\u0000~\u0000&sr\u0000 com.sun.msv.grammar.AnyNameC"
							+ "lass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.sun.msv.grammar.NameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000x"
							+ "psr\u00000com.sun.msv.grammar.Expression$EpsilonExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000"
							+ "\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003q\u0000~\u0000\'q\u0000~\u0000,sr\u0000#com.sun.msv.grammar.SimpleNameClass\u0000"
							+ "\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\tlocalNamet\u0000\u0012Ljava/lang/String;L\u0000\fnamespaceURIq\u0000"
							+ "~\u0000.xq\u0000~\u0000)t\u0000\"generated.AdjectiveLexiconType.Addt\u0000+http://java"
							+ ".sun.com/jaxb/xjc/dummy-elementsq\u0000~\u0000,sq\u0000~\u0000\u0013ppsq\u0000~\u0000\u001dpp\u0000sq\u0000~\u0000\u0016"
							+ "ppsq\u0000~\u0000\u0013q\u0000~\u0000\u001cpsq\u0000~\u0000#q\u0000~\u0000\u001cpq\u0000~\u0000&q\u0000~\u0000*q\u0000~\u0000,sq\u0000~\u0000-t\u0000&generated."
							+ "AdjectiveLexiconType.Replaceq\u0000~\u00001sq\u0000~\u0000\u0013ppsq\u0000~\u0000\u001dpp\u0000sq\u0000~\u0000\u0016ppsq"
							+ "\u0000~\u0000\u0013q\u0000~\u0000\u001cpsq\u0000~\u0000#q\u0000~\u0000\u001cpq\u0000~\u0000&q\u0000~\u0000*q\u0000~\u0000,sq\u0000~\u0000-t\u0000%generated.Adje"
							+ "ctiveLexiconType.Removeq\u0000~\u00001sq\u0000~\u0000\u0016ppsq\u0000~\u0000#q\u0000~\u0000\u001cpsr\u0000\u001bcom.sun."
							+ "msv.grammar.DataExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\u0002dtt\u0000\u001fLorg/relaxng/datatype/"
							+ "Datatype;L\u0000\u0006exceptq\u0000~\u0000\u0002L\u0000\u0004namet\u0000\u001dLcom/sun/msv/util/StringPai"
							+ "r;xq\u0000~\u0000\u0003ppsr\u0000)com.sun.msv.datatype.xsd.EnumerationFacet\u0000\u0000\u0000\u0000\u0000"
							+ "\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\u0006valuest\u0000\u000fLjava/util/Set;xr\u00009com.sun.msv.datatype.xs"
							+ "d.DataTypeWithValueConstraintFacet\"\u00a7Ro\u00ca\u00c7\u008aT\u0002\u0000\u0000xr\u0000*com.sun.msv"
							+ ".datatype.xsd.DataTypeWithFacet\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0005Z\u0000\fisFacetFixedZ\u0000\u0012"
							+ "needValueCheckFlagL\u0000\bbaseTypet\u0000)Lcom/sun/msv/datatype/xsd/XS"
							+ "DatatypeImpl;L\u0000\fconcreteTypet\u0000\'Lcom/sun/msv/datatype/xsd/Con"
							+ "creteType;L\u0000\tfacetNameq\u0000~\u0000.xr\u0000\'com.sun.msv.datatype.xsd.XSDa"
							+ "tatypeImpl\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\fnamespaceUriq\u0000~\u0000.L\u0000\btypeNameq\u0000~\u0000.L\u0000\n"
							+ "whiteSpacet\u0000.Lcom/sun/msv/datatype/xsd/WhiteSpaceProcessor;x"
							+ "pt\u0000\u0000t\u0000\u000eThreeStateTypesr\u00005com.sun.msv.datatype.xsd.WhiteSpace"
							+ "Processor$Collapse\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000,com.sun.msv.datatype.xsd.Wh"
							+ "iteSpaceProcessor\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xp\u0000\u0000sr\u0000\"com.sun.msv.datatype.xsd"
							+ ".TokenType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000#com.sun.msv.datatype.xsd.StringType"
							+ "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001Z\u0000\risAlwaysValidxr\u0000*com.sun.msv.datatype.xsd.Buil"
							+ "tinAtomicType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000%com.sun.msv.datatype.xsd.Concret"
							+ "eType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000Lt\u0000 http://www.w3.org/2001/XMLSchemat\u0000\u0005"
							+ "tokenq\u0000~\u0000S\u0001q\u0000~\u0000Xt\u0000\u000benumerationsr\u0000\u0011java.util.HashSet\u00baD\u0085\u0095\u0096\u00b8\u00b74\u0003"
							+ "\u0000\u0000xpw\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\u0003t\u0000\u000bunspecifiedt\u0000\u0004truet\u0000\u0005falsexsr\u00000com.sun."
							+ "msv.grammar.Expression$NullSetExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003pps"
							+ "r\u0000\u001bcom.sun.msv.util.StringPair\u00d0t\u001ejB\u008f\u008d\u00a0\u0002\u0000\u0002L\u0000\tlocalNameq\u0000~\u0000.L\u0000"
							+ "\fnamespaceURIq\u0000~\u0000.xpq\u0000~\u0000Pq\u0000~\u0000Osq\u0000~\u0000-t\u0000\u0007acronymq\u0000~\u0000Oq\u0000~\u0000,sq\u0000~"
							+ "\u0000\u0016ppsq\u0000~\u0000#q\u0000~\u0000\u001cpsq\u0000~\u0000Bppq\u0000~\u0000Xq\u0000~\u0000bsq\u0000~\u0000cq\u0000~\u0000Zq\u0000~\u0000Ysq\u0000~\u0000-t\u0000\fd"
							+ "ottedPluralq\u0000~\u0000Oq\u0000~\u0000,sq\u0000~\u0000\u0016ppsq\u0000~\u0000#q\u0000~\u0000\u001cpsq\u0000~\u0000Bppsq\u0000~\u0000Fq\u0000~\u0000O"
							+ "t\u0000\fFeminineTypeq\u0000~\u0000S\u0000\u0000q\u0000~\u0000Xq\u0000~\u0000Xq\u0000~\u0000[sq\u0000~\u0000\\w\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\u0004t\u0000\u000b"
							+ "unspecifiedt\u0000\u0002itt\u0000\u0001ht\u0000\u0001txq\u0000~\u0000bsq\u0000~\u0000cq\u0000~\u0000qq\u0000~\u0000Osq\u0000~\u0000-t\u0000\bfemin"
							+ "ineq\u0000~\u0000Oq\u0000~\u0000,sq\u0000~\u0000\u0016ppsq\u0000~\u0000#q\u0000~\u0000\u001cpsq\u0000~\u0000Bppsr\u0000$com.sun.msv.dat"
							+ "atype.xsd.BooleanType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000Vq\u0000~\u0000Yt\u0000\u0007booleanq\u0000~\u0000Sq\u0000"
							+ "~\u0000bsq\u0000~\u0000cq\u0000~\u0000\u007fq\u0000~\u0000Ysq\u0000~\u0000-t\u0000\u0007foreignq\u0000~\u0000Oq\u0000~\u0000,sq\u0000~\u0000\u0016ppsq\u0000~\u0000#q"
							+ "\u0000~\u0000\u001cpsq\u0000~\u0000Bppsq\u0000~\u0000Fq\u0000~\u0000Ot\u0000\nGenderTypeq\u0000~\u0000S\u0000\u0000q\u0000~\u0000Xq\u0000~\u0000Xq\u0000~\u0000[s"
							+ "q\u0000~\u0000\\w\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\u0004t\u0000\u000bunspecifiedt\u0000\bfemininet\u0000\u0016masculine and"
							+ " femininet\u0000\tmasculinexq\u0000~\u0000bsq\u0000~\u0000cq\u0000~\u0000\u0087q\u0000~\u0000Osq\u0000~\u0000-t\u0000\u0006genderq\u0000"
							+ "~\u0000Oq\u0000~\u0000,sq\u0000~\u0000\u0016ppsq\u0000~\u0000#q\u0000~\u0000\u001cpq\u0000~\u0000|sq\u0000~\u0000-t\u0000\u0011inflectConstructPq"
							+ "\u0000~\u0000Oq\u0000~\u0000,sq\u0000~\u0000\u0016ppsq\u0000~\u0000#q\u0000~\u0000\u001cpq\u0000~\u0000|sq\u0000~\u0000-t\u0000\u0011inflectConstructS"
							+ "q\u0000~\u0000Oq\u0000~\u0000,sq\u0000~\u0000\u0016ppsq\u0000~\u0000#q\u0000~\u0000\u001cpq\u0000~\u0000isq\u0000~\u0000-t\u0000\u000einflectionBaseq\u0000"
							+ "~\u0000Oq\u0000~\u0000,sq\u0000~\u0000\u0016ppsq\u0000~\u0000#q\u0000~\u0000\u001cpq\u0000~\u0000isq\u0000~\u0000-t\u0000\u0011inflectionPatternq"
							+ "\u0000~\u0000Oq\u0000~\u0000,sq\u0000~\u0000\u0016ppsq\u0000~\u0000#q\u0000~\u0000\u001cpq\u0000~\u0000isq\u0000~\u0000-t\u0000\bipSourceq\u0000~\u0000Oq\u0000~\u0000"
							+ ",sq\u0000~\u0000\u0016ppsq\u0000~\u0000#q\u0000~\u0000\u001cpsq\u0000~\u0000Bppsq\u0000~\u0000Fq\u0000~\u0000Ot\u0000\nNumberTypeq\u0000~\u0000S\u0000\u0000"
							+ "q\u0000~\u0000Xq\u0000~\u0000Xq\u0000~\u0000[sq\u0000~\u0000\\w\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\u0006t\u0000\u000bunspecifiedt\u0000\u0013singular"
							+ " and pluralt\u0000\u0004dualt\u0000\u000fdual and pluralt\u0000\bsingulart\u0000\u0006pluralxq\u0000~"
							+ "\u0000bsq\u0000~\u0000cq\u0000~\u0000\u00a8q\u0000~\u0000Osq\u0000~\u0000-t\u0000\u0006numberq\u0000~\u0000Oq\u0000~\u0000,sq\u0000~\u0000\u0016ppsq\u0000~\u0000#q\u0000~"
							+ "\u0000\u001cpq\u0000~\u0000isq\u0000~\u0000-t\u0000\u0007patternq\u0000~\u0000Oq\u0000~\u0000,sq\u0000~\u0000\u0016ppsq\u0000~\u0000#q\u0000~\u0000\u001cpsq\u0000~\u0000B"
							+ "ppsq\u0000~\u0000Fq\u0000~\u0000Ot\u0000\nPluralTypeq\u0000~\u0000S\u0000\u0000q\u0000~\u0000Xq\u0000~\u0000Xq\u0000~\u0000[sq\u0000~\u0000\\w\f\u0000\u0000\u0000\u0010"
							+ "?@\u0000\u0000\u0000\u0000\u0000\bt\u0000\u000bunspecifiedt\u0000\u0003awtt\u0000\u0002wtt\u0000\u0002imt\u0000\u0003iimt\u0000\u0001mt\u0000\tim and wt"
							+ "t\u0000\u0003iwtxq\u0000~\u0000bsq\u0000~\u0000cq\u0000~\u0000\u00bbq\u0000~\u0000Osq\u0000~\u0000-t\u0000\u0006pluralq\u0000~\u0000Oq\u0000~\u0000,sq\u0000~\u0000\u0016p"
							+ "psq\u0000~\u0000#q\u0000~\u0000\u001cpq\u0000~\u0000isq\u0000~\u0000-t\u0000\u0004rootq\u0000~\u0000Oq\u0000~\u0000,sr\u0000\"com.sun.msv.gra"
							+ "mmar.ExpressionPool\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\bexpTablet\u0000/Lcom/sun/msv/gra"
							+ "mmar/ExpressionPool$ClosedHash;xpsr\u0000-com.sun.msv.grammar.Exp"
							+ "ressionPool$ClosedHash\u00d7j\u00d0N\u00ef\u00e8\u00ed\u001c\u0003\u0000\u0003I\u0000\u0005countB\u0000\rstreamVersionL\u0000\u0006"
							+ "parentt\u0000$Lcom/sun/msv/grammar/ExpressionPool;xp\u0000\u0000\u0000)\u0001pq\u0000~\u0000\u0007q\u0000"
							+ "~\u0000\"q\u0000~\u00005q\u0000~\u0000<q\u0000~\u0000\u0090q\u0000~\u0000\u009cq\u0000~\u0000\u0018q\u0000~\u0000\u0012q\u0000~\u0000\u0094q\u0000~\u0000\u0083q\u0000~\u0000@q\u0000~\u0000\u0006q\u0000~\u0000\u0017q\u0000"
							+ "~\u0000\fq\u0000~\u0000!q\u0000~\u00004q\u0000~\u0000;q\u0000~\u0000\u00c8q\u0000~\u0000\u000fq\u0000~\u0000\tq\u0000~\u0000\u0010q\u0000~\u0000\u000eq\u0000~\u0000\rq\u0000~\u0000\nq\u0000~\u0000\u00a4q\u0000"
							+ "~\u0000\u001aq\u0000~\u00002q\u0000~\u00009q\u0000~\u0000\u000bq\u0000~\u0000\u00b7q\u0000~\u0000zq\u0000~\u0000\u00b3q\u0000~\u0000\u0005q\u0000~\u0000\u0098q\u0000~\u0000\u0015q\u0000~\u0000\bq\u0000~\u0000\u00a0q\u0000"
							+ "~\u0000\u0011q\u0000~\u0000mq\u0000~\u0000\u0019q\u0000~\u0000gx"));
		}
		return new com.sun.msv.verifier.regexp.REDocumentDeclaration(
				schemaFragment);
	}

	@Override
	public mila.generated.impl.runtime.UnmarshallingEventHandler createUnmarshaller(
			mila.generated.impl.runtime.UnmarshallingContext context) {
		return new mila.generated.impl.AdjectiveLexiconTypeImpl.Unmarshaller(context);
	}

	@Override
	public java.lang.String getAcronym() {
		if (_Acronym == null) {
			return "false";
		} else {
			return _Acronym;
		}
	}

	@Override
	public java.util.List getAddOrReplaceOrRemove() {
		return _getAddOrReplaceOrRemove();
	}

	@Override
	public java.lang.String getDottedPlural() {
		if (_DottedPlural == null) {
			return "";
		} else {
			return _DottedPlural;
		}
	}

	@Override
	public java.lang.String getFeminine() {
		if (_Feminine == null) {
			return "h";
		} else {
			return _Feminine;
		}
	}

	@Override
	public java.lang.String getGender() {
		if (_Gender == null) {
			return "masculine";
		} else {
			return _Gender;
		}
	}

	@Override
	public java.lang.String getInflectionBase() {
		if (_InflectionBase == null) {
			return "";
		} else {
			return _InflectionBase;
		}
	}

	@Override
	public java.lang.String getInflectionPattern() {
		if (_InflectionPattern == null) {
			return "";
		} else {
			return _InflectionPattern;
		}
	}

	@Override
	public java.lang.String getIpSource() {
		if (_IpSource == null) {
			return "";
		} else {
			return _IpSource;
		}
	}

	@Override
	public java.lang.String getNumber() {
		if (_Number == null) {
			return "singular";
		} else {
			return _Number;
		}
	}

	@Override
	public java.lang.String getPattern() {
		if (_Pattern == null) {
			return "";
		} else {
			return _Pattern;
		}
	}

	@Override
	public java.lang.String getPlural() {
		if (_Plural == null) {
			return "im";
		} else {
			return _Plural;
		}
	}

	@Override
	public java.lang.Class getPrimaryInterface() {
		return (mila.generated.AdjectiveLexiconType.class);
	}

	@Override
	public java.lang.String getRoot() {
		if (_Root == null) {
			return "";
		} else {
			return _Root;
		}
	}

	@Override
	public boolean isForeign() {
		if (!has_Foreign) {
			return javax.xml.bind.DatatypeConverter
					.parseBoolean(com.sun.xml.bind.DatatypeConverterImpl
							.installHook("false"));
		} else {
			return _Foreign;
		}
	}

	@Override
	public boolean isInflectConstructP() {
		if (!has_InflectConstructP) {
			return javax.xml.bind.DatatypeConverter
					.parseBoolean(com.sun.xml.bind.DatatypeConverterImpl
							.installHook("true"));
		} else {
			return _InflectConstructP;
		}
	}

	@Override
	public boolean isInflectConstructS() {
		if (!has_InflectConstructS) {
			return javax.xml.bind.DatatypeConverter
					.parseBoolean(com.sun.xml.bind.DatatypeConverterImpl
							.installHook("true"));
		} else {
			return _InflectConstructS;
		}
	}

	@Override
	public void serializeAttributes(mila.generated.impl.runtime.XMLSerializer context)
			throws org.xml.sax.SAXException {
		int idx13 = 0;
		final int len13 = ((_AddOrReplaceOrRemove == null) ? 0
				: _AddOrReplaceOrRemove.size());
		if (_Acronym != null) {
			context.startAttribute("", "acronym");
			try {
				context.text(_Acronym, "Acronym");
			} catch (java.lang.Exception e) {
				mila.generated.impl.runtime.Util.handlePrintConversionException(
						this, e, context);
			}
			context.endAttribute();
		}
		if (_DottedPlural != null) {
			context.startAttribute("", "dottedPlural");
			try {
				context.text(_DottedPlural, "DottedPlural");
			} catch (java.lang.Exception e) {
				mila.generated.impl.runtime.Util.handlePrintConversionException(
						this, e, context);
			}
			context.endAttribute();
		}
		if (_Feminine != null) {
			context.startAttribute("", "feminine");
			try {
				context.text(_Feminine, "Feminine");
			} catch (java.lang.Exception e) {
				mila.generated.impl.runtime.Util.handlePrintConversionException(
						this, e, context);
			}
			context.endAttribute();
		}
		if (has_Foreign) {
			context.startAttribute("", "foreign");
			try {
				context.text(
						javax.xml.bind.DatatypeConverter.printBoolean(_Foreign),
						"Foreign");
			} catch (java.lang.Exception e) {
				mila.generated.impl.runtime.Util.handlePrintConversionException(
						this, e, context);
			}
			context.endAttribute();
		}
		if (_Gender != null) {
			context.startAttribute("", "gender");
			try {
				context.text(_Gender, "Gender");
			} catch (java.lang.Exception e) {
				mila.generated.impl.runtime.Util.handlePrintConversionException(
						this, e, context);
			}
			context.endAttribute();
		}
		if (has_InflectConstructP) {
			context.startAttribute("", "inflectConstructP");
			try {
				context.text(javax.xml.bind.DatatypeConverter
						.printBoolean(_InflectConstructP), "InflectConstructP");
			} catch (java.lang.Exception e) {
				mila.generated.impl.runtime.Util.handlePrintConversionException(
						this, e, context);
			}
			context.endAttribute();
		}
		if (has_InflectConstructS) {
			context.startAttribute("", "inflectConstructS");
			try {
				context.text(javax.xml.bind.DatatypeConverter
						.printBoolean(_InflectConstructS), "InflectConstructS");
			} catch (java.lang.Exception e) {
				mila.generated.impl.runtime.Util.handlePrintConversionException(
						this, e, context);
			}
			context.endAttribute();
		}
		if (_InflectionBase != null) {
			context.startAttribute("", "inflectionBase");
			try {
				context.text(_InflectionBase, "InflectionBase");
			} catch (java.lang.Exception e) {
				mila.generated.impl.runtime.Util.handlePrintConversionException(
						this, e, context);
			}
			context.endAttribute();
		}
		if (_InflectionPattern != null) {
			context.startAttribute("", "inflectionPattern");
			try {
				context.text(_InflectionPattern, "InflectionPattern");
			} catch (java.lang.Exception e) {
				mila.generated.impl.runtime.Util.handlePrintConversionException(
						this, e, context);
			}
			context.endAttribute();
		}
		if (_IpSource != null) {
			context.startAttribute("", "ipSource");
			try {
				context.text(_IpSource, "IpSource");
			} catch (java.lang.Exception e) {
				mila.generated.impl.runtime.Util.handlePrintConversionException(
						this, e, context);
			}
			context.endAttribute();
		}
		if (_Number != null) {
			context.startAttribute("", "number");
			try {
				context.text(_Number, "Number");
			} catch (java.lang.Exception e) {
				mila.generated.impl.runtime.Util.handlePrintConversionException(
						this, e, context);
			}
			context.endAttribute();
		}
		if (_Pattern != null) {
			context.startAttribute("", "pattern");
			try {
				context.text(_Pattern, "Pattern");
			} catch (java.lang.Exception e) {
				mila.generated.impl.runtime.Util.handlePrintConversionException(
						this, e, context);
			}
			context.endAttribute();
		}
		if (_Plural != null) {
			context.startAttribute("", "plural");
			try {
				context.text(_Plural, "Plural");
			} catch (java.lang.Exception e) {
				mila.generated.impl.runtime.Util.handlePrintConversionException(
						this, e, context);
			}
			context.endAttribute();
		}
		if (_Root != null) {
			context.startAttribute("", "root");
			try {
				context.text(_Root, "Root");
			} catch (java.lang.Exception e) {
				mila.generated.impl.runtime.Util.handlePrintConversionException(
						this, e, context);
			}
			context.endAttribute();
		}
		while (idx13 != len13) {
			while (idx13 != len13) {
				context.childAsAttributes(
						((com.sun.xml.bind.JAXBObject) _AddOrReplaceOrRemove
								.get(idx13++)), "AddOrReplaceOrRemove");
			}
		}
	}

	@Override
	public void serializeBody(mila.generated.impl.runtime.XMLSerializer context)
			throws org.xml.sax.SAXException {
		int idx13 = 0;
		final int len13 = ((_AddOrReplaceOrRemove == null) ? 0
				: _AddOrReplaceOrRemove.size());
		while (idx13 != len13) {
			while (idx13 != len13) {
				context.childAsBody(
						((com.sun.xml.bind.JAXBObject) _AddOrReplaceOrRemove
								.get(idx13++)), "AddOrReplaceOrRemove");
			}
		}
	}

	@Override
	public void serializeURIs(mila.generated.impl.runtime.XMLSerializer context)
			throws org.xml.sax.SAXException {
		int idx13 = 0;
		final int len13 = ((_AddOrReplaceOrRemove == null) ? 0
				: _AddOrReplaceOrRemove.size());
		while (idx13 != len13) {
			while (idx13 != len13) {
				context.childAsURIs(
						((com.sun.xml.bind.JAXBObject) _AddOrReplaceOrRemove
								.get(idx13++)), "AddOrReplaceOrRemove");
			}
		}
	}

	@Override
	public void setAcronym(java.lang.String value) {
		_Acronym = value;
	}

	@Override
	public void setDottedPlural(java.lang.String value) {
		_DottedPlural = value;
	}

	@Override
	public void setFeminine(java.lang.String value) {
		_Feminine = value;
	}

	@Override
	public void setForeign(boolean value) {
		_Foreign = value;
		has_Foreign = true;
	}

	@Override
	public void setGender(java.lang.String value) {
		_Gender = value;
	}

	@Override
	public void setInflectConstructP(boolean value) {
		_InflectConstructP = value;
		has_InflectConstructP = true;
	}

	@Override
	public void setInflectConstructS(boolean value) {
		_InflectConstructS = value;
		has_InflectConstructS = true;
	}

	@Override
	public void setInflectionBase(java.lang.String value) {
		_InflectionBase = value;
	}

	@Override
	public void setInflectionPattern(java.lang.String value) {
		_InflectionPattern = value;
	}

	@Override
	public void setIpSource(java.lang.String value) {
		_IpSource = value;
	}

	@Override
	public void setNumber(java.lang.String value) {
		_Number = value;
	}

	@Override
	public void setPattern(java.lang.String value) {
		_Pattern = value;
	}

	@Override
	public void setPlural(java.lang.String value) {
		_Plural = value;
	}

	@Override
	public void setRoot(java.lang.String value) {
		_Root = value;
	}

}
