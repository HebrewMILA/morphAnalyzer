//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v1.0.5-b16-fcs 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2009.06.14 at 03:41:34 PM IDT 
//

package mila.generated.impl;

public class PrefixTypeImpl implements mila.generated.PrefixType,
		com.sun.xml.bind.JAXBObject,
		mila.generated.impl.runtime.UnmarshallableObject,
		mila.generated.impl.runtime.XMLSerializable,
		mila.generated.impl.runtime.ValidatableObject {

	public class Unmarshaller extends
			mila.generated.impl.runtime.AbstractUnmarshallingEventHandlerImpl {

		public Unmarshaller(mila.generated.impl.runtime.UnmarshallingContext context) {
			super(context, "----------------");
		}

		protected Unmarshaller(
				mila.generated.impl.runtime.UnmarshallingContext context,
				int startState) {
			this(context);
			state = startState;
		}

		private void eatText1(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_Id = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		private void eatText2(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_Transliterated = com.sun.xml.bind.WhiteSpaceProcessor
						.collapse(value);
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		private void eatText3(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_MultiWord = javax.xml.bind.DatatypeConverter
						.parseBoolean(com.sun.xml.bind.WhiteSpaceProcessor
								.collapse(value));
				has_MultiWord = true;
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		private void eatText4(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_Function = com.sun.xml.bind.WhiteSpaceProcessor
						.collapse(value);
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		private void eatText5(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_Surface = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		@Override
		public void enterAttribute(java.lang.String ___uri,
				java.lang.String ___local, java.lang.String ___qname)
				throws org.xml.sax.SAXException {
			int attIdx;
			outer: while (true) {
				switch (state) {
				case 3:
					if (("id" == ___local) && ("" == ___uri)) {
						state = 4;
						return;
					}
					break;
				case 15:
					revertToParentFromEnterAttribute(___uri, ___local, ___qname);
					return;
				case 12:
					if (("transliterated" == ___local) && ("" == ___uri)) {
						state = 13;
						return;
					}
					state = 15;
					continue outer;
				case 6:
					if (("multiWord" == ___local) && ("" == ___uri)) {
						state = 7;
						return;
					}
					state = 9;
					continue outer;
				case 0:
					if (("function" == ___local) && ("" == ___uri)) {
						state = 1;
						return;
					}
					state = 3;
					continue outer;
				case 9:
					if (("surface" == ___local) && ("" == ___uri)) {
						state = 10;
						return;
					}
					state = 12;
					continue outer;
				}
				super.enterAttribute(___uri, ___local, ___qname);
				break;
			}
		}

		@Override
		public void enterElement(java.lang.String ___uri,
				java.lang.String ___local, java.lang.String ___qname,
				org.xml.sax.Attributes __atts) throws org.xml.sax.SAXException {
			int attIdx;
			outer: while (true) {
				switch (state) {
				case 3:
					attIdx = context.getAttribute("", "id");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 6;
						eatText1(v);
						continue outer;
					}
					break;
				case 15:
					revertToParentFromEnterElement(___uri, ___local, ___qname,
							__atts);
					return;
				case 12:
					attIdx = context.getAttribute("", "transliterated");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 15;
						eatText2(v);
						continue outer;
					}
					state = 15;
					continue outer;
				case 6:
					attIdx = context.getAttribute("", "multiWord");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 9;
						eatText3(v);
						continue outer;
					}
					state = 9;
					continue outer;
				case 0:
					attIdx = context.getAttribute("", "function");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 3;
						eatText4(v);
						continue outer;
					}
					state = 3;
					continue outer;
				case 9:
					attIdx = context.getAttribute("", "surface");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 12;
						eatText5(v);
						continue outer;
					}
					state = 12;
					continue outer;
				}
				super.enterElement(___uri, ___local, ___qname, __atts);
				break;
			}
		}

		@Override
		public void handleText(final java.lang.String value)
				throws org.xml.sax.SAXException {
			int attIdx;
			outer: while (true) {
				try {
					switch (state) {
					case 13:
						state = 14;
						eatText2(value);
						return;
					case 3:
						attIdx = context.getAttribute("", "id");
						if (attIdx >= 0) {
							final java.lang.String v = context
									.eatAttribute(attIdx);
							state = 6;
							eatText1(v);
							continue outer;
						}
						break;
					case 7:
						state = 8;
						eatText3(value);
						return;
					case 15:
						revertToParentFromText(value);
						return;
					case 1:
						state = 2;
						eatText4(value);
						return;
					case 12:
						attIdx = context.getAttribute("", "transliterated");
						if (attIdx >= 0) {
							final java.lang.String v = context
									.eatAttribute(attIdx);
							state = 15;
							eatText2(v);
							continue outer;
						}
						state = 15;
						continue outer;
					case 4:
						state = 5;
						eatText1(value);
						return;
					case 6:
						attIdx = context.getAttribute("", "multiWord");
						if (attIdx >= 0) {
							final java.lang.String v = context
									.eatAttribute(attIdx);
							state = 9;
							eatText3(v);
							continue outer;
						}
						state = 9;
						continue outer;
					case 10:
						state = 11;
						eatText5(value);
						return;
					case 0:
						attIdx = context.getAttribute("", "function");
						if (attIdx >= 0) {
							final java.lang.String v = context
									.eatAttribute(attIdx);
							state = 3;
							eatText4(v);
							continue outer;
						}
						state = 3;
						continue outer;
					case 9:
						attIdx = context.getAttribute("", "surface");
						if (attIdx >= 0) {
							final java.lang.String v = context
									.eatAttribute(attIdx);
							state = 12;
							eatText5(v);
							continue outer;
						}
						state = 12;
						continue outer;
					}
				} catch (java.lang.RuntimeException e) {
					handleUnexpectedTextException(value, e);
				}
				break;
			}
		}

		@Override
		public void leaveAttribute(java.lang.String ___uri,
				java.lang.String ___local, java.lang.String ___qname)
				throws org.xml.sax.SAXException {
			int attIdx;
			outer: while (true) {
				switch (state) {
				case 2:
					if (("function" == ___local) && ("" == ___uri)) {
						state = 3;
						return;
					}
					break;
				case 3:
					attIdx = context.getAttribute("", "id");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 6;
						eatText1(v);
						continue outer;
					}
					break;
				case 14:
					if (("transliterated" == ___local) && ("" == ___uri)) {
						state = 15;
						return;
					}
					break;
				case 5:
					if (("id" == ___local) && ("" == ___uri)) {
						state = 6;
						return;
					}
					break;
				case 15:
					revertToParentFromLeaveAttribute(___uri, ___local, ___qname);
					return;
				case 12:
					attIdx = context.getAttribute("", "transliterated");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 15;
						eatText2(v);
						continue outer;
					}
					state = 15;
					continue outer;
				case 6:
					attIdx = context.getAttribute("", "multiWord");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 9;
						eatText3(v);
						continue outer;
					}
					state = 9;
					continue outer;
				case 11:
					if (("surface" == ___local) && ("" == ___uri)) {
						state = 12;
						return;
					}
					break;
				case 8:
					if (("multiWord" == ___local) && ("" == ___uri)) {
						state = 9;
						return;
					}
					break;
				case 0:
					attIdx = context.getAttribute("", "function");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 3;
						eatText4(v);
						continue outer;
					}
					state = 3;
					continue outer;
				case 9:
					attIdx = context.getAttribute("", "surface");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 12;
						eatText5(v);
						continue outer;
					}
					state = 12;
					continue outer;
				}
				super.leaveAttribute(___uri, ___local, ___qname);
				break;
			}
		}

		@Override
		public void leaveElement(java.lang.String ___uri,
				java.lang.String ___local, java.lang.String ___qname)
				throws org.xml.sax.SAXException {
			int attIdx;
			outer: while (true) {
				switch (state) {
				case 3:
					attIdx = context.getAttribute("", "id");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 6;
						eatText1(v);
						continue outer;
					}
					break;
				case 15:
					revertToParentFromLeaveElement(___uri, ___local, ___qname);
					return;
				case 12:
					attIdx = context.getAttribute("", "transliterated");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 15;
						eatText2(v);
						continue outer;
					}
					state = 15;
					continue outer;
				case 6:
					attIdx = context.getAttribute("", "multiWord");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 9;
						eatText3(v);
						continue outer;
					}
					state = 9;
					continue outer;
				case 0:
					attIdx = context.getAttribute("", "function");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 3;
						eatText4(v);
						continue outer;
					}
					state = 3;
					continue outer;
				case 9:
					attIdx = context.getAttribute("", "surface");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 12;
						eatText5(v);
						continue outer;
					}
					state = 12;
					continue outer;
				}
				super.leaveElement(___uri, ___local, ___qname);
				break;
			}
		}

		@Override
		public java.lang.Object owner() {
			return mila.generated.impl.PrefixTypeImpl.this;
		}

	}

	protected java.lang.String _Surface;
	protected java.lang.String _Function;
	protected java.lang.String _Transliterated;
	protected boolean has_MultiWord;
	protected boolean _MultiWord;
	protected java.lang.String _Id;
	public final static java.lang.Class version = (mila.generated.impl.JAXBVersion.class);

	private static com.sun.msv.grammar.Grammar schemaFragment;

	private final static java.lang.Class PRIMARY_INTERFACE_CLASS() {
		return (mila.generated.PrefixType.class);
	}

	@Override
	public com.sun.msv.verifier.DocumentDeclaration createRawValidator() {
		if (schemaFragment == null) {
			schemaFragment = com.sun.xml.bind.validator.SchemaDeserializer
					.deserialize(("\u00ac\u00ed\u0000\u0005sr\u0000\u001fcom.sun.msv.grammar.SequenceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.su"
							+ "n.msv.grammar.BinaryExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0004exp1t\u0000 Lcom/sun/msv/gra"
							+ "mmar/Expression;L\u0000\u0004exp2q\u0000~\u0000\u0002xr\u0000\u001ecom.sun.msv.grammar.Expressi"
							+ "on\u00f8\u0018\u0082\u00e8N5~O\u0002\u0000\u0002L\u0000\u0013epsilonReducibilityt\u0000\u0013Ljava/lang/Boolean;L\u0000\u000b"
							+ "expandedExpq\u0000~\u0000\u0002xpppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsr\u0000\u001dcom.sun.msv."
							+ "grammar.ChoiceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0001ppsr\u0000 com.sun.msv.grammar."
							+ "AttributeExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0003expq\u0000~\u0000\u0002L\u0000\tnameClasst\u0000\u001fLcom/sun/ms"
							+ "v/grammar/NameClass;xq\u0000~\u0000\u0003sr\u0000\u0011java.lang.Boolean\u00cd r\u0080\u00d5\u009c\u00fa\u00ee\u0002\u0000\u0001Z\u0000"
							+ "\u0005valuexp\u0000psr\u0000\u001bcom.sun.msv.grammar.DataExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\u0002dtt\u0000\u001f"
							+ "Lorg/relaxng/datatype/Datatype;L\u0000\u0006exceptq\u0000~\u0000\u0002L\u0000\u0004namet\u0000\u001dLcom/"
							+ "sun/msv/util/StringPair;xq\u0000~\u0000\u0003ppsr\u0000)com.sun.msv.datatype.xsd"
							+ ".EnumerationFacet\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\u0006valuest\u0000\u000fLjava/util/Set;xr\u00009c"
							+ "om.sun.msv.datatype.xsd.DataTypeWithValueConstraintFacet\"\u00a7Ro"
							+ "\u00ca\u00c7\u008aT\u0002\u0000\u0000xr\u0000*com.sun.msv.datatype.xsd.DataTypeWithFacet\u0000\u0000\u0000\u0000\u0000\u0000\u0000"
							+ "\u0001\u0002\u0000\u0005Z\u0000\fisFacetFixedZ\u0000\u0012needValueCheckFlagL\u0000\bbaseTypet\u0000)Lcom/s"
							+ "un/msv/datatype/xsd/XSDatatypeImpl;L\u0000\fconcreteTypet\u0000\'Lcom/su"
							+ "n/msv/datatype/xsd/ConcreteType;L\u0000\tfacetNamet\u0000\u0012Ljava/lang/St"
							+ "ring;xr\u0000\'com.sun.msv.datatype.xsd.XSDatatypeImpl\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L"
							+ "\u0000\fnamespaceUriq\u0000~\u0000\u001aL\u0000\btypeNameq\u0000~\u0000\u001aL\u0000\nwhiteSpacet\u0000.Lcom/sun/"
							+ "msv/datatype/xsd/WhiteSpaceProcessor;xpt\u0000\u0000t\u0000\u0012PrefixFunctionT"
							+ "ypesr\u00005com.sun.msv.datatype.xsd.WhiteSpaceProcessor$Collapse"
							+ "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000,com.sun.msv.datatype.xsd.WhiteSpaceProcessor\u0000"
							+ "\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xp\u0000\u0000sr\u0000\"com.sun.msv.datatype.xsd.TokenType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001"
							+ "\u0002\u0000\u0000xr\u0000#com.sun.msv.datatype.xsd.StringType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001Z\u0000\risAl"
							+ "waysValidxr\u0000*com.sun.msv.datatype.xsd.BuiltinAtomicType\u0000\u0000\u0000\u0000\u0000"
							+ "\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000%com.sun.msv.datatype.xsd.ConcreteType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq"
							+ "\u0000~\u0000\u001bt\u0000 http://www.w3.org/2001/XMLSchemat\u0000\u0005tokenq\u0000~\u0000\"\u0001q\u0000~\u0000\'t\u0000"
							+ "\u000benumerationsr\u0000\u0011java.util.HashSet\u00baD\u0085\u0095\u0096\u00b8\u00b74\u0003\u0000\u0000xpw\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\u000b"
							+ "t\u0000\u000bunspecifiedt\u0000\u000fdefiniteArticlet\u0000\u000bconjunctiont\u0000\u0018subordinati"
							+ "ngConjunctiont\u0000\u000bprepositiont\u0000\u0006adverbt\u0000$relativizer/subordina"
							+ "tingConjunctiont\u0000\u000ftemporalSubConjt\u0000\u000etenseInversiont\u0000\u000brelativ"
							+ "izert\u0000\rinterrogativexsr\u00000com.sun.msv.grammar.Expression$Null"
							+ "SetExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003ppsr\u0000\u001bcom.sun.msv.util.StringP"
							+ "air\u00d0t\u001ejB\u008f\u008d\u00a0\u0002\u0000\u0002L\u0000\tlocalNameq\u0000~\u0000\u001aL\u0000\fnamespaceURIq\u0000~\u0000\u001axpq\u0000~\u0000\u001fq\u0000"
							+ "~\u0000\u001esr\u0000#com.sun.msv.grammar.SimpleNameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\tloca"
							+ "lNameq\u0000~\u0000\u001aL\u0000\fnamespaceURIq\u0000~\u0000\u001axr\u0000\u001dcom.sun.msv.grammar.NameCl"
							+ "ass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xpt\u0000\bfunctionq\u0000~\u0000\u001esr\u00000com.sun.msv.grammar.Expr"
							+ "ession$EpsilonExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003sq\u0000~\u0000\u000e\u0001q\u0000~\u0000Asq\u0000~\u0000\u000bp"
							+ "psq\u0000~\u0000\u0010ppq\u0000~\u0000\'q\u0000~\u00009sq\u0000~\u0000:q\u0000~\u0000)q\u0000~\u0000(sq\u0000~\u0000<t\u0000\u0002idq\u0000~\u0000\u001esq\u0000~\u0000\tpps"
							+ "q\u0000~\u0000\u000bq\u0000~\u0000\u000fpsq\u0000~\u0000\u0010ppsr\u0000$com.sun.msv.datatype.xsd.BooleanType\u0000"
							+ "\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000%q\u0000~\u0000(t\u0000\u0007booleanq\u0000~\u0000\"q\u0000~\u00009sq\u0000~\u0000:q\u0000~\u0000Mq\u0000~\u0000(sq\u0000"
							+ "~\u0000<t\u0000\tmultiWordq\u0000~\u0000\u001eq\u0000~\u0000Asq\u0000~\u0000\tppsq\u0000~\u0000\u000bq\u0000~\u0000\u000fpsq\u0000~\u0000\u0010ppsq\u0000~\u0000\u0014q"
							+ "\u0000~\u0000\u001et\u0000\u0011PrefixSurfaceTypeq\u0000~\u0000\"\u0000\u0000q\u0000~\u0000\'q\u0000~\u0000\'q\u0000~\u0000*sq\u0000~\u0000+w\f\u0000\u0000\u0000 ?@"
							+ "\u0000\u0000\u0000\u0000\u0000\u000et\u0000\u0006\u00d7\u009c\u00d7\u009b\u00d7\u00a9t\u0000\u0002\u00d7\u009ct\u0000\u0002\u00d7\u00a9t\u0000\u0004\u00d7\u009e\u00d7\u00a9t\u0000\u0002\u00d7\u009bt\u0000\u0004\u00d7\u009b\u00d7\u00a9t\u0000\u0002\u00d7\u0094t\u0000\u000bunspecif"
							+ "iedt\u0000\u0004\u00d7\u009e\u00d7\u009ct\u0000\u0004\u00d7\u009e\u00d7\u0091t\u0000\u0002\u00d7\u0095t\u0000\u0004\u00d7\u0091\u00d7\u00a9t\u0000\u0002\u00d7\u009et\u0000\u0002\u00d7\u0091xq\u0000~\u00009sq\u0000~\u0000:q\u0000~\u0000Uq\u0000~\u0000"
							+ "\u001esq\u0000~\u0000<t\u0000\u0007surfaceq\u0000~\u0000\u001eq\u0000~\u0000Asq\u0000~\u0000\tppsq\u0000~\u0000\u000bq\u0000~\u0000\u000fpsq\u0000~\u0000\u0010ppsq\u0000~\u0000"
							+ "\u0014q\u0000~\u0000\u001et\u0000\u0018PrefixTransliteratedTypeq\u0000~\u0000\"\u0000\u0000q\u0000~\u0000\'q\u0000~\u0000\'q\u0000~\u0000*sq\u0000~\u0000"
							+ "+w\f\u0000\u0000\u0000 ?@\u0000\u0000\u0000\u0000\u0000\u000et\u0000\u0001kt\u0000\u0001wt\u0000\u0002bet\u0000\u0001ht\u0000\u0002met\u0000\u0001lt\u0000\u0001bt\u0000\u0002mlt\u0000\u000bunspeci"
							+ "fiedt\u0000\u0003lket\u0000\u0001mt\u0000\u0002ket\u0000\u0002mbt\u0000\u0001exq\u0000~\u00009sq\u0000~\u0000:q\u0000~\u0000lq\u0000~\u0000\u001esq\u0000~\u0000<t\u0000\u000et"
							+ "ransliteratedq\u0000~\u0000\u001eq\u0000~\u0000Asr\u0000\"com.sun.msv.grammar.ExpressionPoo"
							+ "l\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\bexpTablet\u0000/Lcom/sun/msv/grammar/ExpressionPoo"
							+ "l$ClosedHash;xpsr\u0000-com.sun.msv.grammar.ExpressionPool$Closed"
							+ "Hash\u00d7j\u00d0N\u00ef\u00e8\u00ed\u001c\u0003\u0000\u0003I\u0000\u0005countB\u0000\rstreamVersionL\u0000\u0006parentt\u0000$Lcom/sun/"
							+ "msv/grammar/ExpressionPool;xp\u0000\u0000\u0000\b\u0001pq\u0000~\u0000\u0007q\u0000~\u0000\bq\u0000~\u0000Hq\u0000~\u0000hq\u0000~\u0000\n"
							+ "q\u0000~\u0000Qq\u0000~\u0000\u0006q\u0000~\u0000\u0005x"));
		}
		return new com.sun.msv.verifier.regexp.REDocumentDeclaration(
				schemaFragment);
	}

	@Override
	public mila.generated.impl.runtime.UnmarshallingEventHandler createUnmarshaller(
			mila.generated.impl.runtime.UnmarshallingContext context) {
		return new mila.generated.impl.PrefixTypeImpl.Unmarshaller(context);
	}

	@Override
	public java.lang.String getFunction() {
		return _Function;
	}

	@Override
	public java.lang.String getId() {
		return _Id;
	}

	@Override
	public java.lang.Class getPrimaryInterface() {
		return (mila.generated.PrefixType.class);
	}

	@Override
	public java.lang.String getSurface() {
		return _Surface;
	}

	@Override
	public java.lang.String getTransliterated() {
		return _Transliterated;
	}

	@Override
	public boolean isMultiWord() {
		if (!has_MultiWord) {
			return javax.xml.bind.DatatypeConverter
					.parseBoolean(com.sun.xml.bind.DatatypeConverterImpl
							.installHook("false"));
		} else {
			return _MultiWord;
		}
	}

	@Override
	public void serializeAttributes(mila.generated.impl.runtime.XMLSerializer context)
			throws org.xml.sax.SAXException {
		if (_Function != null) {
			context.startAttribute("", "function");
			try {
				context.text(_Function, "Function");
			} catch (java.lang.Exception e) {
				mila.generated.impl.runtime.Util.handlePrintConversionException(
						this, e, context);
			}
			context.endAttribute();
		}
		context.startAttribute("", "id");
		try {
			context.text(_Id, "Id");
		} catch (java.lang.Exception e) {
			mila.generated.impl.runtime.Util.handlePrintConversionException(this, e,
					context);
		}
		context.endAttribute();
		if (has_MultiWord) {
			context.startAttribute("", "multiWord");
			try {
				context.text(javax.xml.bind.DatatypeConverter
						.printBoolean(_MultiWord), "MultiWord");
			} catch (java.lang.Exception e) {
				mila.generated.impl.runtime.Util.handlePrintConversionException(
						this, e, context);
			}
			context.endAttribute();
		}
		if (_Surface != null) {
			context.startAttribute("", "surface");
			try {
				context.text(_Surface, "Surface");
			} catch (java.lang.Exception e) {
				mila.generated.impl.runtime.Util.handlePrintConversionException(
						this, e, context);
			}
			context.endAttribute();
		}
		if (_Transliterated != null) {
			context.startAttribute("", "transliterated");
			try {
				context.text(_Transliterated, "Transliterated");
			} catch (java.lang.Exception e) {
				mila.generated.impl.runtime.Util.handlePrintConversionException(
						this, e, context);
			}
			context.endAttribute();
		}
	}

	@Override
	public void serializeBody(mila.generated.impl.runtime.XMLSerializer context)
			throws org.xml.sax.SAXException {
	}

	@Override
	public void serializeURIs(mila.generated.impl.runtime.XMLSerializer context)
			throws org.xml.sax.SAXException {
	}

	@Override
	public void setFunction(java.lang.String value) {
		_Function = value;
	}

	@Override
	public void setId(java.lang.String value) {
		_Id = value;
	}

	@Override
	public void setMultiWord(boolean value) {
		_MultiWord = value;
		has_MultiWord = true;
	}

	@Override
	public void setSurface(java.lang.String value) {
		_Surface = value;
	}

	@Override
	public void setTransliterated(java.lang.String value) {
		_Transliterated = value;
	}

}
