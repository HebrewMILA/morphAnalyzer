//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v1.0.5-b16-fcs 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2008.12.01 at 02:23:12 PM IST 
//

package mila.generated.impl;

public class VerbLexiconTypeImpl implements mila.generated.VerbLexiconType,
		com.sun.xml.bind.JAXBObject,
		mila.generated.impl.runtime.UnmarshallableObject,
		mila.generated.impl.runtime.XMLSerializable,
		mila.generated.impl.runtime.ValidatableObject {

	public static class AddImpl extends mila.generated.impl.VerbExceptionTypeImpl
			implements mila.generated.VerbLexiconType.Add,
			com.sun.xml.bind.RIElement, com.sun.xml.bind.JAXBObject,
			mila.generated.impl.runtime.UnmarshallableObject,
			mila.generated.impl.runtime.XMLSerializable,
			mila.generated.impl.runtime.ValidatableObject {

		public class Unmarshaller extends
				mila.generated.impl.runtime.AbstractUnmarshallingEventHandlerImpl {

			public Unmarshaller(
					mila.generated.impl.runtime.UnmarshallingContext context) {
				super(context, "----");
			}

			protected Unmarshaller(
					mila.generated.impl.runtime.UnmarshallingContext context,
					int startState) {
				this(context);
				state = startState;
			}

			@Override
			public void enterAttribute(java.lang.String ___uri,
					java.lang.String ___local, java.lang.String ___qname)
					throws org.xml.sax.SAXException {
				int attIdx;
				outer: while (true) {
					switch (state) {
					case 3:
						revertToParentFromEnterAttribute(___uri, ___local,
								___qname);
						return;
					case 1:
						if (("beinoniConstruct" == ___local) && ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((mila.generated.impl.VerbExceptionTypeImpl) mila.generated.impl.VerbLexiconTypeImpl.AddImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						if (("beinoniDefiniteness" == ___local)
								&& ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((mila.generated.impl.VerbExceptionTypeImpl) mila.generated.impl.VerbLexiconTypeImpl.AddImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						if (("dotted" == ___local) && ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((mila.generated.impl.VerbExceptionTypeImpl) mila.generated.impl.VerbLexiconTypeImpl.AddImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						if (("gender" == ___local) && ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((mila.generated.impl.VerbExceptionTypeImpl) mila.generated.impl.VerbLexiconTypeImpl.AddImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						if (("inflectBeinoniPossessive" == ___local)
								&& ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((mila.generated.impl.VerbExceptionTypeImpl) mila.generated.impl.VerbLexiconTypeImpl.AddImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						if (("number" == ___local) && ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((mila.generated.impl.VerbExceptionTypeImpl) mila.generated.impl.VerbLexiconTypeImpl.AddImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						if (("person" == ___local) && ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((mila.generated.impl.VerbExceptionTypeImpl) mila.generated.impl.VerbLexiconTypeImpl.AddImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						if (("pgn" == ___local) && ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((mila.generated.impl.VerbExceptionTypeImpl) mila.generated.impl.VerbLexiconTypeImpl.AddImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						break;
					}
					super.enterAttribute(___uri, ___local, ___qname);
					break;
				}
			}

			@Override
			public void enterElement(java.lang.String ___uri,
					java.lang.String ___local, java.lang.String ___qname,
					org.xml.sax.Attributes __atts)
					throws org.xml.sax.SAXException {
				int attIdx;
				outer: while (true) {
					switch (state) {
					case 3:
						revertToParentFromEnterElement(___uri, ___local,
								___qname, __atts);
						return;
					case 0:
						if (("add" == ___local) && ("" == ___uri)) {
							context.pushAttributes(__atts, true);
							state = 1;
							return;
						}
						break;
					case 1:
						attIdx = context.getAttribute("", "beinoniConstruct");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						attIdx = context
								.getAttribute("", "beinoniDefiniteness");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						attIdx = context.getAttribute("", "dotted");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						attIdx = context.getAttribute("", "gender");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						attIdx = context.getAttribute("",
								"inflectBeinoniPossessive");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						attIdx = context.getAttribute("", "number");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						attIdx = context.getAttribute("", "person");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						attIdx = context.getAttribute("", "pgn");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						break;
					}
					super.enterElement(___uri, ___local, ___qname, __atts);
					break;
				}
			}

			@Override
			public void handleText(final java.lang.String value)
					throws org.xml.sax.SAXException {
				int attIdx;
				outer: while (true) {
					try {
						switch (state) {
						case 3:
							revertToParentFromText(value);
							return;
						case 1:
							attIdx = context.getAttribute("",
									"beinoniConstruct");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							attIdx = context.getAttribute("",
									"beinoniDefiniteness");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							attIdx = context.getAttribute("", "dotted");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							attIdx = context.getAttribute("", "gender");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							attIdx = context.getAttribute("",
									"inflectBeinoniPossessive");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							attIdx = context.getAttribute("", "number");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							attIdx = context.getAttribute("", "person");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							attIdx = context.getAttribute("", "pgn");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							break;
						}
					} catch (java.lang.RuntimeException e) {
						handleUnexpectedTextException(value, e);
					}
					break;
				}
			}

			@Override
			public void leaveAttribute(java.lang.String ___uri,
					java.lang.String ___local, java.lang.String ___qname)
					throws org.xml.sax.SAXException {
				int attIdx;
				outer: while (true) {
					switch (state) {
					case 3:
						revertToParentFromLeaveAttribute(___uri, ___local,
								___qname);
						return;
					case 1:
						attIdx = context.getAttribute("", "beinoniConstruct");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context
								.getAttribute("", "beinoniDefiniteness");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "dotted");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "gender");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("",
								"inflectBeinoniPossessive");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "number");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "person");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "pgn");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						break;
					}
					super.leaveAttribute(___uri, ___local, ___qname);
					break;
				}
			}

			@Override
			public void leaveElement(java.lang.String ___uri,
					java.lang.String ___local, java.lang.String ___qname)
					throws org.xml.sax.SAXException {
				int attIdx;
				outer: while (true) {
					switch (state) {
					case 2:
						if (("add" == ___local) && ("" == ___uri)) {
							context.popAttributes();
							state = 3;
							return;
						}
						break;
					case 3:
						revertToParentFromLeaveElement(___uri, ___local,
								___qname);
						return;
					case 1:
						attIdx = context.getAttribute("", "beinoniConstruct");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context
								.getAttribute("", "beinoniDefiniteness");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "dotted");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "gender");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("",
								"inflectBeinoniPossessive");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "number");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "person");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "pgn");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						break;
					}
					super.leaveElement(___uri, ___local, ___qname);
					break;
				}
			}

			@Override
			public java.lang.Object owner() {
				return mila.generated.impl.VerbLexiconTypeImpl.AddImpl.this;
			}

		}

		public final static java.lang.Class version = (mila.generated.impl.JAXBVersion.class);

		private static com.sun.msv.grammar.Grammar schemaFragment;

		private final static java.lang.Class PRIMARY_INTERFACE_CLASS() {
			return (mila.generated.VerbLexiconType.Add.class);
		}

		@Override
		public java.lang.String ____jaxb_ri____getLocalName() {
			return "add";
		}

		@Override
		public java.lang.String ____jaxb_ri____getNamespaceURI() {
			return "";
		}

		@Override
		public com.sun.msv.verifier.DocumentDeclaration createRawValidator() {
			if (schemaFragment == null) {
				schemaFragment = com.sun.xml.bind.validator.SchemaDeserializer
						.deserialize(("\u00ac\u00ed\u0000\u0005sr\u0000\'com.sun.msv.grammar.trex.ElementPattern\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000"
								+ "\tnameClasst\u0000\u001fLcom/sun/msv/grammar/NameClass;xr\u0000\u001ecom.sun.msv."
								+ "grammar.ElementExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002Z\u0000\u001aignoreUndeclaredAttributesL\u0000"
								+ "\fcontentModelt\u0000 Lcom/sun/msv/grammar/Expression;xr\u0000\u001ecom.sun."
								+ "msv.grammar.Expression\u00f8\u0018\u0082\u00e8N5~O\u0002\u0000\u0002L\u0000\u0013epsilonReducibilityt\u0000\u0013Lj"
								+ "ava/lang/Boolean;L\u0000\u000bexpandedExpq\u0000~\u0000\u0003xppp\u0000sr\u0000\u001fcom.sun.msv.gra"
								+ "mmar.SequenceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.sun.msv.grammar.BinaryExp"
								+ "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0004exp1q\u0000~\u0000\u0003L\u0000\u0004exp2q\u0000~\u0000\u0003xq\u0000~\u0000\u0004ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007pps"
								+ "q\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000"
								+ "\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsr\u0000\u001bcom.sun.msv.grammar.DataExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000"
								+ "\u0003L\u0000\u0002dtt\u0000\u001fLorg/relaxng/datatype/Datatype;L\u0000\u0006exceptq\u0000~\u0000\u0003L\u0000\u0004nam"
								+ "et\u0000\u001dLcom/sun/msv/util/StringPair;xq\u0000~\u0000\u0004ppsr\u0000\"com.sun.msv.dat"
								+ "atype.xsd.TokenType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000#com.sun.msv.datatype.xsd.S"
								+ "tringType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001Z\u0000\risAlwaysValidxr\u0000*com.sun.msv.datatype"
								+ ".xsd.BuiltinAtomicType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000%com.sun.msv.datatype.xs"
								+ "d.ConcreteType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\'com.sun.msv.datatype.xsd.XSData"
								+ "typeImpl\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\fnamespaceUrit\u0000\u0012Ljava/lang/String;L\u0000\bty"
								+ "peNameq\u0000~\u0000\u001fL\u0000\nwhiteSpacet\u0000.Lcom/sun/msv/datatype/xsd/WhiteSp"
								+ "aceProcessor;xpt\u0000 http://www.w3.org/2001/XMLSchemat\u0000\u0005tokensr"
								+ "\u00005com.sun.msv.datatype.xsd.WhiteSpaceProcessor$Collapse\u0000\u0000\u0000\u0000\u0000"
								+ "\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000,com.sun.msv.datatype.xsd.WhiteSpaceProcessor\u0000\u0000\u0000\u0000\u0000\u0000"
								+ "\u0000\u0001\u0002\u0000\u0000xp\u0001sr\u00000com.sun.msv.grammar.Expression$NullSetExpression"
								+ "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0004ppsr\u0000\u001bcom.sun.msv.util.StringPair\u00d0t\u001ejB\u008f\u008d\u00a0\u0002\u0000"
								+ "\u0002L\u0000\tlocalNameq\u0000~\u0000\u001fL\u0000\fnamespaceURIq\u0000~\u0000\u001fxpq\u0000~\u0000#q\u0000~\u0000\"sr\u0000\u001dcom.su"
								+ "n.msv.grammar.ChoiceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\bppsr\u0000 com.sun.msv.gr"
								+ "ammar.AttributeExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0003expq\u0000~\u0000\u0003L\u0000\tnameClassq\u0000~\u0000\u0001xq\u0000"
								+ "~\u0000\u0004sr\u0000\u0011java.lang.Boolean\u00cd r\u0080\u00d5\u009c\u00fa\u00ee\u0002\u0000\u0001Z\u0000\u0005valuexp\u0000psq\u0000~\u0000\u0016ppsr\u0000$c"
								+ "om.sun.msv.datatype.xsd.BooleanType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u001cq\u0000~\u0000\"t\u0000\u0007"
								+ "booleanq\u0000~\u0000&q\u0000~\u0000(sq\u0000~\u0000)q\u0000~\u00004q\u0000~\u0000\"sr\u0000#com.sun.msv.grammar.Sim"
								+ "pleNameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\tlocalNameq\u0000~\u0000\u001fL\u0000\fnamespaceURIq\u0000~\u0000\u001f"
								+ "xr\u0000\u001dcom.sun.msv.grammar.NameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xpt\u0000\u0010beinoniCons"
								+ "tructt\u0000\u0000sr\u00000com.sun.msv.grammar.Expression$EpsilonExpression"
								+ "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0004sq\u0000~\u0000/\u0001q\u0000~\u0000<sq\u0000~\u0000+ppsq\u0000~\u0000-q\u0000~\u00000pq\u0000~\u00001sq\u0000~\u00006"
								+ "t\u0000\u0013beinoniDefinitenessq\u0000~\u0000:q\u0000~\u0000<sq\u0000~\u0000+ppsq\u0000~\u0000-q\u0000~\u00000pq\u0000~\u0000\u0019sq\u0000"
								+ "~\u00006t\u0000\u0006dottedq\u0000~\u0000:q\u0000~\u0000<sq\u0000~\u0000+ppsq\u0000~\u0000-q\u0000~\u00000psq\u0000~\u0000\u0016ppsr\u0000)com.su"
								+ "n.msv.datatype.xsd.EnumerationFacet\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\u0006valuest\u0000\u000fLj"
								+ "ava/util/Set;xr\u00009com.sun.msv.datatype.xsd.DataTypeWithValueC"
								+ "onstraintFacet\"\u00a7Ro\u00ca\u00c7\u008aT\u0002\u0000\u0000xr\u0000*com.sun.msv.datatype.xsd.DataTy"
								+ "peWithFacet\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0005Z\u0000\fisFacetFixedZ\u0000\u0012needValueCheckFlagL\u0000"
								+ "\bbaseTypet\u0000)Lcom/sun/msv/datatype/xsd/XSDatatypeImpl;L\u0000\fconc"
								+ "reteTypet\u0000\'Lcom/sun/msv/datatype/xsd/ConcreteType;L\u0000\tfacetNa"
								+ "meq\u0000~\u0000\u001fxq\u0000~\u0000\u001eq\u0000~\u0000:t\u0000\nGenderTypeq\u0000~\u0000&\u0000\u0000q\u0000~\u0000!q\u0000~\u0000!t\u0000\u000benumerati"
								+ "onsr\u0000\u0011java.util.HashSet\u00baD\u0085\u0095\u0096\u00b8\u00b74\u0003\u0000\u0000xpw\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\u0004t\u0000\u000bunspeci"
								+ "fiedt\u0000\bfemininet\u0000\u0016masculine and femininet\u0000\tmasculinexq\u0000~\u0000(sq"
								+ "\u0000~\u0000)q\u0000~\u0000Pq\u0000~\u0000:sq\u0000~\u00006t\u0000\u0006genderq\u0000~\u0000:q\u0000~\u0000<sq\u0000~\u0000+ppsq\u0000~\u0000-q\u0000~\u00000pq"
								+ "\u0000~\u00001sq\u0000~\u00006t\u0000\u0018inflectBeinoniPossessiveq\u0000~\u0000:q\u0000~\u0000<sq\u0000~\u0000+ppsq\u0000~\u0000"
								+ "-q\u0000~\u00000psq\u0000~\u0000\u0016ppsq\u0000~\u0000Iq\u0000~\u0000:t\u0000\nNumberTypeq\u0000~\u0000&\u0000\u0000q\u0000~\u0000!q\u0000~\u0000!q\u0000~\u0000"
								+ "Qsq\u0000~\u0000Rw\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\u0006t\u0000\u000bunspecifiedt\u0000\u0013singular and pluralt\u0000\u0004"
								+ "dualt\u0000\u000fdual and pluralt\u0000\bsingulart\u0000\u0006pluralxq\u0000~\u0000(sq\u0000~\u0000)q\u0000~\u0000cq"
								+ "\u0000~\u0000:sq\u0000~\u00006t\u0000\u0006numberq\u0000~\u0000:q\u0000~\u0000<sq\u0000~\u0000+ppsq\u0000~\u0000-q\u0000~\u00000psq\u0000~\u0000\u0016ppsq\u0000"
								+ "~\u0000Iq\u0000~\u0000:t\u0000\nPersonTypeq\u0000~\u0000&\u0000\u0000q\u0000~\u0000!q\u0000~\u0000!q\u0000~\u0000Qsq\u0000~\u0000Rw\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000"
								+ "\u0000\u0000\u0005t\u0000\u000bunspecifiedt\u0000\u00013t\u0000\u00012t\u0000\u0003anyt\u0000\u00011xq\u0000~\u0000(sq\u0000~\u0000)q\u0000~\u0000rq\u0000~\u0000:sq\u0000"
								+ "~\u00006t\u0000\u0006personq\u0000~\u0000:q\u0000~\u0000<sq\u0000~\u0000-ppsq\u0000~\u0000\u0016ppsq\u0000~\u0000Iq\u0000~\u0000:t\u0000\u0007PGNTypeq"
								+ "\u0000~\u0000&\u0000\u0000q\u0000~\u0000!q\u0000~\u0000!q\u0000~\u0000Qsq\u0000~\u0000Rw\f\u0000\u0000\u0000 ?@\u0000\u0000\u0000\u0000\u0000\u0013t\u0000\t123p/M/Sgt\u0000\u00072p/M"
								+ "/Plt\u0000\u00073p/M/Sgt\u0000\b1p/MF/Sgt\u0000\t123p/M/Plt\u0000\b2p/MF/Plt\u0000\u00072p/M/Sgt\u0000\u0007"
								+ "1p/F/Sgt\u0000\b3p/MF/Plt\u0000\u00073p/F/Plt\u0000\u00071p/M/Sgt\u0000\u000bunspecifiedt\u0000\u00072p/F/"
								+ "Plt\u0000\t123p/F/Plt\u0000\u00073p/M/Plt\u0000\u00073p/F/Sgt\u0000\t123p/F/Sgt\u0000\b1p/MF/Plt\u0000\u0007"
								+ "2p/F/Sgxq\u0000~\u0000(sq\u0000~\u0000)q\u0000~\u0000\u007fq\u0000~\u0000:sq\u0000~\u00006t\u0000\u0003pgnq\u0000~\u0000:sq\u0000~\u0000+ppsq\u0000~\u0000-"
								+ "q\u0000~\u00000psq\u0000~\u0000\u0016ppsq\u0000~\u0000Iq\u0000~\u0000:t\u0000\nScriptTypeq\u0000~\u0000&\u0000\u0000q\u0000~\u0000!q\u0000~\u0000!q\u0000~\u0000Q"
								+ "sq\u0000~\u0000Rw\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\u0004t\u0000\u0004typot\u0000\u0006formalt\u0000\u0005slangt\u0000\ncolloquialxq\u0000"
								+ "~\u0000(sq\u0000~\u0000)q\u0000~\u0000\u009bq\u0000~\u0000:sq\u0000~\u00006t\u0000\u0006scriptq\u0000~\u0000:q\u0000~\u0000<sq\u0000~\u0000-ppsq\u0000~\u0000\u0016pp"
								+ "sq\u0000~\u0000Iq\u0000~\u0000:t\u0000\tTenseTypeq\u0000~\u0000&\u0000\u0000q\u0000~\u0000!q\u0000~\u0000!q\u0000~\u0000Qsq\u0000~\u0000Rw\f\u0000\u0000\u0000\u0010?@\u0000"
								+ "\u0000\u0000\u0000\u0000\bt\u0000\u000bunspecifiedt\u0000\u0004pastt\u0000\nimperativet\u0000\u0007beinonit\u0000\ninfiniti"
								+ "vet\u0000\u0006futuret\u0000\u000ebareInfinitivet\u0000\u0011passiveParticiplexq\u0000~\u0000(sq\u0000~\u0000)"
								+ "q\u0000~\u0000\u00a7q\u0000~\u0000:sq\u0000~\u00006t\u0000\u0005tenseq\u0000~\u0000:sq\u0000~\u0000-ppq\u0000~\u0000\u0019sq\u0000~\u00006t\u0000\u000etranslite"
								+ "ratedq\u0000~\u0000:sq\u0000~\u0000-ppq\u0000~\u0000\u0019sq\u0000~\u00006t\u0000\bundottedq\u0000~\u0000:sq\u0000~\u0000+ppsq\u0000~\u0000-q"
								+ "\u0000~\u00000psq\u0000~\u0000\u0016ppsr\u0000\"com.sun.msv.datatype.xsd.QnameType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002"
								+ "\u0000\u0000xq\u0000~\u0000\u001cq\u0000~\u0000\"t\u0000\u0005QNameq\u0000~\u0000&q\u0000~\u0000(sq\u0000~\u0000)q\u0000~\u0000\u00bfq\u0000~\u0000\"sq\u0000~\u00006t\u0000\u0004type"
								+ "t\u0000)http://www.w3.org/2001/XMLSchema-instanceq\u0000~\u0000<sq\u0000~\u00006t\u0000\u0003ad"
								+ "dq\u0000~\u0000:sr\u0000\"com.sun.msv.grammar.ExpressionPool\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\bex"
								+ "pTablet\u0000/Lcom/sun/msv/grammar/ExpressionPool$ClosedHash;xpsr"
								+ "\u0000-com.sun.msv.grammar.ExpressionPool$ClosedHash\u00d7j\u00d0N\u00ef\u00e8\u00ed\u001c\u0003\u0000\u0003I\u0000"
								+ "\u0005countB\u0000\rstreamVersionL\u0000\u0006parentt\u0000$Lcom/sun/msv/grammar/Expre"
								+ "ssionPool;xp\u0000\u0000\u0000\u0016\u0001pq\u0000~\u0000\u000fq\u0000~\u0000\u0015q\u0000~\u0000\u00baq\u0000~\u0000Fq\u0000~\u0000_q\u0000~\u0000\u0010q\u0000~\u0000\rq\u0000~\u0000\u0011q\u0000"
								+ "~\u0000>q\u0000~\u0000\u000bq\u0000~\u0000\u000eq\u0000~\u0000\u0012q\u0000~\u0000\tq\u0000~\u0000\fq\u0000~\u0000\u0097q\u0000~\u0000\u0014q\u0000~\u0000\nq\u0000~\u0000nq\u0000~\u0000,q\u0000~\u0000\u0013q\u0000"
								+ "~\u0000[q\u0000~\u0000Bx"));
			}
			return new com.sun.msv.verifier.regexp.REDocumentDeclaration(
					schemaFragment);
		}

		@Override
		public mila.generated.impl.runtime.UnmarshallingEventHandler createUnmarshaller(
				mila.generated.impl.runtime.UnmarshallingContext context) {
			return new mila.generated.impl.VerbLexiconTypeImpl.AddImpl.Unmarshaller(
					context);
		}

		@Override
		public java.lang.Class getPrimaryInterface() {
			return (mila.generated.VerbLexiconType.Add.class);
		}

		@Override
		public void serializeAttributes(
				mila.generated.impl.runtime.XMLSerializer context)
				throws org.xml.sax.SAXException {
		}

		@Override
		public void serializeBody(mila.generated.impl.runtime.XMLSerializer context)
				throws org.xml.sax.SAXException {
			context.startElement("", "add");
			super.serializeURIs(context);
			context.endNamespaceDecls();
			super.serializeAttributes(context);
			context.endAttributes();
			super.serializeBody(context);
			context.endElement();
		}

		@Override
		public void serializeURIs(mila.generated.impl.runtime.XMLSerializer context)
				throws org.xml.sax.SAXException {
		}

	}

	public static class RemoveImpl extends mila.generated.impl.VerbExceptionTypeImpl
			implements mila.generated.VerbLexiconType.Remove,
			com.sun.xml.bind.RIElement, com.sun.xml.bind.JAXBObject,
			mila.generated.impl.runtime.UnmarshallableObject,
			mila.generated.impl.runtime.XMLSerializable,
			mila.generated.impl.runtime.ValidatableObject {

		public class Unmarshaller extends
				mila.generated.impl.runtime.AbstractUnmarshallingEventHandlerImpl {

			public Unmarshaller(
					mila.generated.impl.runtime.UnmarshallingContext context) {
				super(context, "----");
			}

			protected Unmarshaller(
					mila.generated.impl.runtime.UnmarshallingContext context,
					int startState) {
				this(context);
				state = startState;
			}

			@Override
			public void enterAttribute(java.lang.String ___uri,
					java.lang.String ___local, java.lang.String ___qname)
					throws org.xml.sax.SAXException {
				int attIdx;
				outer: while (true) {
					switch (state) {
					case 1:
						if (("beinoniConstruct" == ___local) && ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((mila.generated.impl.VerbExceptionTypeImpl) mila.generated.impl.VerbLexiconTypeImpl.RemoveImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						if (("beinoniDefiniteness" == ___local)
								&& ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((mila.generated.impl.VerbExceptionTypeImpl) mila.generated.impl.VerbLexiconTypeImpl.RemoveImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						if (("dotted" == ___local) && ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((mila.generated.impl.VerbExceptionTypeImpl) mila.generated.impl.VerbLexiconTypeImpl.RemoveImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						if (("gender" == ___local) && ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((mila.generated.impl.VerbExceptionTypeImpl) mila.generated.impl.VerbLexiconTypeImpl.RemoveImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						if (("inflectBeinoniPossessive" == ___local)
								&& ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((mila.generated.impl.VerbExceptionTypeImpl) mila.generated.impl.VerbLexiconTypeImpl.RemoveImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						if (("number" == ___local) && ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((mila.generated.impl.VerbExceptionTypeImpl) mila.generated.impl.VerbLexiconTypeImpl.RemoveImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						if (("person" == ___local) && ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((mila.generated.impl.VerbExceptionTypeImpl) mila.generated.impl.VerbLexiconTypeImpl.RemoveImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						if (("pgn" == ___local) && ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((mila.generated.impl.VerbExceptionTypeImpl) mila.generated.impl.VerbLexiconTypeImpl.RemoveImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						break;
					case 3:
						revertToParentFromEnterAttribute(___uri, ___local,
								___qname);
						return;
					}
					super.enterAttribute(___uri, ___local, ___qname);
					break;
				}
			}

			@Override
			public void enterElement(java.lang.String ___uri,
					java.lang.String ___local, java.lang.String ___qname,
					org.xml.sax.Attributes __atts)
					throws org.xml.sax.SAXException {
				int attIdx;
				outer: while (true) {
					switch (state) {
					case 1:
						attIdx = context.getAttribute("", "beinoniConstruct");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						attIdx = context
								.getAttribute("", "beinoniDefiniteness");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						attIdx = context.getAttribute("", "dotted");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						attIdx = context.getAttribute("", "gender");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						attIdx = context.getAttribute("",
								"inflectBeinoniPossessive");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						attIdx = context.getAttribute("", "number");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						attIdx = context.getAttribute("", "person");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						attIdx = context.getAttribute("", "pgn");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						break;
					case 0:
						if (("remove" == ___local) && ("" == ___uri)) {
							context.pushAttributes(__atts, true);
							state = 1;
							return;
						}
						break;
					case 3:
						revertToParentFromEnterElement(___uri, ___local,
								___qname, __atts);
						return;
					}
					super.enterElement(___uri, ___local, ___qname, __atts);
					break;
				}
			}

			@Override
			public void handleText(final java.lang.String value)
					throws org.xml.sax.SAXException {
				int attIdx;
				outer: while (true) {
					try {
						switch (state) {
						case 1:
							attIdx = context.getAttribute("",
									"beinoniConstruct");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							attIdx = context.getAttribute("",
									"beinoniDefiniteness");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							attIdx = context.getAttribute("", "dotted");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							attIdx = context.getAttribute("", "gender");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							attIdx = context.getAttribute("",
									"inflectBeinoniPossessive");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							attIdx = context.getAttribute("", "number");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							attIdx = context.getAttribute("", "person");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							attIdx = context.getAttribute("", "pgn");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							break;
						case 3:
							revertToParentFromText(value);
							return;
						}
					} catch (java.lang.RuntimeException e) {
						handleUnexpectedTextException(value, e);
					}
					break;
				}
			}

			@Override
			public void leaveAttribute(java.lang.String ___uri,
					java.lang.String ___local, java.lang.String ___qname)
					throws org.xml.sax.SAXException {
				int attIdx;
				outer: while (true) {
					switch (state) {
					case 1:
						attIdx = context.getAttribute("", "beinoniConstruct");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context
								.getAttribute("", "beinoniDefiniteness");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "dotted");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "gender");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("",
								"inflectBeinoniPossessive");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "number");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "person");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "pgn");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						break;
					case 3:
						revertToParentFromLeaveAttribute(___uri, ___local,
								___qname);
						return;
					}
					super.leaveAttribute(___uri, ___local, ___qname);
					break;
				}
			}

			@Override
			public void leaveElement(java.lang.String ___uri,
					java.lang.String ___local, java.lang.String ___qname)
					throws org.xml.sax.SAXException {
				int attIdx;
				outer: while (true) {
					switch (state) {
					case 1:
						attIdx = context.getAttribute("", "beinoniConstruct");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context
								.getAttribute("", "beinoniDefiniteness");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "dotted");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "gender");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("",
								"inflectBeinoniPossessive");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "number");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "person");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "pgn");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						break;
					case 2:
						if (("remove" == ___local) && ("" == ___uri)) {
							context.popAttributes();
							state = 3;
							return;
						}
						break;
					case 3:
						revertToParentFromLeaveElement(___uri, ___local,
								___qname);
						return;
					}
					super.leaveElement(___uri, ___local, ___qname);
					break;
				}
			}

			@Override
			public java.lang.Object owner() {
				return mila.generated.impl.VerbLexiconTypeImpl.RemoveImpl.this;
			}

		}

		public final static java.lang.Class version = (mila.generated.impl.JAXBVersion.class);

		private static com.sun.msv.grammar.Grammar schemaFragment;

		private final static java.lang.Class PRIMARY_INTERFACE_CLASS() {
			return (mila.generated.VerbLexiconType.Remove.class);
		}

		@Override
		public java.lang.String ____jaxb_ri____getLocalName() {
			return "remove";
		}

		@Override
		public java.lang.String ____jaxb_ri____getNamespaceURI() {
			return "";
		}

		@Override
		public com.sun.msv.verifier.DocumentDeclaration createRawValidator() {
			if (schemaFragment == null) {
				schemaFragment = com.sun.xml.bind.validator.SchemaDeserializer
						.deserialize(("\u00ac\u00ed\u0000\u0005sr\u0000\'com.sun.msv.grammar.trex.ElementPattern\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000"
								+ "\tnameClasst\u0000\u001fLcom/sun/msv/grammar/NameClass;xr\u0000\u001ecom.sun.msv."
								+ "grammar.ElementExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002Z\u0000\u001aignoreUndeclaredAttributesL\u0000"
								+ "\fcontentModelt\u0000 Lcom/sun/msv/grammar/Expression;xr\u0000\u001ecom.sun."
								+ "msv.grammar.Expression\u00f8\u0018\u0082\u00e8N5~O\u0002\u0000\u0002L\u0000\u0013epsilonReducibilityt\u0000\u0013Lj"
								+ "ava/lang/Boolean;L\u0000\u000bexpandedExpq\u0000~\u0000\u0003xppp\u0000sr\u0000\u001fcom.sun.msv.gra"
								+ "mmar.SequenceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.sun.msv.grammar.BinaryExp"
								+ "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0004exp1q\u0000~\u0000\u0003L\u0000\u0004exp2q\u0000~\u0000\u0003xq\u0000~\u0000\u0004ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007pps"
								+ "q\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000"
								+ "\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsr\u0000\u001bcom.sun.msv.grammar.DataExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000"
								+ "\u0003L\u0000\u0002dtt\u0000\u001fLorg/relaxng/datatype/Datatype;L\u0000\u0006exceptq\u0000~\u0000\u0003L\u0000\u0004nam"
								+ "et\u0000\u001dLcom/sun/msv/util/StringPair;xq\u0000~\u0000\u0004ppsr\u0000\"com.sun.msv.dat"
								+ "atype.xsd.TokenType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000#com.sun.msv.datatype.xsd.S"
								+ "tringType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001Z\u0000\risAlwaysValidxr\u0000*com.sun.msv.datatype"
								+ ".xsd.BuiltinAtomicType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000%com.sun.msv.datatype.xs"
								+ "d.ConcreteType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\'com.sun.msv.datatype.xsd.XSData"
								+ "typeImpl\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\fnamespaceUrit\u0000\u0012Ljava/lang/String;L\u0000\bty"
								+ "peNameq\u0000~\u0000\u001fL\u0000\nwhiteSpacet\u0000.Lcom/sun/msv/datatype/xsd/WhiteSp"
								+ "aceProcessor;xpt\u0000 http://www.w3.org/2001/XMLSchemat\u0000\u0005tokensr"
								+ "\u00005com.sun.msv.datatype.xsd.WhiteSpaceProcessor$Collapse\u0000\u0000\u0000\u0000\u0000"
								+ "\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000,com.sun.msv.datatype.xsd.WhiteSpaceProcessor\u0000\u0000\u0000\u0000\u0000\u0000"
								+ "\u0000\u0001\u0002\u0000\u0000xp\u0001sr\u00000com.sun.msv.grammar.Expression$NullSetExpression"
								+ "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0004ppsr\u0000\u001bcom.sun.msv.util.StringPair\u00d0t\u001ejB\u008f\u008d\u00a0\u0002\u0000"
								+ "\u0002L\u0000\tlocalNameq\u0000~\u0000\u001fL\u0000\fnamespaceURIq\u0000~\u0000\u001fxpq\u0000~\u0000#q\u0000~\u0000\"sr\u0000\u001dcom.su"
								+ "n.msv.grammar.ChoiceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\bppsr\u0000 com.sun.msv.gr"
								+ "ammar.AttributeExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0003expq\u0000~\u0000\u0003L\u0000\tnameClassq\u0000~\u0000\u0001xq\u0000"
								+ "~\u0000\u0004sr\u0000\u0011java.lang.Boolean\u00cd r\u0080\u00d5\u009c\u00fa\u00ee\u0002\u0000\u0001Z\u0000\u0005valuexp\u0000psq\u0000~\u0000\u0016ppsr\u0000$c"
								+ "om.sun.msv.datatype.xsd.BooleanType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u001cq\u0000~\u0000\"t\u0000\u0007"
								+ "booleanq\u0000~\u0000&q\u0000~\u0000(sq\u0000~\u0000)q\u0000~\u00004q\u0000~\u0000\"sr\u0000#com.sun.msv.grammar.Sim"
								+ "pleNameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\tlocalNameq\u0000~\u0000\u001fL\u0000\fnamespaceURIq\u0000~\u0000\u001f"
								+ "xr\u0000\u001dcom.sun.msv.grammar.NameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xpt\u0000\u0010beinoniCons"
								+ "tructt\u0000\u0000sr\u00000com.sun.msv.grammar.Expression$EpsilonExpression"
								+ "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0004sq\u0000~\u0000/\u0001q\u0000~\u0000<sq\u0000~\u0000+ppsq\u0000~\u0000-q\u0000~\u00000pq\u0000~\u00001sq\u0000~\u00006"
								+ "t\u0000\u0013beinoniDefinitenessq\u0000~\u0000:q\u0000~\u0000<sq\u0000~\u0000+ppsq\u0000~\u0000-q\u0000~\u00000pq\u0000~\u0000\u0019sq\u0000"
								+ "~\u00006t\u0000\u0006dottedq\u0000~\u0000:q\u0000~\u0000<sq\u0000~\u0000+ppsq\u0000~\u0000-q\u0000~\u00000psq\u0000~\u0000\u0016ppsr\u0000)com.su"
								+ "n.msv.datatype.xsd.EnumerationFacet\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\u0006valuest\u0000\u000fLj"
								+ "ava/util/Set;xr\u00009com.sun.msv.datatype.xsd.DataTypeWithValueC"
								+ "onstraintFacet\"\u00a7Ro\u00ca\u00c7\u008aT\u0002\u0000\u0000xr\u0000*com.sun.msv.datatype.xsd.DataTy"
								+ "peWithFacet\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0005Z\u0000\fisFacetFixedZ\u0000\u0012needValueCheckFlagL\u0000"
								+ "\bbaseTypet\u0000)Lcom/sun/msv/datatype/xsd/XSDatatypeImpl;L\u0000\fconc"
								+ "reteTypet\u0000\'Lcom/sun/msv/datatype/xsd/ConcreteType;L\u0000\tfacetNa"
								+ "meq\u0000~\u0000\u001fxq\u0000~\u0000\u001eq\u0000~\u0000:t\u0000\nGenderTypeq\u0000~\u0000&\u0000\u0000q\u0000~\u0000!q\u0000~\u0000!t\u0000\u000benumerati"
								+ "onsr\u0000\u0011java.util.HashSet\u00baD\u0085\u0095\u0096\u00b8\u00b74\u0003\u0000\u0000xpw\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\u0004t\u0000\u000bunspeci"
								+ "fiedt\u0000\bfemininet\u0000\u0016masculine and femininet\u0000\tmasculinexq\u0000~\u0000(sq"
								+ "\u0000~\u0000)q\u0000~\u0000Pq\u0000~\u0000:sq\u0000~\u00006t\u0000\u0006genderq\u0000~\u0000:q\u0000~\u0000<sq\u0000~\u0000+ppsq\u0000~\u0000-q\u0000~\u00000pq"
								+ "\u0000~\u00001sq\u0000~\u00006t\u0000\u0018inflectBeinoniPossessiveq\u0000~\u0000:q\u0000~\u0000<sq\u0000~\u0000+ppsq\u0000~\u0000"
								+ "-q\u0000~\u00000psq\u0000~\u0000\u0016ppsq\u0000~\u0000Iq\u0000~\u0000:t\u0000\nNumberTypeq\u0000~\u0000&\u0000\u0000q\u0000~\u0000!q\u0000~\u0000!q\u0000~\u0000"
								+ "Qsq\u0000~\u0000Rw\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\u0006t\u0000\u000bunspecifiedt\u0000\u0013singular and pluralt\u0000\u0004"
								+ "dualt\u0000\u000fdual and pluralt\u0000\bsingulart\u0000\u0006pluralxq\u0000~\u0000(sq\u0000~\u0000)q\u0000~\u0000cq"
								+ "\u0000~\u0000:sq\u0000~\u00006t\u0000\u0006numberq\u0000~\u0000:q\u0000~\u0000<sq\u0000~\u0000+ppsq\u0000~\u0000-q\u0000~\u00000psq\u0000~\u0000\u0016ppsq\u0000"
								+ "~\u0000Iq\u0000~\u0000:t\u0000\nPersonTypeq\u0000~\u0000&\u0000\u0000q\u0000~\u0000!q\u0000~\u0000!q\u0000~\u0000Qsq\u0000~\u0000Rw\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000"
								+ "\u0000\u0000\u0005t\u0000\u000bunspecifiedt\u0000\u00013t\u0000\u00012t\u0000\u0003anyt\u0000\u00011xq\u0000~\u0000(sq\u0000~\u0000)q\u0000~\u0000rq\u0000~\u0000:sq\u0000"
								+ "~\u00006t\u0000\u0006personq\u0000~\u0000:q\u0000~\u0000<sq\u0000~\u0000-ppsq\u0000~\u0000\u0016ppsq\u0000~\u0000Iq\u0000~\u0000:t\u0000\u0007PGNTypeq"
								+ "\u0000~\u0000&\u0000\u0000q\u0000~\u0000!q\u0000~\u0000!q\u0000~\u0000Qsq\u0000~\u0000Rw\f\u0000\u0000\u0000 ?@\u0000\u0000\u0000\u0000\u0000\u0013t\u0000\t123p/M/Sgt\u0000\u00072p/M"
								+ "/Plt\u0000\u00073p/M/Sgt\u0000\b1p/MF/Sgt\u0000\t123p/M/Plt\u0000\b2p/MF/Plt\u0000\u00072p/M/Sgt\u0000\u0007"
								+ "1p/F/Sgt\u0000\b3p/MF/Plt\u0000\u00073p/F/Plt\u0000\u00071p/M/Sgt\u0000\u000bunspecifiedt\u0000\u00072p/F/"
								+ "Plt\u0000\t123p/F/Plt\u0000\u00073p/M/Plt\u0000\u00073p/F/Sgt\u0000\t123p/F/Sgt\u0000\b1p/MF/Plt\u0000\u0007"
								+ "2p/F/Sgxq\u0000~\u0000(sq\u0000~\u0000)q\u0000~\u0000\u007fq\u0000~\u0000:sq\u0000~\u00006t\u0000\u0003pgnq\u0000~\u0000:sq\u0000~\u0000+ppsq\u0000~\u0000-"
								+ "q\u0000~\u00000psq\u0000~\u0000\u0016ppsq\u0000~\u0000Iq\u0000~\u0000:t\u0000\nScriptTypeq\u0000~\u0000&\u0000\u0000q\u0000~\u0000!q\u0000~\u0000!q\u0000~\u0000Q"
								+ "sq\u0000~\u0000Rw\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\u0004t\u0000\u0004typot\u0000\u0006formalt\u0000\u0005slangt\u0000\ncolloquialxq\u0000"
								+ "~\u0000(sq\u0000~\u0000)q\u0000~\u0000\u009bq\u0000~\u0000:sq\u0000~\u00006t\u0000\u0006scriptq\u0000~\u0000:q\u0000~\u0000<sq\u0000~\u0000-ppsq\u0000~\u0000\u0016pp"
								+ "sq\u0000~\u0000Iq\u0000~\u0000:t\u0000\tTenseTypeq\u0000~\u0000&\u0000\u0000q\u0000~\u0000!q\u0000~\u0000!q\u0000~\u0000Qsq\u0000~\u0000Rw\f\u0000\u0000\u0000\u0010?@\u0000"
								+ "\u0000\u0000\u0000\u0000\bt\u0000\u000bunspecifiedt\u0000\u0004pastt\u0000\nimperativet\u0000\u0007beinonit\u0000\ninfiniti"
								+ "vet\u0000\u0006futuret\u0000\u000ebareInfinitivet\u0000\u0011passiveParticiplexq\u0000~\u0000(sq\u0000~\u0000)"
								+ "q\u0000~\u0000\u00a7q\u0000~\u0000:sq\u0000~\u00006t\u0000\u0005tenseq\u0000~\u0000:sq\u0000~\u0000-ppq\u0000~\u0000\u0019sq\u0000~\u00006t\u0000\u000etranslite"
								+ "ratedq\u0000~\u0000:sq\u0000~\u0000-ppq\u0000~\u0000\u0019sq\u0000~\u00006t\u0000\bundottedq\u0000~\u0000:sq\u0000~\u0000+ppsq\u0000~\u0000-q"
								+ "\u0000~\u00000psq\u0000~\u0000\u0016ppsr\u0000\"com.sun.msv.datatype.xsd.QnameType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002"
								+ "\u0000\u0000xq\u0000~\u0000\u001cq\u0000~\u0000\"t\u0000\u0005QNameq\u0000~\u0000&q\u0000~\u0000(sq\u0000~\u0000)q\u0000~\u0000\u00bfq\u0000~\u0000\"sq\u0000~\u00006t\u0000\u0004type"
								+ "t\u0000)http://www.w3.org/2001/XMLSchema-instanceq\u0000~\u0000<sq\u0000~\u00006t\u0000\u0006re"
								+ "moveq\u0000~\u0000:sr\u0000\"com.sun.msv.grammar.ExpressionPool\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000"
								+ "\bexpTablet\u0000/Lcom/sun/msv/grammar/ExpressionPool$ClosedHash;x"
								+ "psr\u0000-com.sun.msv.grammar.ExpressionPool$ClosedHash\u00d7j\u00d0N\u00ef\u00e8\u00ed\u001c\u0003\u0000"
								+ "\u0003I\u0000\u0005countB\u0000\rstreamVersionL\u0000\u0006parentt\u0000$Lcom/sun/msv/grammar/Ex"
								+ "pressionPool;xp\u0000\u0000\u0000\u0016\u0001pq\u0000~\u0000\u000fq\u0000~\u0000\u0015q\u0000~\u0000\u00baq\u0000~\u0000Fq\u0000~\u0000_q\u0000~\u0000\u0010q\u0000~\u0000\rq\u0000~\u0000"
								+ "\u0011q\u0000~\u0000>q\u0000~\u0000\u000bq\u0000~\u0000\u000eq\u0000~\u0000\u0012q\u0000~\u0000\tq\u0000~\u0000\fq\u0000~\u0000\u0097q\u0000~\u0000\u0014q\u0000~\u0000\nq\u0000~\u0000nq\u0000~\u0000,q\u0000~\u0000"
								+ "\u0013q\u0000~\u0000[q\u0000~\u0000Bx"));
			}
			return new com.sun.msv.verifier.regexp.REDocumentDeclaration(
					schemaFragment);
		}

		@Override
		public mila.generated.impl.runtime.UnmarshallingEventHandler createUnmarshaller(
				mila.generated.impl.runtime.UnmarshallingContext context) {
			return new mila.generated.impl.VerbLexiconTypeImpl.RemoveImpl.Unmarshaller(
					context);
		}

		@Override
		public java.lang.Class getPrimaryInterface() {
			return (mila.generated.VerbLexiconType.Remove.class);
		}

		@Override
		public void serializeAttributes(
				mila.generated.impl.runtime.XMLSerializer context)
				throws org.xml.sax.SAXException {
		}

		@Override
		public void serializeBody(mila.generated.impl.runtime.XMLSerializer context)
				throws org.xml.sax.SAXException {
			context.startElement("", "remove");
			super.serializeURIs(context);
			context.endNamespaceDecls();
			super.serializeAttributes(context);
			context.endAttributes();
			super.serializeBody(context);
			context.endElement();
		}

		@Override
		public void serializeURIs(mila.generated.impl.runtime.XMLSerializer context)
				throws org.xml.sax.SAXException {
		}

	}

	public static class ReplaceImpl extends
			mila.generated.impl.VerbExceptionTypeImpl implements
			mila.generated.VerbLexiconType.Replace, com.sun.xml.bind.RIElement,
			com.sun.xml.bind.JAXBObject,
			mila.generated.impl.runtime.UnmarshallableObject,
			mila.generated.impl.runtime.XMLSerializable,
			mila.generated.impl.runtime.ValidatableObject {

		public class Unmarshaller extends
				mila.generated.impl.runtime.AbstractUnmarshallingEventHandlerImpl {

			public Unmarshaller(
					mila.generated.impl.runtime.UnmarshallingContext context) {
				super(context, "----");
			}

			protected Unmarshaller(
					mila.generated.impl.runtime.UnmarshallingContext context,
					int startState) {
				this(context);
				state = startState;
			}

			@Override
			public void enterAttribute(java.lang.String ___uri,
					java.lang.String ___local, java.lang.String ___qname)
					throws org.xml.sax.SAXException {
				int attIdx;
				outer: while (true) {
					switch (state) {
					case 1:
						if (("beinoniConstruct" == ___local) && ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((mila.generated.impl.VerbExceptionTypeImpl) mila.generated.impl.VerbLexiconTypeImpl.ReplaceImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						if (("beinoniDefiniteness" == ___local)
								&& ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((mila.generated.impl.VerbExceptionTypeImpl) mila.generated.impl.VerbLexiconTypeImpl.ReplaceImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						if (("dotted" == ___local) && ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((mila.generated.impl.VerbExceptionTypeImpl) mila.generated.impl.VerbLexiconTypeImpl.ReplaceImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						if (("gender" == ___local) && ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((mila.generated.impl.VerbExceptionTypeImpl) mila.generated.impl.VerbLexiconTypeImpl.ReplaceImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						if (("inflectBeinoniPossessive" == ___local)
								&& ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((mila.generated.impl.VerbExceptionTypeImpl) mila.generated.impl.VerbLexiconTypeImpl.ReplaceImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						if (("number" == ___local) && ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((mila.generated.impl.VerbExceptionTypeImpl) mila.generated.impl.VerbLexiconTypeImpl.ReplaceImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						if (("person" == ___local) && ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((mila.generated.impl.VerbExceptionTypeImpl) mila.generated.impl.VerbLexiconTypeImpl.ReplaceImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						if (("pgn" == ___local) && ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((mila.generated.impl.VerbExceptionTypeImpl) mila.generated.impl.VerbLexiconTypeImpl.ReplaceImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						break;
					case 3:
						revertToParentFromEnterAttribute(___uri, ___local,
								___qname);
						return;
					}
					super.enterAttribute(___uri, ___local, ___qname);
					break;
				}
			}

			@Override
			public void enterElement(java.lang.String ___uri,
					java.lang.String ___local, java.lang.String ___qname,
					org.xml.sax.Attributes __atts)
					throws org.xml.sax.SAXException {
				int attIdx;
				outer: while (true) {
					switch (state) {
					case 1:
						attIdx = context.getAttribute("", "beinoniConstruct");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						attIdx = context
								.getAttribute("", "beinoniDefiniteness");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						attIdx = context.getAttribute("", "dotted");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						attIdx = context.getAttribute("", "gender");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						attIdx = context.getAttribute("",
								"inflectBeinoniPossessive");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						attIdx = context.getAttribute("", "number");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						attIdx = context.getAttribute("", "person");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						attIdx = context.getAttribute("", "pgn");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						break;
					case 0:
						if (("replace" == ___local) && ("" == ___uri)) {
							context.pushAttributes(__atts, true);
							state = 1;
							return;
						}
						break;
					case 3:
						revertToParentFromEnterElement(___uri, ___local,
								___qname, __atts);
						return;
					}
					super.enterElement(___uri, ___local, ___qname, __atts);
					break;
				}
			}

			@Override
			public void handleText(final java.lang.String value)
					throws org.xml.sax.SAXException {
				int attIdx;
				outer: while (true) {
					try {
						switch (state) {
						case 1:
							attIdx = context.getAttribute("",
									"beinoniConstruct");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							attIdx = context.getAttribute("",
									"beinoniDefiniteness");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							attIdx = context.getAttribute("", "dotted");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							attIdx = context.getAttribute("", "gender");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							attIdx = context.getAttribute("",
									"inflectBeinoniPossessive");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							attIdx = context.getAttribute("", "number");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							attIdx = context.getAttribute("", "person");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							attIdx = context.getAttribute("", "pgn");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							break;
						case 3:
							revertToParentFromText(value);
							return;
						}
					} catch (java.lang.RuntimeException e) {
						handleUnexpectedTextException(value, e);
					}
					break;
				}
			}

			@Override
			public void leaveAttribute(java.lang.String ___uri,
					java.lang.String ___local, java.lang.String ___qname)
					throws org.xml.sax.SAXException {
				int attIdx;
				outer: while (true) {
					switch (state) {
					case 1:
						attIdx = context.getAttribute("", "beinoniConstruct");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context
								.getAttribute("", "beinoniDefiniteness");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "dotted");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "gender");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("",
								"inflectBeinoniPossessive");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "number");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "person");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "pgn");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						break;
					case 3:
						revertToParentFromLeaveAttribute(___uri, ___local,
								___qname);
						return;
					}
					super.leaveAttribute(___uri, ___local, ___qname);
					break;
				}
			}

			@Override
			public void leaveElement(java.lang.String ___uri,
					java.lang.String ___local, java.lang.String ___qname)
					throws org.xml.sax.SAXException {
				int attIdx;
				outer: while (true) {
					switch (state) {
					case 2:
						if (("replace" == ___local) && ("" == ___uri)) {
							context.popAttributes();
							state = 3;
							return;
						}
						break;
					case 1:
						attIdx = context.getAttribute("", "beinoniConstruct");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context
								.getAttribute("", "beinoniDefiniteness");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "dotted");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "gender");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("",
								"inflectBeinoniPossessive");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "number");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "person");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "pgn");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						break;
					case 3:
						revertToParentFromLeaveElement(___uri, ___local,
								___qname);
						return;
					}
					super.leaveElement(___uri, ___local, ___qname);
					break;
				}
			}

			@Override
			public java.lang.Object owner() {
				return mila.generated.impl.VerbLexiconTypeImpl.ReplaceImpl.this;
			}

		}

		public final static java.lang.Class version = (mila.generated.impl.JAXBVersion.class);

		private static com.sun.msv.grammar.Grammar schemaFragment;

		private final static java.lang.Class PRIMARY_INTERFACE_CLASS() {
			return (mila.generated.VerbLexiconType.Replace.class);
		}

		@Override
		public java.lang.String ____jaxb_ri____getLocalName() {
			return "replace";
		}

		@Override
		public java.lang.String ____jaxb_ri____getNamespaceURI() {
			return "";
		}

		@Override
		public com.sun.msv.verifier.DocumentDeclaration createRawValidator() {
			if (schemaFragment == null) {
				schemaFragment = com.sun.xml.bind.validator.SchemaDeserializer
						.deserialize(("\u00ac\u00ed\u0000\u0005sr\u0000\'com.sun.msv.grammar.trex.ElementPattern\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000"
								+ "\tnameClasst\u0000\u001fLcom/sun/msv/grammar/NameClass;xr\u0000\u001ecom.sun.msv."
								+ "grammar.ElementExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002Z\u0000\u001aignoreUndeclaredAttributesL\u0000"
								+ "\fcontentModelt\u0000 Lcom/sun/msv/grammar/Expression;xr\u0000\u001ecom.sun."
								+ "msv.grammar.Expression\u00f8\u0018\u0082\u00e8N5~O\u0002\u0000\u0002L\u0000\u0013epsilonReducibilityt\u0000\u0013Lj"
								+ "ava/lang/Boolean;L\u0000\u000bexpandedExpq\u0000~\u0000\u0003xppp\u0000sr\u0000\u001fcom.sun.msv.gra"
								+ "mmar.SequenceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.sun.msv.grammar.BinaryExp"
								+ "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0004exp1q\u0000~\u0000\u0003L\u0000\u0004exp2q\u0000~\u0000\u0003xq\u0000~\u0000\u0004ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007pps"
								+ "q\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000"
								+ "\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsr\u0000\u001bcom.sun.msv.grammar.DataExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000"
								+ "\u0003L\u0000\u0002dtt\u0000\u001fLorg/relaxng/datatype/Datatype;L\u0000\u0006exceptq\u0000~\u0000\u0003L\u0000\u0004nam"
								+ "et\u0000\u001dLcom/sun/msv/util/StringPair;xq\u0000~\u0000\u0004ppsr\u0000\"com.sun.msv.dat"
								+ "atype.xsd.TokenType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000#com.sun.msv.datatype.xsd.S"
								+ "tringType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001Z\u0000\risAlwaysValidxr\u0000*com.sun.msv.datatype"
								+ ".xsd.BuiltinAtomicType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000%com.sun.msv.datatype.xs"
								+ "d.ConcreteType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\'com.sun.msv.datatype.xsd.XSData"
								+ "typeImpl\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\fnamespaceUrit\u0000\u0012Ljava/lang/String;L\u0000\bty"
								+ "peNameq\u0000~\u0000\u001fL\u0000\nwhiteSpacet\u0000.Lcom/sun/msv/datatype/xsd/WhiteSp"
								+ "aceProcessor;xpt\u0000 http://www.w3.org/2001/XMLSchemat\u0000\u0005tokensr"
								+ "\u00005com.sun.msv.datatype.xsd.WhiteSpaceProcessor$Collapse\u0000\u0000\u0000\u0000\u0000"
								+ "\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000,com.sun.msv.datatype.xsd.WhiteSpaceProcessor\u0000\u0000\u0000\u0000\u0000\u0000"
								+ "\u0000\u0001\u0002\u0000\u0000xp\u0001sr\u00000com.sun.msv.grammar.Expression$NullSetExpression"
								+ "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0004ppsr\u0000\u001bcom.sun.msv.util.StringPair\u00d0t\u001ejB\u008f\u008d\u00a0\u0002\u0000"
								+ "\u0002L\u0000\tlocalNameq\u0000~\u0000\u001fL\u0000\fnamespaceURIq\u0000~\u0000\u001fxpq\u0000~\u0000#q\u0000~\u0000\"sr\u0000\u001dcom.su"
								+ "n.msv.grammar.ChoiceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\bppsr\u0000 com.sun.msv.gr"
								+ "ammar.AttributeExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0003expq\u0000~\u0000\u0003L\u0000\tnameClassq\u0000~\u0000\u0001xq\u0000"
								+ "~\u0000\u0004sr\u0000\u0011java.lang.Boolean\u00cd r\u0080\u00d5\u009c\u00fa\u00ee\u0002\u0000\u0001Z\u0000\u0005valuexp\u0000psq\u0000~\u0000\u0016ppsr\u0000$c"
								+ "om.sun.msv.datatype.xsd.BooleanType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u001cq\u0000~\u0000\"t\u0000\u0007"
								+ "booleanq\u0000~\u0000&q\u0000~\u0000(sq\u0000~\u0000)q\u0000~\u00004q\u0000~\u0000\"sr\u0000#com.sun.msv.grammar.Sim"
								+ "pleNameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\tlocalNameq\u0000~\u0000\u001fL\u0000\fnamespaceURIq\u0000~\u0000\u001f"
								+ "xr\u0000\u001dcom.sun.msv.grammar.NameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xpt\u0000\u0010beinoniCons"
								+ "tructt\u0000\u0000sr\u00000com.sun.msv.grammar.Expression$EpsilonExpression"
								+ "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0004sq\u0000~\u0000/\u0001q\u0000~\u0000<sq\u0000~\u0000+ppsq\u0000~\u0000-q\u0000~\u00000pq\u0000~\u00001sq\u0000~\u00006"
								+ "t\u0000\u0013beinoniDefinitenessq\u0000~\u0000:q\u0000~\u0000<sq\u0000~\u0000+ppsq\u0000~\u0000-q\u0000~\u00000pq\u0000~\u0000\u0019sq\u0000"
								+ "~\u00006t\u0000\u0006dottedq\u0000~\u0000:q\u0000~\u0000<sq\u0000~\u0000+ppsq\u0000~\u0000-q\u0000~\u00000psq\u0000~\u0000\u0016ppsr\u0000)com.su"
								+ "n.msv.datatype.xsd.EnumerationFacet\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\u0006valuest\u0000\u000fLj"
								+ "ava/util/Set;xr\u00009com.sun.msv.datatype.xsd.DataTypeWithValueC"
								+ "onstraintFacet\"\u00a7Ro\u00ca\u00c7\u008aT\u0002\u0000\u0000xr\u0000*com.sun.msv.datatype.xsd.DataTy"
								+ "peWithFacet\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0005Z\u0000\fisFacetFixedZ\u0000\u0012needValueCheckFlagL\u0000"
								+ "\bbaseTypet\u0000)Lcom/sun/msv/datatype/xsd/XSDatatypeImpl;L\u0000\fconc"
								+ "reteTypet\u0000\'Lcom/sun/msv/datatype/xsd/ConcreteType;L\u0000\tfacetNa"
								+ "meq\u0000~\u0000\u001fxq\u0000~\u0000\u001eq\u0000~\u0000:t\u0000\nGenderTypeq\u0000~\u0000&\u0000\u0000q\u0000~\u0000!q\u0000~\u0000!t\u0000\u000benumerati"
								+ "onsr\u0000\u0011java.util.HashSet\u00baD\u0085\u0095\u0096\u00b8\u00b74\u0003\u0000\u0000xpw\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\u0004t\u0000\u000bunspeci"
								+ "fiedt\u0000\bfemininet\u0000\u0016masculine and femininet\u0000\tmasculinexq\u0000~\u0000(sq"
								+ "\u0000~\u0000)q\u0000~\u0000Pq\u0000~\u0000:sq\u0000~\u00006t\u0000\u0006genderq\u0000~\u0000:q\u0000~\u0000<sq\u0000~\u0000+ppsq\u0000~\u0000-q\u0000~\u00000pq"
								+ "\u0000~\u00001sq\u0000~\u00006t\u0000\u0018inflectBeinoniPossessiveq\u0000~\u0000:q\u0000~\u0000<sq\u0000~\u0000+ppsq\u0000~\u0000"
								+ "-q\u0000~\u00000psq\u0000~\u0000\u0016ppsq\u0000~\u0000Iq\u0000~\u0000:t\u0000\nNumberTypeq\u0000~\u0000&\u0000\u0000q\u0000~\u0000!q\u0000~\u0000!q\u0000~\u0000"
								+ "Qsq\u0000~\u0000Rw\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\u0006t\u0000\u000bunspecifiedt\u0000\u0013singular and pluralt\u0000\u0004"
								+ "dualt\u0000\u000fdual and pluralt\u0000\bsingulart\u0000\u0006pluralxq\u0000~\u0000(sq\u0000~\u0000)q\u0000~\u0000cq"
								+ "\u0000~\u0000:sq\u0000~\u00006t\u0000\u0006numberq\u0000~\u0000:q\u0000~\u0000<sq\u0000~\u0000+ppsq\u0000~\u0000-q\u0000~\u00000psq\u0000~\u0000\u0016ppsq\u0000"
								+ "~\u0000Iq\u0000~\u0000:t\u0000\nPersonTypeq\u0000~\u0000&\u0000\u0000q\u0000~\u0000!q\u0000~\u0000!q\u0000~\u0000Qsq\u0000~\u0000Rw\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000"
								+ "\u0000\u0000\u0005t\u0000\u000bunspecifiedt\u0000\u00013t\u0000\u00012t\u0000\u0003anyt\u0000\u00011xq\u0000~\u0000(sq\u0000~\u0000)q\u0000~\u0000rq\u0000~\u0000:sq\u0000"
								+ "~\u00006t\u0000\u0006personq\u0000~\u0000:q\u0000~\u0000<sq\u0000~\u0000-ppsq\u0000~\u0000\u0016ppsq\u0000~\u0000Iq\u0000~\u0000:t\u0000\u0007PGNTypeq"
								+ "\u0000~\u0000&\u0000\u0000q\u0000~\u0000!q\u0000~\u0000!q\u0000~\u0000Qsq\u0000~\u0000Rw\f\u0000\u0000\u0000 ?@\u0000\u0000\u0000\u0000\u0000\u0013t\u0000\t123p/M/Sgt\u0000\u00072p/M"
								+ "/Plt\u0000\u00073p/M/Sgt\u0000\b1p/MF/Sgt\u0000\t123p/M/Plt\u0000\b2p/MF/Plt\u0000\u00072p/M/Sgt\u0000\u0007"
								+ "1p/F/Sgt\u0000\b3p/MF/Plt\u0000\u00073p/F/Plt\u0000\u00071p/M/Sgt\u0000\u000bunspecifiedt\u0000\u00072p/F/"
								+ "Plt\u0000\t123p/F/Plt\u0000\u00073p/M/Plt\u0000\u00073p/F/Sgt\u0000\t123p/F/Sgt\u0000\b1p/MF/Plt\u0000\u0007"
								+ "2p/F/Sgxq\u0000~\u0000(sq\u0000~\u0000)q\u0000~\u0000\u007fq\u0000~\u0000:sq\u0000~\u00006t\u0000\u0003pgnq\u0000~\u0000:sq\u0000~\u0000+ppsq\u0000~\u0000-"
								+ "q\u0000~\u00000psq\u0000~\u0000\u0016ppsq\u0000~\u0000Iq\u0000~\u0000:t\u0000\nScriptTypeq\u0000~\u0000&\u0000\u0000q\u0000~\u0000!q\u0000~\u0000!q\u0000~\u0000Q"
								+ "sq\u0000~\u0000Rw\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\u0004t\u0000\u0004typot\u0000\u0006formalt\u0000\u0005slangt\u0000\ncolloquialxq\u0000"
								+ "~\u0000(sq\u0000~\u0000)q\u0000~\u0000\u009bq\u0000~\u0000:sq\u0000~\u00006t\u0000\u0006scriptq\u0000~\u0000:q\u0000~\u0000<sq\u0000~\u0000-ppsq\u0000~\u0000\u0016pp"
								+ "sq\u0000~\u0000Iq\u0000~\u0000:t\u0000\tTenseTypeq\u0000~\u0000&\u0000\u0000q\u0000~\u0000!q\u0000~\u0000!q\u0000~\u0000Qsq\u0000~\u0000Rw\f\u0000\u0000\u0000\u0010?@\u0000"
								+ "\u0000\u0000\u0000\u0000\bt\u0000\u000bunspecifiedt\u0000\u0004pastt\u0000\nimperativet\u0000\u0007beinonit\u0000\ninfiniti"
								+ "vet\u0000\u0006futuret\u0000\u000ebareInfinitivet\u0000\u0011passiveParticiplexq\u0000~\u0000(sq\u0000~\u0000)"
								+ "q\u0000~\u0000\u00a7q\u0000~\u0000:sq\u0000~\u00006t\u0000\u0005tenseq\u0000~\u0000:sq\u0000~\u0000-ppq\u0000~\u0000\u0019sq\u0000~\u00006t\u0000\u000etranslite"
								+ "ratedq\u0000~\u0000:sq\u0000~\u0000-ppq\u0000~\u0000\u0019sq\u0000~\u00006t\u0000\bundottedq\u0000~\u0000:sq\u0000~\u0000+ppsq\u0000~\u0000-q"
								+ "\u0000~\u00000psq\u0000~\u0000\u0016ppsr\u0000\"com.sun.msv.datatype.xsd.QnameType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002"
								+ "\u0000\u0000xq\u0000~\u0000\u001cq\u0000~\u0000\"t\u0000\u0005QNameq\u0000~\u0000&q\u0000~\u0000(sq\u0000~\u0000)q\u0000~\u0000\u00bfq\u0000~\u0000\"sq\u0000~\u00006t\u0000\u0004type"
								+ "t\u0000)http://www.w3.org/2001/XMLSchema-instanceq\u0000~\u0000<sq\u0000~\u00006t\u0000\u0007re"
								+ "placeq\u0000~\u0000:sr\u0000\"com.sun.msv.grammar.ExpressionPool\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L"
								+ "\u0000\bexpTablet\u0000/Lcom/sun/msv/grammar/ExpressionPool$ClosedHash;"
								+ "xpsr\u0000-com.sun.msv.grammar.ExpressionPool$ClosedHash\u00d7j\u00d0N\u00ef\u00e8\u00ed\u001c\u0003"
								+ "\u0000\u0003I\u0000\u0005countB\u0000\rstreamVersionL\u0000\u0006parentt\u0000$Lcom/sun/msv/grammar/E"
								+ "xpressionPool;xp\u0000\u0000\u0000\u0016\u0001pq\u0000~\u0000\u000fq\u0000~\u0000\u0015q\u0000~\u0000\u00baq\u0000~\u0000Fq\u0000~\u0000_q\u0000~\u0000\u0010q\u0000~\u0000\rq\u0000~"
								+ "\u0000\u0011q\u0000~\u0000>q\u0000~\u0000\u000bq\u0000~\u0000\u000eq\u0000~\u0000\u0012q\u0000~\u0000\tq\u0000~\u0000\fq\u0000~\u0000\u0097q\u0000~\u0000\u0014q\u0000~\u0000\nq\u0000~\u0000nq\u0000~\u0000,q\u0000~"
								+ "\u0000\u0013q\u0000~\u0000[q\u0000~\u0000Bx"));
			}
			return new com.sun.msv.verifier.regexp.REDocumentDeclaration(
					schemaFragment);
		}

		@Override
		public mila.generated.impl.runtime.UnmarshallingEventHandler createUnmarshaller(
				mila.generated.impl.runtime.UnmarshallingContext context) {
			return new mila.generated.impl.VerbLexiconTypeImpl.ReplaceImpl.Unmarshaller(
					context);
		}

		@Override
		public java.lang.Class getPrimaryInterface() {
			return (mila.generated.VerbLexiconType.Replace.class);
		}

		@Override
		public void serializeAttributes(
				mila.generated.impl.runtime.XMLSerializer context)
				throws org.xml.sax.SAXException {
		}

		@Override
		public void serializeBody(mila.generated.impl.runtime.XMLSerializer context)
				throws org.xml.sax.SAXException {
			context.startElement("", "replace");
			super.serializeURIs(context);
			context.endNamespaceDecls();
			super.serializeAttributes(context);
			context.endAttributes();
			super.serializeBody(context);
			context.endElement();
		}

		@Override
		public void serializeURIs(mila.generated.impl.runtime.XMLSerializer context)
				throws org.xml.sax.SAXException {
		}

	}

	public class Unmarshaller extends
			mila.generated.impl.runtime.AbstractUnmarshallingEventHandlerImpl {

		public Unmarshaller(mila.generated.impl.runtime.UnmarshallingContext context) {
			super(context,
					"-----------------------------------------------------");
		}

		protected Unmarshaller(
				mila.generated.impl.runtime.UnmarshallingContext context,
				int startState) {
			this(context);
			state = startState;
		}

		private void eatText1(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_InflectInfinitivel = javax.xml.bind.DatatypeConverter
						.parseBoolean(com.sun.xml.bind.WhiteSpaceProcessor
								.collapse(value));
				has_InflectInfinitivel = true;
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		private void eatText10(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_InflectImperative = javax.xml.bind.DatatypeConverter
						.parseBoolean(com.sun.xml.bind.WhiteSpaceProcessor
								.collapse(value));
				has_InflectImperative = true;
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		private void eatText11(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_InflectInfinitiveIndependent = javax.xml.bind.DatatypeConverter
						.parseBoolean(com.sun.xml.bind.WhiteSpaceProcessor
								.collapse(value));
				has_InflectInfinitiveIndependent = true;
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		private void eatText12(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_InflectBeinoniPossessive = javax.xml.bind.DatatypeConverter
						.parseBoolean(com.sun.xml.bind.WhiteSpaceProcessor
								.collapse(value));
				has_InflectBeinoniPossessive = true;
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		private void eatText13(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_Feminine = com.sun.xml.bind.WhiteSpaceProcessor
						.collapse(value);
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		private void eatText14(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_InflectBeinoni = javax.xml.bind.DatatypeConverter
						.parseBoolean(com.sun.xml.bind.WhiteSpaceProcessor
								.collapse(value));
				has_InflectBeinoni = true;
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		private void eatText15(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_Foreign = javax.xml.bind.DatatypeConverter
						.parseBoolean(com.sun.xml.bind.WhiteSpaceProcessor
								.collapse(value));
				has_Foreign = true;
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		private void eatText16(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_Valence = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		private void eatText17(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_InflectOrigin = javax.xml.bind.DatatypeConverter
						.parseBoolean(com.sun.xml.bind.WhiteSpaceProcessor
								.collapse(value));
				has_InflectOrigin = true;
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		private void eatText2(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_Root = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		private void eatText3(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_InflectFuture = javax.xml.bind.DatatypeConverter
						.parseBoolean(com.sun.xml.bind.WhiteSpaceProcessor
								.collapse(value));
				has_InflectFuture = true;
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		private void eatText4(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_IpSource = com.sun.xml.bind.WhiteSpaceProcessor
						.collapse(value);
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		private void eatText5(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_InflectionPattern = com.sun.xml.bind.WhiteSpaceProcessor
						.collapse(value);
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		private void eatText6(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_InflectBeinoniConstruct = javax.xml.bind.DatatypeConverter
						.parseBoolean(com.sun.xml.bind.WhiteSpaceProcessor
								.collapse(value));
				has_InflectBeinoniConstruct = true;
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		private void eatText7(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_InflectPast = javax.xml.bind.DatatypeConverter
						.parseBoolean(com.sun.xml.bind.WhiteSpaceProcessor
								.collapse(value));
				has_InflectPast = true;
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		private void eatText8(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_InflectInfinitiveb = javax.xml.bind.DatatypeConverter
						.parseBoolean(com.sun.xml.bind.WhiteSpaceProcessor
								.collapse(value));
				has_InflectInfinitiveb = true;
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		private void eatText9(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_Binyan = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		@Override
		public void enterAttribute(java.lang.String ___uri,
				java.lang.String ___local, java.lang.String ___qname)
				throws org.xml.sax.SAXException {
			int attIdx;
			outer: while (true) {
				switch (state) {
				case 30:
					if (("inflectInfinitivel" == ___local) && ("" == ___uri)) {
						state = 31;
						return;
					}
					state = 33;
					continue outer;
				case 52:
					revertToParentFromEnterAttribute(___uri, ___local, ___qname);
					return;
				case 45:
					if (("root" == ___local) && ("" == ___uri)) {
						state = 46;
						return;
					}
					break;
				case 18:
					if (("inflectFuture" == ___local) && ("" == ___uri)) {
						state = 19;
						return;
					}
					state = 21;
					continue outer;
				case 42:
					if (("ipSource" == ___local) && ("" == ___uri)) {
						state = 43;
						return;
					}
					state = 45;
					continue outer;
				case 39:
					if (("inflectionPattern" == ___local) && ("" == ___uri)) {
						state = 40;
						return;
					}
					break;
				case 12:
					if (("inflectBeinoniConstruct" == ___local)
							&& ("" == ___uri)) {
						state = 13;
						return;
					}
					state = 15;
					continue outer;
				case 36:
					if (("inflectPast" == ___local) && ("" == ___uri)) {
						state = 37;
						return;
					}
					state = 39;
					continue outer;
				case 27:
					if (("inflectInfinitiveb" == ___local) && ("" == ___uri)) {
						state = 28;
						return;
					}
					state = 30;
					continue outer;
				case 0:
					if (("binyan" == ___local) && ("" == ___uri)) {
						state = 1;
						return;
					}
					state = 3;
					continue outer;
				case 21:
					if (("inflectImperative" == ___local) && ("" == ___uri)) {
						state = 22;
						return;
					}
					state = 24;
					continue outer;
				case 24:
					if (("inflectInfinitiveIndependent" == ___local)
							&& ("" == ___uri)) {
						state = 25;
						return;
					}
					state = 27;
					continue outer;
				case 15:
					if (("inflectBeinoniPossessive" == ___local)
							&& ("" == ___uri)) {
						state = 16;
						return;
					}
					state = 18;
					continue outer;
				case 3:
					if (("feminine" == ___local) && ("" == ___uri)) {
						state = 4;
						return;
					}
					state = 6;
					continue outer;
				case 9:
					if (("inflectBeinoni" == ___local) && ("" == ___uri)) {
						state = 10;
						return;
					}
					state = 12;
					continue outer;
				case 6:
					if (("foreign" == ___local) && ("" == ___uri)) {
						state = 7;
						return;
					}
					state = 9;
					continue outer;
				case 48:
					if (("valence" == ___local) && ("" == ___uri)) {
						state = 49;
						return;
					}
					state = 51;
					continue outer;
				case 51:
					state = 52;
					continue outer;
				case 33:
					if (("inflectOrigin" == ___local) && ("" == ___uri)) {
						state = 34;
						return;
					}
					state = 36;
					continue outer;
				}
				super.enterAttribute(___uri, ___local, ___qname);
				break;
			}
		}

		@Override
		public void enterElement(java.lang.String ___uri,
				java.lang.String ___local, java.lang.String ___qname,
				org.xml.sax.Attributes __atts) throws org.xml.sax.SAXException {
			int attIdx;
			outer: while (true) {
				switch (state) {
				case 30:
					attIdx = context.getAttribute("", "inflectInfinitivel");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 33;
						eatText1(v);
						continue outer;
					}
					state = 33;
					continue outer;
				case 52:
					if (("add" == ___local) && ("" == ___uri)) {
						_getAddOrReplaceOrRemove()
								.add(spawnChildFromEnterElement(
										(mila.generated.impl.VerbLexiconTypeImpl.AddImpl.class),
										52, ___uri, ___local, ___qname, __atts));
						return;
					}
					if (("replace" == ___local) && ("" == ___uri)) {
						_getAddOrReplaceOrRemove()
								.add(spawnChildFromEnterElement(
										(mila.generated.impl.VerbLexiconTypeImpl.ReplaceImpl.class),
										52, ___uri, ___local, ___qname, __atts));
						return;
					}
					if (("remove" == ___local) && ("" == ___uri)) {
						_getAddOrReplaceOrRemove()
								.add(spawnChildFromEnterElement(
										(mila.generated.impl.VerbLexiconTypeImpl.RemoveImpl.class),
										52, ___uri, ___local, ___qname, __atts));
						return;
					}
					revertToParentFromEnterElement(___uri, ___local, ___qname,
							__atts);
					return;
				case 45:
					attIdx = context.getAttribute("", "root");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 48;
						eatText2(v);
						continue outer;
					}
					break;
				case 18:
					attIdx = context.getAttribute("", "inflectFuture");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 21;
						eatText3(v);
						continue outer;
					}
					state = 21;
					continue outer;
				case 42:
					attIdx = context.getAttribute("", "ipSource");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 45;
						eatText4(v);
						continue outer;
					}
					state = 45;
					continue outer;
				case 39:
					attIdx = context.getAttribute("", "inflectionPattern");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 42;
						eatText5(v);
						continue outer;
					}
					break;
				case 12:
					attIdx = context
							.getAttribute("", "inflectBeinoniConstruct");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 15;
						eatText6(v);
						continue outer;
					}
					state = 15;
					continue outer;
				case 36:
					attIdx = context.getAttribute("", "inflectPast");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 39;
						eatText7(v);
						continue outer;
					}
					state = 39;
					continue outer;
				case 27:
					attIdx = context.getAttribute("", "inflectInfinitiveb");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 30;
						eatText8(v);
						continue outer;
					}
					state = 30;
					continue outer;
				case 0:
					attIdx = context.getAttribute("", "binyan");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 3;
						eatText9(v);
						continue outer;
					}
					state = 3;
					continue outer;
				case 21:
					attIdx = context.getAttribute("", "inflectImperative");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 24;
						eatText10(v);
						continue outer;
					}
					state = 24;
					continue outer;
				case 24:
					attIdx = context.getAttribute("",
							"inflectInfinitiveIndependent");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 27;
						eatText11(v);
						continue outer;
					}
					state = 27;
					continue outer;
				case 15:
					attIdx = context.getAttribute("",
							"inflectBeinoniPossessive");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 18;
						eatText12(v);
						continue outer;
					}
					state = 18;
					continue outer;
				case 3:
					attIdx = context.getAttribute("", "feminine");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 6;
						eatText13(v);
						continue outer;
					}
					state = 6;
					continue outer;
				case 9:
					attIdx = context.getAttribute("", "inflectBeinoni");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 12;
						eatText14(v);
						continue outer;
					}
					state = 12;
					continue outer;
				case 6:
					attIdx = context.getAttribute("", "foreign");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 9;
						eatText15(v);
						continue outer;
					}
					state = 9;
					continue outer;
				case 48:
					attIdx = context.getAttribute("", "valence");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 51;
						eatText16(v);
						continue outer;
					}
					state = 51;
					continue outer;
				case 51:
					if (("add" == ___local) && ("" == ___uri)) {
						_getAddOrReplaceOrRemove()
								.add(spawnChildFromEnterElement(
										(mila.generated.impl.VerbLexiconTypeImpl.AddImpl.class),
										52, ___uri, ___local, ___qname, __atts));
						return;
					}
					if (("replace" == ___local) && ("" == ___uri)) {
						_getAddOrReplaceOrRemove()
								.add(spawnChildFromEnterElement(
										(mila.generated.impl.VerbLexiconTypeImpl.ReplaceImpl.class),
										52, ___uri, ___local, ___qname, __atts));
						return;
					}
					if (("remove" == ___local) && ("" == ___uri)) {
						_getAddOrReplaceOrRemove()
								.add(spawnChildFromEnterElement(
										(mila.generated.impl.VerbLexiconTypeImpl.RemoveImpl.class),
										52, ___uri, ___local, ___qname, __atts));
						return;
					}
					state = 52;
					continue outer;
				case 33:
					attIdx = context.getAttribute("", "inflectOrigin");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 36;
						eatText17(v);
						continue outer;
					}
					state = 36;
					continue outer;
				}
				super.enterElement(___uri, ___local, ___qname, __atts);
				break;
			}
		}

		@Override
		public void handleText(final java.lang.String value)
				throws org.xml.sax.SAXException {
			int attIdx;
			outer: while (true) {
				try {
					switch (state) {
					case 30:
						attIdx = context.getAttribute("", "inflectInfinitivel");
						if (attIdx >= 0) {
							final java.lang.String v = context
									.eatAttribute(attIdx);
							state = 33;
							eatText1(v);
							continue outer;
						}
						state = 33;
						continue outer;
					case 52:
						revertToParentFromText(value);
						return;
					case 7:
						state = 8;
						eatText15(value);
						return;
					case 10:
						state = 11;
						eatText14(value);
						return;
					case 45:
						attIdx = context.getAttribute("", "root");
						if (attIdx >= 0) {
							final java.lang.String v = context
									.eatAttribute(attIdx);
							state = 48;
							eatText2(v);
							continue outer;
						}
						break;
					case 4:
						state = 5;
						eatText13(value);
						return;
					case 28:
						state = 29;
						eatText8(value);
						return;
					case 18:
						attIdx = context.getAttribute("", "inflectFuture");
						if (attIdx >= 0) {
							final java.lang.String v = context
									.eatAttribute(attIdx);
							state = 21;
							eatText3(v);
							continue outer;
						}
						state = 21;
						continue outer;
					case 42:
						attIdx = context.getAttribute("", "ipSource");
						if (attIdx >= 0) {
							final java.lang.String v = context
									.eatAttribute(attIdx);
							state = 45;
							eatText4(v);
							continue outer;
						}
						state = 45;
						continue outer;
					case 1:
						state = 2;
						eatText9(value);
						return;
					case 49:
						state = 50;
						eatText16(value);
						return;
					case 39:
						attIdx = context.getAttribute("", "inflectionPattern");
						if (attIdx >= 0) {
							final java.lang.String v = context
									.eatAttribute(attIdx);
							state = 42;
							eatText5(v);
							continue outer;
						}
						break;
					case 12:
						attIdx = context.getAttribute("",
								"inflectBeinoniConstruct");
						if (attIdx >= 0) {
							final java.lang.String v = context
									.eatAttribute(attIdx);
							state = 15;
							eatText6(v);
							continue outer;
						}
						state = 15;
						continue outer;
					case 36:
						attIdx = context.getAttribute("", "inflectPast");
						if (attIdx >= 0) {
							final java.lang.String v = context
									.eatAttribute(attIdx);
							state = 39;
							eatText7(v);
							continue outer;
						}
						state = 39;
						continue outer;
					case 27:
						attIdx = context.getAttribute("", "inflectInfinitiveb");
						if (attIdx >= 0) {
							final java.lang.String v = context
									.eatAttribute(attIdx);
							state = 30;
							eatText8(v);
							continue outer;
						}
						state = 30;
						continue outer;
					case 25:
						state = 26;
						eatText11(value);
						return;
					case 0:
						attIdx = context.getAttribute("", "binyan");
						if (attIdx >= 0) {
							final java.lang.String v = context
									.eatAttribute(attIdx);
							state = 3;
							eatText9(v);
							continue outer;
						}
						state = 3;
						continue outer;
					case 16:
						state = 17;
						eatText12(value);
						return;
					case 34:
						state = 35;
						eatText17(value);
						return;
					case 21:
						attIdx = context.getAttribute("", "inflectImperative");
						if (attIdx >= 0) {
							final java.lang.String v = context
									.eatAttribute(attIdx);
							state = 24;
							eatText10(v);
							continue outer;
						}
						state = 24;
						continue outer;
					case 31:
						state = 32;
						eatText1(value);
						return;
					case 24:
						attIdx = context.getAttribute("",
								"inflectInfinitiveIndependent");
						if (attIdx >= 0) {
							final java.lang.String v = context
									.eatAttribute(attIdx);
							state = 27;
							eatText11(v);
							continue outer;
						}
						state = 27;
						continue outer;
					case 15:
						attIdx = context.getAttribute("",
								"inflectBeinoniPossessive");
						if (attIdx >= 0) {
							final java.lang.String v = context
									.eatAttribute(attIdx);
							state = 18;
							eatText12(v);
							continue outer;
						}
						state = 18;
						continue outer;
					case 3:
						attIdx = context.getAttribute("", "feminine");
						if (attIdx >= 0) {
							final java.lang.String v = context
									.eatAttribute(attIdx);
							state = 6;
							eatText13(v);
							continue outer;
						}
						state = 6;
						continue outer;
					case 22:
						state = 23;
						eatText10(value);
						return;
					case 9:
						attIdx = context.getAttribute("", "inflectBeinoni");
						if (attIdx >= 0) {
							final java.lang.String v = context
									.eatAttribute(attIdx);
							state = 12;
							eatText14(v);
							continue outer;
						}
						state = 12;
						continue outer;
					case 37:
						state = 38;
						eatText7(value);
						return;
					case 40:
						state = 41;
						eatText5(value);
						return;
					case 46:
						state = 47;
						eatText2(value);
						return;
					case 6:
						attIdx = context.getAttribute("", "foreign");
						if (attIdx >= 0) {
							final java.lang.String v = context
									.eatAttribute(attIdx);
							state = 9;
							eatText15(v);
							continue outer;
						}
						state = 9;
						continue outer;
					case 48:
						attIdx = context.getAttribute("", "valence");
						if (attIdx >= 0) {
							final java.lang.String v = context
									.eatAttribute(attIdx);
							state = 51;
							eatText16(v);
							continue outer;
						}
						state = 51;
						continue outer;
					case 51:
						state = 52;
						continue outer;
					case 33:
						attIdx = context.getAttribute("", "inflectOrigin");
						if (attIdx >= 0) {
							final java.lang.String v = context
									.eatAttribute(attIdx);
							state = 36;
							eatText17(v);
							continue outer;
						}
						state = 36;
						continue outer;
					case 43:
						state = 44;
						eatText4(value);
						return;
					case 19:
						state = 20;
						eatText3(value);
						return;
					case 13:
						state = 14;
						eatText6(value);
						return;
					}
				} catch (java.lang.RuntimeException e) {
					handleUnexpectedTextException(value, e);
				}
				break;
			}
		}

		@Override
		public void leaveAttribute(java.lang.String ___uri,
				java.lang.String ___local, java.lang.String ___qname)
				throws org.xml.sax.SAXException {
			int attIdx;
			outer: while (true) {
				switch (state) {
				case 30:
					attIdx = context.getAttribute("", "inflectInfinitivel");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 33;
						eatText1(v);
						continue outer;
					}
					state = 33;
					continue outer;
				case 52:
					revertToParentFromLeaveAttribute(___uri, ___local, ___qname);
					return;
				case 8:
					if (("foreign" == ___local) && ("" == ___uri)) {
						state = 9;
						return;
					}
					break;
				case 17:
					if (("inflectBeinoniPossessive" == ___local)
							&& ("" == ___uri)) {
						state = 18;
						return;
					}
					break;
				case 14:
					if (("inflectBeinoniConstruct" == ___local)
							&& ("" == ___uri)) {
						state = 15;
						return;
					}
					break;
				case 45:
					attIdx = context.getAttribute("", "root");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 48;
						eatText2(v);
						continue outer;
					}
					break;
				case 47:
					if (("root" == ___local) && ("" == ___uri)) {
						state = 48;
						return;
					}
					break;
				case 44:
					if (("ipSource" == ___local) && ("" == ___uri)) {
						state = 45;
						return;
					}
					break;
				case 18:
					attIdx = context.getAttribute("", "inflectFuture");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 21;
						eatText3(v);
						continue outer;
					}
					state = 21;
					continue outer;
				case 42:
					attIdx = context.getAttribute("", "ipSource");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 45;
						eatText4(v);
						continue outer;
					}
					state = 45;
					continue outer;
				case 39:
					attIdx = context.getAttribute("", "inflectionPattern");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 42;
						eatText5(v);
						continue outer;
					}
					break;
				case 12:
					attIdx = context
							.getAttribute("", "inflectBeinoniConstruct");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 15;
						eatText6(v);
						continue outer;
					}
					state = 15;
					continue outer;
				case 38:
					if (("inflectPast" == ___local) && ("" == ___uri)) {
						state = 39;
						return;
					}
					break;
				case 36:
					attIdx = context.getAttribute("", "inflectPast");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 39;
						eatText7(v);
						continue outer;
					}
					state = 39;
					continue outer;
				case 27:
					attIdx = context.getAttribute("", "inflectInfinitiveb");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 30;
						eatText8(v);
						continue outer;
					}
					state = 30;
					continue outer;
				case 5:
					if (("feminine" == ___local) && ("" == ___uri)) {
						state = 6;
						return;
					}
					break;
				case 0:
					attIdx = context.getAttribute("", "binyan");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 3;
						eatText9(v);
						continue outer;
					}
					state = 3;
					continue outer;
				case 29:
					if (("inflectInfinitiveb" == ___local) && ("" == ___uri)) {
						state = 30;
						return;
					}
					break;
				case 35:
					if (("inflectOrigin" == ___local) && ("" == ___uri)) {
						state = 36;
						return;
					}
					break;
				case 41:
					if (("inflectionPattern" == ___local) && ("" == ___uri)) {
						state = 42;
						return;
					}
					break;
				case 21:
					attIdx = context.getAttribute("", "inflectImperative");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 24;
						eatText10(v);
						continue outer;
					}
					state = 24;
					continue outer;
				case 23:
					if (("inflectImperative" == ___local) && ("" == ___uri)) {
						state = 24;
						return;
					}
					break;
				case 2:
					if (("binyan" == ___local) && ("" == ___uri)) {
						state = 3;
						return;
					}
					break;
				case 24:
					attIdx = context.getAttribute("",
							"inflectInfinitiveIndependent");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 27;
						eatText11(v);
						continue outer;
					}
					state = 27;
					continue outer;
				case 15:
					attIdx = context.getAttribute("",
							"inflectBeinoniPossessive");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 18;
						eatText12(v);
						continue outer;
					}
					state = 18;
					continue outer;
				case 3:
					attIdx = context.getAttribute("", "feminine");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 6;
						eatText13(v);
						continue outer;
					}
					state = 6;
					continue outer;
				case 9:
					attIdx = context.getAttribute("", "inflectBeinoni");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 12;
						eatText14(v);
						continue outer;
					}
					state = 12;
					continue outer;
				case 26:
					if (("inflectInfinitiveIndependent" == ___local)
							&& ("" == ___uri)) {
						state = 27;
						return;
					}
					break;
				case 6:
					attIdx = context.getAttribute("", "foreign");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 9;
						eatText15(v);
						continue outer;
					}
					state = 9;
					continue outer;
				case 50:
					if (("valence" == ___local) && ("" == ___uri)) {
						state = 51;
						return;
					}
					break;
				case 48:
					attIdx = context.getAttribute("", "valence");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 51;
						eatText16(v);
						continue outer;
					}
					state = 51;
					continue outer;
				case 51:
					state = 52;
					continue outer;
				case 20:
					if (("inflectFuture" == ___local) && ("" == ___uri)) {
						state = 21;
						return;
					}
					break;
				case 33:
					attIdx = context.getAttribute("", "inflectOrigin");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 36;
						eatText17(v);
						continue outer;
					}
					state = 36;
					continue outer;
				case 11:
					if (("inflectBeinoni" == ___local) && ("" == ___uri)) {
						state = 12;
						return;
					}
					break;
				case 32:
					if (("inflectInfinitivel" == ___local) && ("" == ___uri)) {
						state = 33;
						return;
					}
					break;
				}
				super.leaveAttribute(___uri, ___local, ___qname);
				break;
			}
		}

		@Override
		public void leaveElement(java.lang.String ___uri,
				java.lang.String ___local, java.lang.String ___qname)
				throws org.xml.sax.SAXException {
			int attIdx;
			outer: while (true) {
				switch (state) {
				case 30:
					attIdx = context.getAttribute("", "inflectInfinitivel");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 33;
						eatText1(v);
						continue outer;
					}
					state = 33;
					continue outer;
				case 52:
					revertToParentFromLeaveElement(___uri, ___local, ___qname);
					return;
				case 45:
					attIdx = context.getAttribute("", "root");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 48;
						eatText2(v);
						continue outer;
					}
					break;
				case 18:
					attIdx = context.getAttribute("", "inflectFuture");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 21;
						eatText3(v);
						continue outer;
					}
					state = 21;
					continue outer;
				case 42:
					attIdx = context.getAttribute("", "ipSource");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 45;
						eatText4(v);
						continue outer;
					}
					state = 45;
					continue outer;
				case 39:
					attIdx = context.getAttribute("", "inflectionPattern");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 42;
						eatText5(v);
						continue outer;
					}
					break;
				case 12:
					attIdx = context
							.getAttribute("", "inflectBeinoniConstruct");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 15;
						eatText6(v);
						continue outer;
					}
					state = 15;
					continue outer;
				case 36:
					attIdx = context.getAttribute("", "inflectPast");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 39;
						eatText7(v);
						continue outer;
					}
					state = 39;
					continue outer;
				case 27:
					attIdx = context.getAttribute("", "inflectInfinitiveb");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 30;
						eatText8(v);
						continue outer;
					}
					state = 30;
					continue outer;
				case 0:
					attIdx = context.getAttribute("", "binyan");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 3;
						eatText9(v);
						continue outer;
					}
					state = 3;
					continue outer;
				case 21:
					attIdx = context.getAttribute("", "inflectImperative");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 24;
						eatText10(v);
						continue outer;
					}
					state = 24;
					continue outer;
				case 24:
					attIdx = context.getAttribute("",
							"inflectInfinitiveIndependent");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 27;
						eatText11(v);
						continue outer;
					}
					state = 27;
					continue outer;
				case 15:
					attIdx = context.getAttribute("",
							"inflectBeinoniPossessive");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 18;
						eatText12(v);
						continue outer;
					}
					state = 18;
					continue outer;
				case 3:
					attIdx = context.getAttribute("", "feminine");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 6;
						eatText13(v);
						continue outer;
					}
					state = 6;
					continue outer;
				case 9:
					attIdx = context.getAttribute("", "inflectBeinoni");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 12;
						eatText14(v);
						continue outer;
					}
					state = 12;
					continue outer;
				case 6:
					attIdx = context.getAttribute("", "foreign");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 9;
						eatText15(v);
						continue outer;
					}
					state = 9;
					continue outer;
				case 48:
					attIdx = context.getAttribute("", "valence");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 51;
						eatText16(v);
						continue outer;
					}
					state = 51;
					continue outer;
				case 51:
					state = 52;
					continue outer;
				case 33:
					attIdx = context.getAttribute("", "inflectOrigin");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 36;
						eatText17(v);
						continue outer;
					}
					state = 36;
					continue outer;
				}
				super.leaveElement(___uri, ___local, ___qname);
				break;
			}
		}

		@Override
		public java.lang.Object owner() {
			return mila.generated.impl.VerbLexiconTypeImpl.this;
		}

	}

	protected java.lang.String _Feminine;
	protected boolean has_InflectInfinitiveIndependent;
	protected boolean _InflectInfinitiveIndependent;
	protected boolean has_InflectFuture;
	protected boolean _InflectFuture;
	protected boolean has_InflectBeinoniConstruct;
	protected boolean _InflectBeinoniConstruct;
	protected boolean has_InflectBeinoniPossessive;
	protected boolean _InflectBeinoniPossessive;
	protected java.lang.String _IpSource;
	protected boolean has_Foreign;
	protected boolean _Foreign;
	protected java.lang.String _InflectionPattern;
	protected boolean has_InflectBeinoni;
	protected boolean _InflectBeinoni;
	protected boolean has_InflectInfinitivel;
	protected boolean _InflectInfinitivel;
	protected java.lang.String _Valence;
	protected boolean has_InflectOrigin;
	protected boolean _InflectOrigin;
	protected java.lang.String _Root;
	protected boolean has_InflectPast;
	protected boolean _InflectPast;
	protected com.sun.xml.bind.util.ListImpl _AddOrReplaceOrRemove;
	protected java.lang.String _Binyan;
	protected boolean has_InflectImperative;
	protected boolean _InflectImperative;

	protected boolean has_InflectInfinitiveb;

	protected boolean _InflectInfinitiveb;

	public final static java.lang.Class version = (mila.generated.impl.JAXBVersion.class);

	private static com.sun.msv.grammar.Grammar schemaFragment;

	private final static java.lang.Class PRIMARY_INTERFACE_CLASS() {
		return (mila.generated.VerbLexiconType.class);
	}

	protected com.sun.xml.bind.util.ListImpl _getAddOrReplaceOrRemove() {
		if (_AddOrReplaceOrRemove == null) {
			_AddOrReplaceOrRemove = new com.sun.xml.bind.util.ListImpl(
					new java.util.ArrayList());
		}
		return _AddOrReplaceOrRemove;
	}

	@Override
	public com.sun.msv.verifier.DocumentDeclaration createRawValidator() {
		if (schemaFragment == null) {
			schemaFragment = com.sun.xml.bind.validator.SchemaDeserializer
					.deserialize(("\u00ac\u00ed\u0000\u0005sr\u0000\u001fcom.sun.msv.grammar.SequenceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.su"
							+ "n.msv.grammar.BinaryExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0004exp1t\u0000 Lcom/sun/msv/gra"
							+ "mmar/Expression;L\u0000\u0004exp2q\u0000~\u0000\u0002xr\u0000\u001ecom.sun.msv.grammar.Expressi"
							+ "on\u00f8\u0018\u0082\u00e8N5~O\u0002\u0000\u0002L\u0000\u0013epsilonReducibilityt\u0000\u0013Ljava/lang/Boolean;L\u0000\u000b"
							+ "expandedExpq\u0000~\u0000\u0002xpppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000pp"
							+ "sq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~"
							+ "\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsr\u0000 com.sun.msv.grammar.OneOrMor"
							+ "eExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001ccom.sun.msv.grammar.UnaryExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000"
							+ "\u0003expq\u0000~\u0000\u0002xq\u0000~\u0000\u0003ppsr\u0000\u001dcom.sun.msv.grammar.ChoiceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000"
							+ "\u0000xq\u0000~\u0000\u0001ppsq\u0000~\u0000\u0019ppsq\u0000~\u0000\u0019ppsq\u0000~\u0000\u0016sr\u0000\u0011java.lang.Boolean\u00cd r\u0080\u00d5\u009c\u00fa\u00ee"
							+ "\u0002\u0000\u0001Z\u0000\u0005valuexp\u0000psr\u0000\'com.sun.msv.grammar.trex.ElementPattern\u0000\u0000"
							+ "\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\tnameClasst\u0000\u001fLcom/sun/msv/grammar/NameClass;xr\u0000\u001ec"
							+ "om.sun.msv.grammar.ElementExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002Z\u0000\u001aignoreUndeclaredA"
							+ "ttributesL\u0000\fcontentModelq\u0000~\u0000\u0002xq\u0000~\u0000\u0003q\u0000~\u0000\u001fp\u0000sq\u0000~\u0000\u0019ppsq\u0000~\u0000\u0016q\u0000~\u0000"
							+ "\u001fpsr\u0000 com.sun.msv.grammar.AttributeExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0003expq\u0000~\u0000\u0002"
							+ "L\u0000\tnameClassq\u0000~\u0000!xq\u0000~\u0000\u0003q\u0000~\u0000\u001fpsr\u00002com.sun.msv.grammar.Express"
							+ "ion$AnyStringExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003sq\u0000~\u0000\u001e\u0001q\u0000~\u0000)sr\u0000 com."
							+ "sun.msv.grammar.AnyNameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.sun.msv.gramm"
							+ "ar.NameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xpsr\u00000com.sun.msv.grammar.Expression$"
							+ "EpsilonExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003q\u0000~\u0000*q\u0000~\u0000/sr\u0000#com.sun.msv."
							+ "grammar.SimpleNameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\tlocalNamet\u0000\u0012Ljava/lang/"
							+ "String;L\u0000\fnamespaceURIq\u0000~\u00001xq\u0000~\u0000,t\u0000\u001dgenerated.VerbLexiconTyp"
							+ "e.Addt\u0000+http://java.sun.com/jaxb/xjc/dummy-elementsq\u0000~\u0000/sq\u0000~"
							+ "\u0000\u0016ppsq\u0000~\u0000 pp\u0000sq\u0000~\u0000\u0019ppsq\u0000~\u0000\u0016q\u0000~\u0000\u001fpsq\u0000~\u0000&q\u0000~\u0000\u001fpq\u0000~\u0000)q\u0000~\u0000-q\u0000~\u0000/"
							+ "sq\u0000~\u00000t\u0000!generated.VerbLexiconType.Replaceq\u0000~\u00004sq\u0000~\u0000\u0016ppsq\u0000~\u0000"
							+ " pp\u0000sq\u0000~\u0000\u0019ppsq\u0000~\u0000\u0016q\u0000~\u0000\u001fpsq\u0000~\u0000&q\u0000~\u0000\u001fpq\u0000~\u0000)q\u0000~\u0000-q\u0000~\u0000/sq\u0000~\u00000t\u0000 "
							+ "generated.VerbLexiconType.Removeq\u0000~\u00004sq\u0000~\u0000\u0019ppsq\u0000~\u0000&q\u0000~\u0000\u001fpsr\u0000"
							+ "\u001bcom.sun.msv.grammar.DataExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\u0002dtt\u0000\u001fLorg/relaxng/"
							+ "datatype/Datatype;L\u0000\u0006exceptq\u0000~\u0000\u0002L\u0000\u0004namet\u0000\u001dLcom/sun/msv/util/"
							+ "StringPair;xq\u0000~\u0000\u0003ppsr\u0000)com.sun.msv.datatype.xsd.EnumerationF"
							+ "acet\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\u0006valuest\u0000\u000fLjava/util/Set;xr\u00009com.sun.msv.da"
							+ "tatype.xsd.DataTypeWithValueConstraintFacet\"\u00a7Ro\u00ca\u00c7\u008aT\u0002\u0000\u0000xr\u0000*co"
							+ "m.sun.msv.datatype.xsd.DataTypeWithFacet\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0005Z\u0000\fisFace"
							+ "tFixedZ\u0000\u0012needValueCheckFlagL\u0000\bbaseTypet\u0000)Lcom/sun/msv/dataty"
							+ "pe/xsd/XSDatatypeImpl;L\u0000\fconcreteTypet\u0000\'Lcom/sun/msv/datatyp"
							+ "e/xsd/ConcreteType;L\u0000\tfacetNameq\u0000~\u00001xr\u0000\'com.sun.msv.datatype"
							+ ".xsd.XSDatatypeImpl\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\fnamespaceUriq\u0000~\u00001L\u0000\btypeNam"
							+ "eq\u0000~\u00001L\u0000\nwhiteSpacet\u0000.Lcom/sun/msv/datatype/xsd/WhiteSpacePr"
							+ "ocessor;xpt\u0000\u0000t\u0000\nBinyanTypesr\u00005com.sun.msv.datatype.xsd.White"
							+ "SpaceProcessor$Collapse\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000,com.sun.msv.datatype.x"
							+ "sd.WhiteSpaceProcessor\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xp\u0000\u0000sr\u0000\"com.sun.msv.datatyp"
							+ "e.xsd.TokenType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000#com.sun.msv.datatype.xsd.Strin"
							+ "gType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001Z\u0000\risAlwaysValidxr\u0000*com.sun.msv.datatype.xsd"
							+ ".BuiltinAtomicType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000%com.sun.msv.datatype.xsd.Co"
							+ "ncreteType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000Ot\u0000 http://www.w3.org/2001/XMLSche"
							+ "mat\u0000\u0005tokenq\u0000~\u0000V\u0001q\u0000~\u0000[t\u0000\u000benumerationsr\u0000\u0011java.util.HashSet\u00baD\u0085\u0095"
							+ "\u0096\u00b8\u00b74\u0003\u0000\u0000xpw\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\bt\u0000\u000bunspecifiedt\u0000\u0006Nif\'alt\u0000\u0006Hif\'ilt\u0000\bHi"
							+ "tpa\'elt\u0000\u0005Pa\'alt\u0000\u0006Huf\'alt\u0000\u0005Pu\'alt\u0000\u0005Pi\'elxsr\u00000com.sun.msv.gram"
							+ "mar.Expression$NullSetExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003ppsr\u0000\u001bcom.s"
							+ "un.msv.util.StringPair\u00d0t\u001ejB\u008f\u008d\u00a0\u0002\u0000\u0002L\u0000\tlocalNameq\u0000~\u00001L\u0000\fnamespa"
							+ "ceURIq\u0000~\u00001xpq\u0000~\u0000Sq\u0000~\u0000Rsq\u0000~\u00000t\u0000\u0006binyanq\u0000~\u0000Rq\u0000~\u0000/sq\u0000~\u0000\u0019ppsq\u0000~\u0000"
							+ "&q\u0000~\u0000\u001fpsq\u0000~\u0000Eppsq\u0000~\u0000Iq\u0000~\u0000Rt\u0000\fFeminineTypeq\u0000~\u0000V\u0000\u0000q\u0000~\u0000[q\u0000~\u0000[q\u0000"
							+ "~\u0000^sq\u0000~\u0000_w\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\u0004t\u0000\u000bunspecifiedt\u0000\u0002itt\u0000\u0001ht\u0000\u0001txq\u0000~\u0000jsq\u0000~"
							+ "\u0000kq\u0000~\u0000sq\u0000~\u0000Rsq\u0000~\u00000t\u0000\bfeminineq\u0000~\u0000Rq\u0000~\u0000/sq\u0000~\u0000\u0019ppsq\u0000~\u0000&q\u0000~\u0000\u001fps"
							+ "q\u0000~\u0000Eppsr\u0000$com.sun.msv.datatype.xsd.BooleanType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq"
							+ "\u0000~\u0000Yq\u0000~\u0000\\t\u0000\u0007booleanq\u0000~\u0000Vq\u0000~\u0000jsq\u0000~\u0000kq\u0000~\u0000\u0081q\u0000~\u0000\\sq\u0000~\u00000t\u0000\u0007foreig"
							+ "nq\u0000~\u0000Rq\u0000~\u0000/sq\u0000~\u0000\u0019ppsq\u0000~\u0000&q\u0000~\u0000\u001fpq\u0000~\u0000~sq\u0000~\u00000t\u0000\u000einflectBeinoniq"
							+ "\u0000~\u0000Rq\u0000~\u0000/sq\u0000~\u0000\u0019ppsq\u0000~\u0000&q\u0000~\u0000\u001fpq\u0000~\u0000~sq\u0000~\u00000t\u0000\u0017inflectBeinoniCon"
							+ "structq\u0000~\u0000Rq\u0000~\u0000/sq\u0000~\u0000\u0019ppsq\u0000~\u0000&q\u0000~\u0000\u001fpq\u0000~\u0000~sq\u0000~\u00000t\u0000\u0018inflectBei"
							+ "noniPossessiveq\u0000~\u0000Rq\u0000~\u0000/sq\u0000~\u0000\u0019ppsq\u0000~\u0000&q\u0000~\u0000\u001fpq\u0000~\u0000~sq\u0000~\u00000t\u0000\rin"
							+ "flectFutureq\u0000~\u0000Rq\u0000~\u0000/sq\u0000~\u0000\u0019ppsq\u0000~\u0000&q\u0000~\u0000\u001fpq\u0000~\u0000~sq\u0000~\u00000t\u0000\u0011infle"
							+ "ctImperativeq\u0000~\u0000Rq\u0000~\u0000/sq\u0000~\u0000\u0019ppsq\u0000~\u0000&q\u0000~\u0000\u001fpq\u0000~\u0000~sq\u0000~\u00000t\u0000\u001cinfl"
							+ "ectInfinitiveIndependentq\u0000~\u0000Rq\u0000~\u0000/sq\u0000~\u0000\u0019ppsq\u0000~\u0000&q\u0000~\u0000\u001fpq\u0000~\u0000~s"
							+ "q\u0000~\u00000t\u0000\u0012inflectInfinitivebq\u0000~\u0000Rq\u0000~\u0000/sq\u0000~\u0000\u0019ppsq\u0000~\u0000&q\u0000~\u0000\u001fpq\u0000~\u0000"
							+ "~sq\u0000~\u00000t\u0000\u0012inflectInfinitivelq\u0000~\u0000Rq\u0000~\u0000/sq\u0000~\u0000\u0019ppsq\u0000~\u0000&q\u0000~\u0000\u001fpq\u0000"
							+ "~\u0000~sq\u0000~\u00000t\u0000\rinflectOriginq\u0000~\u0000Rq\u0000~\u0000/sq\u0000~\u0000\u0019ppsq\u0000~\u0000&q\u0000~\u0000\u001fpq\u0000~\u0000~"
							+ "sq\u0000~\u00000t\u0000\u000binflectPastq\u0000~\u0000Rq\u0000~\u0000/sq\u0000~\u0000&ppsq\u0000~\u0000Eppq\u0000~\u0000[q\u0000~\u0000jsq\u0000~"
							+ "\u0000kq\u0000~\u0000]q\u0000~\u0000\\sq\u0000~\u00000t\u0000\u0011inflectionPatternq\u0000~\u0000Rsq\u0000~\u0000\u0019ppsq\u0000~\u0000&q\u0000~"
							+ "\u0000\u001fpq\u0000~\u0000\u00aesq\u0000~\u00000t\u0000\bipSourceq\u0000~\u0000Rq\u0000~\u0000/sq\u0000~\u0000&ppq\u0000~\u0000\u00aesq\u0000~\u00000t\u0000\u0004roo"
							+ "tq\u0000~\u0000Rsq\u0000~\u0000\u0019ppsq\u0000~\u0000&q\u0000~\u0000\u001fpsq\u0000~\u0000Eppsq\u0000~\u0000Iq\u0000~\u0000Rt\u0000\u000bValenceTypeq"
							+ "\u0000~\u0000V\u0000\u0000q\u0000~\u0000[q\u0000~\u0000[q\u0000~\u0000^sq\u0000~\u0000_w\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\bt\u0000\u000bunspecifiedt\u0000\u0012tr"
							+ "ansitiveWithPault\u0000\u0017intransitiveWithoutPault\u0000\u0015transitiveWitho"
							+ "utPault\u0000\ntransitivet\u0000\u0014intransitiveWithPault\u0000\fintransitivet\u0000\f"
							+ "ditransitivexq\u0000~\u0000jsq\u0000~\u0000kq\u0000~\u0000\u00bdq\u0000~\u0000Rsq\u0000~\u00000t\u0000\u0007valenceq\u0000~\u0000Rq\u0000~\u0000/"
							+ "sr\u0000\"com.sun.msv.grammar.ExpressionPool\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\bexpTable"
							+ "t\u0000/Lcom/sun/msv/grammar/ExpressionPool$ClosedHash;xpsr\u0000-com."
							+ "sun.msv.grammar.ExpressionPool$ClosedHash\u00d7j\u00d0N\u00ef\u00e8\u00ed\u001c\u0003\u0000\u0003I\u0000\u0005count"
							+ "B\u0000\rstreamVersionL\u0000\u0006parentt\u0000$Lcom/sun/msv/grammar/ExpressionP"
							+ "ool;xp\u0000\u0000\u0000-\u0001pq\u0000~\u0000\u0091q\u0000~\u0000\u000eq\u0000~\u0000\u0007q\u0000~\u0000\rq\u0000~\u0000%q\u0000~\u00008q\u0000~\u0000?q\u0000~\u0000\u0099q\u0000~\u0000\u001bq\u0000~"
							+ "\u0000\u0014q\u0000~\u0000oq\u0000~\u0000\bq\u0000~\u0000\u001aq\u0000~\u0000\u0012q\u0000~\u0000|q\u0000~\u0000\u008dq\u0000~\u0000\u00a1q\u0000~\u0000\u009dq\u0000~\u0000$q\u0000~\u00007q\u0000~\u0000>q\u0000~"
							+ "\u0000\u0013q\u0000~\u0000\u00a9q\u0000~\u0000\u0005q\u0000~\u0000\u0010q\u0000~\u0000\nq\u0000~\u0000\u0011q\u0000~\u0000\u000fq\u0000~\u0000\u001dq\u0000~\u00005q\u0000~\u0000<q\u0000~\u0000\fq\u0000~\u0000\u0006q\u0000~"
							+ "\u0000\u00b9q\u0000~\u0000\u0018q\u0000~\u0000\u0095q\u0000~\u0000Cq\u0000~\u0000\u0089q\u0000~\u0000\u00b2q\u0000~\u0000\u0085q\u0000~\u0000\tq\u0000~\u0000\u000bq\u0000~\u0000\u001cq\u0000~\u0000\u0015q\u0000~\u0000\u00a5x"));
		}
		return new com.sun.msv.verifier.regexp.REDocumentDeclaration(
				schemaFragment);
	}

	@Override
	public mila.generated.impl.runtime.UnmarshallingEventHandler createUnmarshaller(
			mila.generated.impl.runtime.UnmarshallingContext context) {
		return new mila.generated.impl.VerbLexiconTypeImpl.Unmarshaller(context);
	}

	@Override
	public java.util.List getAddOrReplaceOrRemove() {
		return _getAddOrReplaceOrRemove();
	}

	@Override
	public java.lang.String getBinyan() {
		if (_Binyan == null) {
			return "unspecified";
		} else {
			return _Binyan;
		}
	}

	@Override
	public java.lang.String getFeminine() {
		if (_Feminine == null) {
			return "unspecified";
		} else {
			return _Feminine;
		}
	}

	@Override
	public java.lang.String getInflectionPattern() {
		return _InflectionPattern;
	}

	@Override
	public java.lang.String getIpSource() {
		if (_IpSource == null) {
			return "Mila";
		} else {
			return _IpSource;
		}
	}

	@Override
	public java.lang.Class getPrimaryInterface() {
		return (mila.generated.VerbLexiconType.class);
	}

	@Override
	public java.lang.String getRoot() {
		return _Root;
	}

	@Override
	public java.lang.String getValence() {
		if (_Valence == null) {
			return "unspecified";
		} else {
			return _Valence;
		}
	}

	@Override
	public boolean isForeign() {
		if (!has_Foreign) {
			return javax.xml.bind.DatatypeConverter
					.parseBoolean(com.sun.xml.bind.DatatypeConverterImpl
							.installHook("false"));
		} else {
			return _Foreign;
		}
	}

	@Override
	public boolean isInflectBeinoni() {
		if (!has_InflectBeinoni) {
			return javax.xml.bind.DatatypeConverter
					.parseBoolean(com.sun.xml.bind.DatatypeConverterImpl
							.installHook("true"));
		} else {
			return _InflectBeinoni;
		}
	}

	@Override
	public boolean isInflectBeinoniConstruct() {
		if (!has_InflectBeinoniConstruct) {
			return javax.xml.bind.DatatypeConverter
					.parseBoolean(com.sun.xml.bind.DatatypeConverterImpl
							.installHook("true"));
		} else {
			return _InflectBeinoniConstruct;
		}
	}

	@Override
	public boolean isInflectBeinoniPossessive() {
		if (!has_InflectBeinoniPossessive) {
			return javax.xml.bind.DatatypeConverter
					.parseBoolean(com.sun.xml.bind.DatatypeConverterImpl
							.installHook("true"));
		} else {
			return _InflectBeinoniPossessive;
		}
	}

	@Override
	public boolean isInflectFuture() {
		if (!has_InflectFuture) {
			return javax.xml.bind.DatatypeConverter
					.parseBoolean(com.sun.xml.bind.DatatypeConverterImpl
							.installHook("true"));
		} else {
			return _InflectFuture;
		}
	}

	@Override
	public boolean isInflectImperative() {
		if (!has_InflectImperative) {
			return javax.xml.bind.DatatypeConverter
					.parseBoolean(com.sun.xml.bind.DatatypeConverterImpl
							.installHook("true"));
		} else {
			return _InflectImperative;
		}
	}

	@Override
	public boolean isInflectInfinitiveb() {
		if (!has_InflectInfinitiveb) {
			return javax.xml.bind.DatatypeConverter
					.parseBoolean(com.sun.xml.bind.DatatypeConverterImpl
							.installHook("true"));
		} else {
			return _InflectInfinitiveb;
		}
	}

	@Override
	public boolean isInflectInfinitiveIndependent() {
		if (!has_InflectInfinitiveIndependent) {
			return javax.xml.bind.DatatypeConverter
					.parseBoolean(com.sun.xml.bind.DatatypeConverterImpl
							.installHook("false"));
		} else {
			return _InflectInfinitiveIndependent;
		}
	}

	@Override
	public boolean isInflectInfinitivel() {
		if (!has_InflectInfinitivel) {
			return javax.xml.bind.DatatypeConverter
					.parseBoolean(com.sun.xml.bind.DatatypeConverterImpl
							.installHook("true"));
		} else {
			return _InflectInfinitivel;
		}
	}

	@Override
	public boolean isInflectOrigin() {
		if (!has_InflectOrigin) {
			return javax.xml.bind.DatatypeConverter
					.parseBoolean(com.sun.xml.bind.DatatypeConverterImpl
							.installHook("true"));
		} else {
			return _InflectOrigin;
		}
	}

	@Override
	public boolean isInflectPast() {
		if (!has_InflectPast) {
			return javax.xml.bind.DatatypeConverter
					.parseBoolean(com.sun.xml.bind.DatatypeConverterImpl
							.installHook("true"));
		} else {
			return _InflectPast;
		}
	}

	@Override
	public void serializeAttributes(mila.generated.impl.runtime.XMLSerializer context)
			throws org.xml.sax.SAXException {
		int idx15 = 0;
		final int len15 = ((_AddOrReplaceOrRemove == null) ? 0
				: _AddOrReplaceOrRemove.size());
		if (_Binyan != null) {
			context.startAttribute("", "binyan");
			try {
				context.text(_Binyan, "Binyan");
			} catch (java.lang.Exception e) {
				mila.generated.impl.runtime.Util.handlePrintConversionException(
						this, e, context);
			}
			context.endAttribute();
		}
		if (_Feminine != null) {
			context.startAttribute("", "feminine");
			try {
				context.text(_Feminine, "Feminine");
			} catch (java.lang.Exception e) {
				mila.generated.impl.runtime.Util.handlePrintConversionException(
						this, e, context);
			}
			context.endAttribute();
		}
		if (has_Foreign) {
			context.startAttribute("", "foreign");
			try {
				context.text(
						javax.xml.bind.DatatypeConverter.printBoolean(_Foreign),
						"Foreign");
			} catch (java.lang.Exception e) {
				mila.generated.impl.runtime.Util.handlePrintConversionException(
						this, e, context);
			}
			context.endAttribute();
		}
		if (has_InflectBeinoni) {
			context.startAttribute("", "inflectBeinoni");
			try {
				context.text(javax.xml.bind.DatatypeConverter
						.printBoolean(_InflectBeinoni), "InflectBeinoni");
			} catch (java.lang.Exception e) {
				mila.generated.impl.runtime.Util.handlePrintConversionException(
						this, e, context);
			}
			context.endAttribute();
		}
		if (has_InflectBeinoniConstruct) {
			context.startAttribute("", "inflectBeinoniConstruct");
			try {
				context.text(javax.xml.bind.DatatypeConverter
						.printBoolean(_InflectBeinoniConstruct),
						"InflectBeinoniConstruct");
			} catch (java.lang.Exception e) {
				mila.generated.impl.runtime.Util.handlePrintConversionException(
						this, e, context);
			}
			context.endAttribute();
		}
		if (has_InflectBeinoniPossessive) {
			context.startAttribute("", "inflectBeinoniPossessive");
			try {
				context.text(javax.xml.bind.DatatypeConverter
						.printBoolean(_InflectBeinoniPossessive),
						"InflectBeinoniPossessive");
			} catch (java.lang.Exception e) {
				mila.generated.impl.runtime.Util.handlePrintConversionException(
						this, e, context);
			}
			context.endAttribute();
		}
		if (has_InflectFuture) {
			context.startAttribute("", "inflectFuture");
			try {
				context.text(javax.xml.bind.DatatypeConverter
						.printBoolean(_InflectFuture), "InflectFuture");
			} catch (java.lang.Exception e) {
				mila.generated.impl.runtime.Util.handlePrintConversionException(
						this, e, context);
			}
			context.endAttribute();
		}
		if (has_InflectImperative) {
			context.startAttribute("", "inflectImperative");
			try {
				context.text(javax.xml.bind.DatatypeConverter
						.printBoolean(_InflectImperative), "InflectImperative");
			} catch (java.lang.Exception e) {
				mila.generated.impl.runtime.Util.handlePrintConversionException(
						this, e, context);
			}
			context.endAttribute();
		}
		if (has_InflectInfinitiveIndependent) {
			context.startAttribute("", "inflectInfinitiveIndependent");
			try {
				context.text(javax.xml.bind.DatatypeConverter
						.printBoolean(_InflectInfinitiveIndependent),
						"InflectInfinitiveIndependent");
			} catch (java.lang.Exception e) {
				mila.generated.impl.runtime.Util.handlePrintConversionException(
						this, e, context);
			}
			context.endAttribute();
		}
		if (has_InflectInfinitiveb) {
			context.startAttribute("", "inflectInfinitiveb");
			try {
				context.text(javax.xml.bind.DatatypeConverter
						.printBoolean(_InflectInfinitiveb),
						"InflectInfinitiveb");
			} catch (java.lang.Exception e) {
				mila.generated.impl.runtime.Util.handlePrintConversionException(
						this, e, context);
			}
			context.endAttribute();
		}
		if (has_InflectInfinitivel) {
			context.startAttribute("", "inflectInfinitivel");
			try {
				context.text(javax.xml.bind.DatatypeConverter
						.printBoolean(_InflectInfinitivel),
						"InflectInfinitivel");
			} catch (java.lang.Exception e) {
				mila.generated.impl.runtime.Util.handlePrintConversionException(
						this, e, context);
			}
			context.endAttribute();
		}
		if (has_InflectOrigin) {
			context.startAttribute("", "inflectOrigin");
			try {
				context.text(javax.xml.bind.DatatypeConverter
						.printBoolean(_InflectOrigin), "InflectOrigin");
			} catch (java.lang.Exception e) {
				mila.generated.impl.runtime.Util.handlePrintConversionException(
						this, e, context);
			}
			context.endAttribute();
		}
		if (has_InflectPast) {
			context.startAttribute("", "inflectPast");
			try {
				context.text(javax.xml.bind.DatatypeConverter
						.printBoolean(_InflectPast), "InflectPast");
			} catch (java.lang.Exception e) {
				mila.generated.impl.runtime.Util.handlePrintConversionException(
						this, e, context);
			}
			context.endAttribute();
		}
		context.startAttribute("", "inflectionPattern");
		try {
			context.text(_InflectionPattern, "InflectionPattern");
		} catch (java.lang.Exception e) {
			mila.generated.impl.runtime.Util.handlePrintConversionException(this, e,
					context);
		}
		context.endAttribute();
		if (_IpSource != null) {
			context.startAttribute("", "ipSource");
			try {
				context.text(_IpSource, "IpSource");
			} catch (java.lang.Exception e) {
				mila.generated.impl.runtime.Util.handlePrintConversionException(
						this, e, context);
			}
			context.endAttribute();
		}
		context.startAttribute("", "root");
		try {
			context.text(_Root, "Root");
		} catch (java.lang.Exception e) {
			mila.generated.impl.runtime.Util.handlePrintConversionException(this, e,
					context);
		}
		context.endAttribute();
		if (_Valence != null) {
			context.startAttribute("", "valence");
			try {
				context.text(_Valence, "Valence");
			} catch (java.lang.Exception e) {
				mila.generated.impl.runtime.Util.handlePrintConversionException(
						this, e, context);
			}
			context.endAttribute();
		}
		while (idx15 != len15) {
			while (idx15 != len15) {
				context.childAsAttributes(
						((com.sun.xml.bind.JAXBObject) _AddOrReplaceOrRemove
								.get(idx15++)), "AddOrReplaceOrRemove");
			}
		}
	}

	@Override
	public void serializeBody(mila.generated.impl.runtime.XMLSerializer context)
			throws org.xml.sax.SAXException {
		int idx15 = 0;
		final int len15 = ((_AddOrReplaceOrRemove == null) ? 0
				: _AddOrReplaceOrRemove.size());
		while (idx15 != len15) {
			while (idx15 != len15) {
				context.childAsBody(
						((com.sun.xml.bind.JAXBObject) _AddOrReplaceOrRemove
								.get(idx15++)), "AddOrReplaceOrRemove");
			}
		}
	}

	@Override
	public void serializeURIs(mila.generated.impl.runtime.XMLSerializer context)
			throws org.xml.sax.SAXException {
		int idx15 = 0;
		final int len15 = ((_AddOrReplaceOrRemove == null) ? 0
				: _AddOrReplaceOrRemove.size());
		while (idx15 != len15) {
			while (idx15 != len15) {
				context.childAsURIs(
						((com.sun.xml.bind.JAXBObject) _AddOrReplaceOrRemove
								.get(idx15++)), "AddOrReplaceOrRemove");
			}
		}
	}

	@Override
	public void setBinyan(java.lang.String value) {
		_Binyan = value;
	}

	@Override
	public void setFeminine(java.lang.String value) {
		_Feminine = value;
	}

	@Override
	public void setForeign(boolean value) {
		_Foreign = value;
		has_Foreign = true;
	}

	@Override
	public void setInflectBeinoni(boolean value) {
		_InflectBeinoni = value;
		has_InflectBeinoni = true;
	}

	@Override
	public void setInflectBeinoniConstruct(boolean value) {
		_InflectBeinoniConstruct = value;
		has_InflectBeinoniConstruct = true;
	}

	@Override
	public void setInflectBeinoniPossessive(boolean value) {
		_InflectBeinoniPossessive = value;
		has_InflectBeinoniPossessive = true;
	}

	@Override
	public void setInflectFuture(boolean value) {
		_InflectFuture = value;
		has_InflectFuture = true;
	}

	@Override
	public void setInflectImperative(boolean value) {
		_InflectImperative = value;
		has_InflectImperative = true;
	}

	@Override
	public void setInflectInfinitiveb(boolean value) {
		_InflectInfinitiveb = value;
		has_InflectInfinitiveb = true;
	}

	@Override
	public void setInflectInfinitiveIndependent(boolean value) {
		_InflectInfinitiveIndependent = value;
		has_InflectInfinitiveIndependent = true;
	}

	@Override
	public void setInflectInfinitivel(boolean value) {
		_InflectInfinitivel = value;
		has_InflectInfinitivel = true;
	}

	@Override
	public void setInflectionPattern(java.lang.String value) {
		_InflectionPattern = value;
	}

	@Override
	public void setInflectOrigin(boolean value) {
		_InflectOrigin = value;
		has_InflectOrigin = true;
	}

	@Override
	public void setInflectPast(boolean value) {
		_InflectPast = value;
		has_InflectPast = true;
	}

	@Override
	public void setIpSource(java.lang.String value) {
		_IpSource = value;
	}

	@Override
	public void setRoot(java.lang.String value) {
		_Root = value;
	}

	@Override
	public void setValence(java.lang.String value) {
		_Valence = value;
	}

}
