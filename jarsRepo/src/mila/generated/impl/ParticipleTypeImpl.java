//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v1.0.5-b16-fcs 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2009.06.14 at 03:41:34 PM IDT 
//

package mila.generated.impl;

public class ParticipleTypeImpl implements mila.generated.ParticipleType,
		com.sun.xml.bind.JAXBObject,
		mila.generated.impl.runtime.UnmarshallableObject,
		mila.generated.impl.runtime.XMLSerializable,
		mila.generated.impl.runtime.ValidatableObject {

	public class Unmarshaller extends
			mila.generated.impl.runtime.AbstractUnmarshallingEventHandlerImpl {

		public Unmarshaller(mila.generated.impl.runtime.UnmarshallingContext context) {
			super(context, "----------------------------------------");
		}

		protected Unmarshaller(
				mila.generated.impl.runtime.UnmarshallingContext context,
				int startState) {
			this(context);
			state = startState;
		}

		private void eatText1(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_Register = com.sun.xml.bind.WhiteSpaceProcessor
						.collapse(value);
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		private void eatText10(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_Definiteness = com.sun.xml.bind.WhiteSpaceProcessor
						.collapse(value);
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		private void eatText11(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_Status = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		private void eatText12(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_Type = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		private void eatText13(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_Binyan = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		private void eatText2(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_Gender = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		private void eatText3(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_Person = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		private void eatText4(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_Number = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		private void eatText5(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_Mood = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		private void eatText6(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_Root = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		private void eatText7(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_Spelling = com.sun.xml.bind.WhiteSpaceProcessor
						.collapse(value);
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		private void eatText8(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_Expansion = com.sun.xml.bind.WhiteSpaceProcessor
						.collapse(value);
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		private void eatText9(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_Subcoordinating = com.sun.xml.bind.WhiteSpaceProcessor
						.collapse(value);
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		@Override
		public void enterAttribute(java.lang.String ___uri,
				java.lang.String ___local, java.lang.String ___qname)
				throws org.xml.sax.SAXException {
			int attIdx;
			outer: while (true) {
				switch (state) {
				case 21:
					if (("register" == ___local) && ("" == ___uri)) {
						state = 22;
						return;
					}
					state = 24;
					continue outer;
				case 9:
					if (("gender" == ___local) && ("" == ___uri)) {
						state = 10;
						return;
					}
					state = 12;
					continue outer;
				case 18:
					if (("person" == ___local) && ("" == ___uri)) {
						state = 19;
						return;
					}
					state = 21;
					continue outer;
				case 15:
					if (("number" == ___local) && ("" == ___uri)) {
						state = 16;
						return;
					}
					state = 18;
					continue outer;
				case 12:
					if (("mood" == ___local) && ("" == ___uri)) {
						state = 13;
						return;
					}
					state = 15;
					continue outer;
				case 24:
					if (("root" == ___local) && ("" == ___uri)) {
						state = 25;
						return;
					}
					state = 27;
					continue outer;
				case 27:
					if (("spelling" == ___local) && ("" == ___uri)) {
						state = 28;
						return;
					}
					state = 30;
					continue outer;
				case 6:
					if (("expansion" == ___local) && ("" == ___uri)) {
						state = 7;
						return;
					}
					state = 9;
					continue outer;
				case 33:
					if (("subcoordinating" == ___local) && ("" == ___uri)) {
						state = 34;
						return;
					}
					state = 36;
					continue outer;
				case 3:
					if (("definiteness" == ___local) && ("" == ___uri)) {
						state = 4;
						return;
					}
					state = 6;
					continue outer;
				case 39:
					revertToParentFromEnterAttribute(___uri, ___local, ___qname);
					return;
				case 30:
					if (("status" == ___local) && ("" == ___uri)) {
						state = 31;
						return;
					}
					state = 33;
					continue outer;
				case 36:
					if (("type" == ___local) && ("" == ___uri)) {
						state = 37;
						return;
					}
					state = 39;
					continue outer;
				case 0:
					if (("binyan" == ___local) && ("" == ___uri)) {
						state = 1;
						return;
					}
					state = 3;
					continue outer;
				}
				super.enterAttribute(___uri, ___local, ___qname);
				break;
			}
		}

		@Override
		public void enterElement(java.lang.String ___uri,
				java.lang.String ___local, java.lang.String ___qname,
				org.xml.sax.Attributes __atts) throws org.xml.sax.SAXException {
			int attIdx;
			outer: while (true) {
				switch (state) {
				case 21:
					attIdx = context.getAttribute("", "register");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 24;
						eatText1(v);
						continue outer;
					}
					state = 24;
					continue outer;
				case 9:
					attIdx = context.getAttribute("", "gender");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 12;
						eatText2(v);
						continue outer;
					}
					state = 12;
					continue outer;
				case 18:
					attIdx = context.getAttribute("", "person");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 21;
						eatText3(v);
						continue outer;
					}
					state = 21;
					continue outer;
				case 15:
					attIdx = context.getAttribute("", "number");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 18;
						eatText4(v);
						continue outer;
					}
					state = 18;
					continue outer;
				case 12:
					attIdx = context.getAttribute("", "mood");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 15;
						eatText5(v);
						continue outer;
					}
					state = 15;
					continue outer;
				case 24:
					attIdx = context.getAttribute("", "root");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 27;
						eatText6(v);
						continue outer;
					}
					state = 27;
					continue outer;
				case 27:
					attIdx = context.getAttribute("", "spelling");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 30;
						eatText7(v);
						continue outer;
					}
					state = 30;
					continue outer;
				case 6:
					attIdx = context.getAttribute("", "expansion");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 9;
						eatText8(v);
						continue outer;
					}
					state = 9;
					continue outer;
				case 33:
					attIdx = context.getAttribute("", "subcoordinating");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 36;
						eatText9(v);
						continue outer;
					}
					state = 36;
					continue outer;
				case 3:
					attIdx = context.getAttribute("", "definiteness");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 6;
						eatText10(v);
						continue outer;
					}
					state = 6;
					continue outer;
				case 39:
					revertToParentFromEnterElement(___uri, ___local, ___qname,
							__atts);
					return;
				case 30:
					attIdx = context.getAttribute("", "status");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 33;
						eatText11(v);
						continue outer;
					}
					state = 33;
					continue outer;
				case 36:
					attIdx = context.getAttribute("", "type");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 39;
						eatText12(v);
						continue outer;
					}
					state = 39;
					continue outer;
				case 0:
					attIdx = context.getAttribute("", "binyan");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 3;
						eatText13(v);
						continue outer;
					}
					state = 3;
					continue outer;
				}
				super.enterElement(___uri, ___local, ___qname, __atts);
				break;
			}
		}

		@Override
		public void handleText(final java.lang.String value)
				throws org.xml.sax.SAXException {
			int attIdx;
			outer: while (true) {
				try {
					switch (state) {
					case 21:
						attIdx = context.getAttribute("", "register");
						if (attIdx >= 0) {
							final java.lang.String v = context
									.eatAttribute(attIdx);
							state = 24;
							eatText1(v);
							continue outer;
						}
						state = 24;
						continue outer;
					case 9:
						attIdx = context.getAttribute("", "gender");
						if (attIdx >= 0) {
							final java.lang.String v = context
									.eatAttribute(attIdx);
							state = 12;
							eatText2(v);
							continue outer;
						}
						state = 12;
						continue outer;
					case 18:
						attIdx = context.getAttribute("", "person");
						if (attIdx >= 0) {
							final java.lang.String v = context
									.eatAttribute(attIdx);
							state = 21;
							eatText3(v);
							continue outer;
						}
						state = 21;
						continue outer;
					case 15:
						attIdx = context.getAttribute("", "number");
						if (attIdx >= 0) {
							final java.lang.String v = context
									.eatAttribute(attIdx);
							state = 18;
							eatText4(v);
							continue outer;
						}
						state = 18;
						continue outer;
					case 12:
						attIdx = context.getAttribute("", "mood");
						if (attIdx >= 0) {
							final java.lang.String v = context
									.eatAttribute(attIdx);
							state = 15;
							eatText5(v);
							continue outer;
						}
						state = 15;
						continue outer;
					case 24:
						attIdx = context.getAttribute("", "root");
						if (attIdx >= 0) {
							final java.lang.String v = context
									.eatAttribute(attIdx);
							state = 27;
							eatText6(v);
							continue outer;
						}
						state = 27;
						continue outer;
					case 28:
						state = 29;
						eatText7(value);
						return;
					case 27:
						attIdx = context.getAttribute("", "spelling");
						if (attIdx >= 0) {
							final java.lang.String v = context
									.eatAttribute(attIdx);
							state = 30;
							eatText7(v);
							continue outer;
						}
						state = 30;
						continue outer;
					case 6:
						attIdx = context.getAttribute("", "expansion");
						if (attIdx >= 0) {
							final java.lang.String v = context
									.eatAttribute(attIdx);
							state = 9;
							eatText8(v);
							continue outer;
						}
						state = 9;
						continue outer;
					case 34:
						state = 35;
						eatText9(value);
						return;
					case 33:
						attIdx = context.getAttribute("", "subcoordinating");
						if (attIdx >= 0) {
							final java.lang.String v = context
									.eatAttribute(attIdx);
							state = 36;
							eatText9(v);
							continue outer;
						}
						state = 36;
						continue outer;
					case 31:
						state = 32;
						eatText11(value);
						return;
					case 10:
						state = 11;
						eatText2(value);
						return;
					case 3:
						attIdx = context.getAttribute("", "definiteness");
						if (attIdx >= 0) {
							final java.lang.String v = context
									.eatAttribute(attIdx);
							state = 6;
							eatText10(v);
							continue outer;
						}
						state = 6;
						continue outer;
					case 25:
						state = 26;
						eatText6(value);
						return;
					case 13:
						state = 14;
						eatText5(value);
						return;
					case 22:
						state = 23;
						eatText1(value);
						return;
					case 16:
						state = 17;
						eatText4(value);
						return;
					case 1:
						state = 2;
						eatText13(value);
						return;
					case 39:
						revertToParentFromText(value);
						return;
					case 30:
						attIdx = context.getAttribute("", "status");
						if (attIdx >= 0) {
							final java.lang.String v = context
									.eatAttribute(attIdx);
							state = 33;
							eatText11(v);
							continue outer;
						}
						state = 33;
						continue outer;
					case 7:
						state = 8;
						eatText8(value);
						return;
					case 4:
						state = 5;
						eatText10(value);
						return;
					case 36:
						attIdx = context.getAttribute("", "type");
						if (attIdx >= 0) {
							final java.lang.String v = context
									.eatAttribute(attIdx);
							state = 39;
							eatText12(v);
							continue outer;
						}
						state = 39;
						continue outer;
					case 0:
						attIdx = context.getAttribute("", "binyan");
						if (attIdx >= 0) {
							final java.lang.String v = context
									.eatAttribute(attIdx);
							state = 3;
							eatText13(v);
							continue outer;
						}
						state = 3;
						continue outer;
					case 19:
						state = 20;
						eatText3(value);
						return;
					case 37:
						state = 38;
						eatText12(value);
						return;
					}
				} catch (java.lang.RuntimeException e) {
					handleUnexpectedTextException(value, e);
				}
				break;
			}
		}

		@Override
		public void leaveAttribute(java.lang.String ___uri,
				java.lang.String ___local, java.lang.String ___qname)
				throws org.xml.sax.SAXException {
			int attIdx;
			outer: while (true) {
				switch (state) {
				case 26:
					if (("root" == ___local) && ("" == ___uri)) {
						state = 27;
						return;
					}
					break;
				case 21:
					attIdx = context.getAttribute("", "register");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 24;
						eatText1(v);
						continue outer;
					}
					state = 24;
					continue outer;
				case 9:
					attIdx = context.getAttribute("", "gender");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 12;
						eatText2(v);
						continue outer;
					}
					state = 12;
					continue outer;
				case 18:
					attIdx = context.getAttribute("", "person");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 21;
						eatText3(v);
						continue outer;
					}
					state = 21;
					continue outer;
				case 15:
					attIdx = context.getAttribute("", "number");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 18;
						eatText4(v);
						continue outer;
					}
					state = 18;
					continue outer;
				case 12:
					attIdx = context.getAttribute("", "mood");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 15;
						eatText5(v);
						continue outer;
					}
					state = 15;
					continue outer;
				case 32:
					if (("status" == ___local) && ("" == ___uri)) {
						state = 33;
						return;
					}
					break;
				case 24:
					attIdx = context.getAttribute("", "root");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 27;
						eatText6(v);
						continue outer;
					}
					state = 27;
					continue outer;
				case 27:
					attIdx = context.getAttribute("", "spelling");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 30;
						eatText7(v);
						continue outer;
					}
					state = 30;
					continue outer;
				case 6:
					attIdx = context.getAttribute("", "expansion");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 9;
						eatText8(v);
						continue outer;
					}
					state = 9;
					continue outer;
				case 33:
					attIdx = context.getAttribute("", "subcoordinating");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 36;
						eatText9(v);
						continue outer;
					}
					state = 36;
					continue outer;
				case 3:
					attIdx = context.getAttribute("", "definiteness");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 6;
						eatText10(v);
						continue outer;
					}
					state = 6;
					continue outer;
				case 2:
					if (("binyan" == ___local) && ("" == ___uri)) {
						state = 3;
						return;
					}
					break;
				case 20:
					if (("person" == ___local) && ("" == ___uri)) {
						state = 21;
						return;
					}
					break;
				case 14:
					if (("mood" == ___local) && ("" == ___uri)) {
						state = 15;
						return;
					}
					break;
				case 35:
					if (("subcoordinating" == ___local) && ("" == ___uri)) {
						state = 36;
						return;
					}
					break;
				case 23:
					if (("register" == ___local) && ("" == ___uri)) {
						state = 24;
						return;
					}
					break;
				case 38:
					if (("type" == ___local) && ("" == ___uri)) {
						state = 39;
						return;
					}
					break;
				case 29:
					if (("spelling" == ___local) && ("" == ___uri)) {
						state = 30;
						return;
					}
					break;
				case 39:
					revertToParentFromLeaveAttribute(___uri, ___local, ___qname);
					return;
				case 8:
					if (("expansion" == ___local) && ("" == ___uri)) {
						state = 9;
						return;
					}
					break;
				case 30:
					attIdx = context.getAttribute("", "status");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 33;
						eatText11(v);
						continue outer;
					}
					state = 33;
					continue outer;
				case 11:
					if (("gender" == ___local) && ("" == ___uri)) {
						state = 12;
						return;
					}
					break;
				case 36:
					attIdx = context.getAttribute("", "type");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 39;
						eatText12(v);
						continue outer;
					}
					state = 39;
					continue outer;
				case 0:
					attIdx = context.getAttribute("", "binyan");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 3;
						eatText13(v);
						continue outer;
					}
					state = 3;
					continue outer;
				case 17:
					if (("number" == ___local) && ("" == ___uri)) {
						state = 18;
						return;
					}
					break;
				case 5:
					if (("definiteness" == ___local) && ("" == ___uri)) {
						state = 6;
						return;
					}
					break;
				}
				super.leaveAttribute(___uri, ___local, ___qname);
				break;
			}
		}

		@Override
		public void leaveElement(java.lang.String ___uri,
				java.lang.String ___local, java.lang.String ___qname)
				throws org.xml.sax.SAXException {
			int attIdx;
			outer: while (true) {
				switch (state) {
				case 21:
					attIdx = context.getAttribute("", "register");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 24;
						eatText1(v);
						continue outer;
					}
					state = 24;
					continue outer;
				case 9:
					attIdx = context.getAttribute("", "gender");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 12;
						eatText2(v);
						continue outer;
					}
					state = 12;
					continue outer;
				case 18:
					attIdx = context.getAttribute("", "person");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 21;
						eatText3(v);
						continue outer;
					}
					state = 21;
					continue outer;
				case 15:
					attIdx = context.getAttribute("", "number");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 18;
						eatText4(v);
						continue outer;
					}
					state = 18;
					continue outer;
				case 12:
					attIdx = context.getAttribute("", "mood");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 15;
						eatText5(v);
						continue outer;
					}
					state = 15;
					continue outer;
				case 24:
					attIdx = context.getAttribute("", "root");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 27;
						eatText6(v);
						continue outer;
					}
					state = 27;
					continue outer;
				case 27:
					attIdx = context.getAttribute("", "spelling");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 30;
						eatText7(v);
						continue outer;
					}
					state = 30;
					continue outer;
				case 6:
					attIdx = context.getAttribute("", "expansion");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 9;
						eatText8(v);
						continue outer;
					}
					state = 9;
					continue outer;
				case 33:
					attIdx = context.getAttribute("", "subcoordinating");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 36;
						eatText9(v);
						continue outer;
					}
					state = 36;
					continue outer;
				case 3:
					attIdx = context.getAttribute("", "definiteness");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 6;
						eatText10(v);
						continue outer;
					}
					state = 6;
					continue outer;
				case 39:
					revertToParentFromLeaveElement(___uri, ___local, ___qname);
					return;
				case 30:
					attIdx = context.getAttribute("", "status");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 33;
						eatText11(v);
						continue outer;
					}
					state = 33;
					continue outer;
				case 36:
					attIdx = context.getAttribute("", "type");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 39;
						eatText12(v);
						continue outer;
					}
					state = 39;
					continue outer;
				case 0:
					attIdx = context.getAttribute("", "binyan");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 3;
						eatText13(v);
						continue outer;
					}
					state = 3;
					continue outer;
				}
				super.leaveElement(___uri, ___local, ___qname);
				break;
			}
		}

		@Override
		public java.lang.Object owner() {
			return mila.generated.impl.ParticipleTypeImpl.this;
		}

	}

	protected java.lang.String _Status;
	protected java.lang.String _Type;
	protected java.lang.String _Register;
	protected java.lang.String _Gender;
	protected java.lang.String _Mood;
	protected java.lang.String _Person;
	protected java.lang.String _Spelling;
	protected java.lang.String _Definiteness;
	protected java.lang.String _Expansion;
	protected java.lang.String _Subcoordinating;
	protected java.lang.String _Number;
	protected java.lang.String _Root;
	protected java.lang.String _Binyan;
	public final static java.lang.Class version = (mila.generated.impl.JAXBVersion.class);

	private static com.sun.msv.grammar.Grammar schemaFragment;

	private final static java.lang.Class PRIMARY_INTERFACE_CLASS() {
		return (mila.generated.ParticipleType.class);
	}

	@Override
	public com.sun.msv.verifier.DocumentDeclaration createRawValidator() {
		if (schemaFragment == null) {
			schemaFragment = com.sun.xml.bind.validator.SchemaDeserializer
					.deserialize(("\u00ac\u00ed\u0000\u0005sr\u0000\u001fcom.sun.msv.grammar.SequenceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.su"
							+ "n.msv.grammar.BinaryExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0004exp1t\u0000 Lcom/sun/msv/gra"
							+ "mmar/Expression;L\u0000\u0004exp2q\u0000~\u0000\u0002xr\u0000\u001ecom.sun.msv.grammar.Expressi"
							+ "on\u00f8\u0018\u0082\u00e8N5~O\u0002\u0000\u0002L\u0000\u0013epsilonReducibilityt\u0000\u0013Ljava/lang/Boolean;L\u0000\u000b"
							+ "expandedExpq\u0000~\u0000\u0002xpppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000pp"
							+ "sq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsr\u0000\u001dcom.sun."
							+ "msv.grammar.ChoiceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0001ppsr\u0000 com.sun.msv.gram"
							+ "mar.AttributeExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0003expq\u0000~\u0000\u0002L\u0000\tnameClasst\u0000\u001fLcom/su"
							+ "n/msv/grammar/NameClass;xq\u0000~\u0000\u0003sr\u0000\u0011java.lang.Boolean\u00cd r\u0080\u00d5\u009c\u00fa\u00ee\u0002"
							+ "\u0000\u0001Z\u0000\u0005valuexp\u0000psr\u0000\u001bcom.sun.msv.grammar.DataExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\u0002d"
							+ "tt\u0000\u001fLorg/relaxng/datatype/Datatype;L\u0000\u0006exceptq\u0000~\u0000\u0002L\u0000\u0004namet\u0000\u001dL"
							+ "com/sun/msv/util/StringPair;xq\u0000~\u0000\u0003ppsr\u0000)com.sun.msv.datatype"
							+ ".xsd.EnumerationFacet\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\u0006valuest\u0000\u000fLjava/util/Set;x"
							+ "r\u00009com.sun.msv.datatype.xsd.DataTypeWithValueConstraintFacet"
							+ "\"\u00a7Ro\u00ca\u00c7\u008aT\u0002\u0000\u0000xr\u0000*com.sun.msv.datatype.xsd.DataTypeWithFacet\u0000\u0000\u0000"
							+ "\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0005Z\u0000\fisFacetFixedZ\u0000\u0012needValueCheckFlagL\u0000\bbaseTypet\u0000)Lc"
							+ "om/sun/msv/datatype/xsd/XSDatatypeImpl;L\u0000\fconcreteTypet\u0000\'Lco"
							+ "m/sun/msv/datatype/xsd/ConcreteType;L\u0000\tfacetNamet\u0000\u0012Ljava/lan"
							+ "g/String;xr\u0000\'com.sun.msv.datatype.xsd.XSDatatypeImpl\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001"
							+ "\u0002\u0000\u0003L\u0000\fnamespaceUriq\u0000~\u0000\"L\u0000\btypeNameq\u0000~\u0000\"L\u0000\nwhiteSpacet\u0000.Lcom/"
							+ "sun/msv/datatype/xsd/WhiteSpaceProcessor;xpt\u0000\u0000t\u0000\nBinyanTypes"
							+ "r\u00005com.sun.msv.datatype.xsd.WhiteSpaceProcessor$Collapse\u0000\u0000\u0000\u0000"
							+ "\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000,com.sun.msv.datatype.xsd.WhiteSpaceProcessor\u0000\u0000\u0000\u0000\u0000"
							+ "\u0000\u0000\u0001\u0002\u0000\u0000xp\u0000\u0000sr\u0000\"com.sun.msv.datatype.xsd.TokenType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000x"
							+ "r\u0000#com.sun.msv.datatype.xsd.StringType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001Z\u0000\risAlways"
							+ "Validxr\u0000*com.sun.msv.datatype.xsd.BuiltinAtomicType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002"
							+ "\u0000\u0000xr\u0000%com.sun.msv.datatype.xsd.ConcreteType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000#"
							+ "t\u0000 http://www.w3.org/2001/XMLSchemat\u0000\u0005tokenq\u0000~\u0000*\u0001q\u0000~\u0000/t\u0000\u000benu"
							+ "merationsr\u0000\u0011java.util.HashSet\u00baD\u0085\u0095\u0096\u00b8\u00b74\u0003\u0000\u0000xpw\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\bt\u0000\u000bu"
							+ "nspecifiedt\u0000\u0006Nif\'alt\u0000\u0006Hif\'ilt\u0000\bHitpa\'elt\u0000\u0005Pa\'alt\u0000\u0006Huf\'alt\u0000\u0005P"
							+ "u\'alt\u0000\u0005Pi\'elxsr\u00000com.sun.msv.grammar.Expression$NullSetExpre"
							+ "ssion\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003ppsr\u0000\u001bcom.sun.msv.util.StringPair\u00d0t\u001ejB"
							+ "\u008f\u008d\u00a0\u0002\u0000\u0002L\u0000\tlocalNameq\u0000~\u0000\"L\u0000\fnamespaceURIq\u0000~\u0000\"xpq\u0000~\u0000\'q\u0000~\u0000&sr\u0000#c"
							+ "om.sun.msv.grammar.SimpleNameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\tlocalNameq\u0000~"
							+ "\u0000\"L\u0000\fnamespaceURIq\u0000~\u0000\"xr\u0000\u001dcom.sun.msv.grammar.NameClass\u0000\u0000\u0000\u0000\u0000"
							+ "\u0000\u0000\u0001\u0002\u0000\u0000xpt\u0000\u0006binyanq\u0000~\u0000&sr\u00000com.sun.msv.grammar.Expression$Eps"
							+ "ilonExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003sq\u0000~\u0000\u0016\u0001q\u0000~\u0000Fsq\u0000~\u0000\u0011ppsq\u0000~\u0000\u0013q\u0000~"
							+ "\u0000\u0017psq\u0000~\u0000\u0018ppsq\u0000~\u0000\u001cq\u0000~\u0000&t\u0000\u0010DefinitenessTypeq\u0000~\u0000*\u0000\u0000q\u0000~\u0000/q\u0000~\u0000/q\u0000"
							+ "~\u00002sq\u0000~\u00003w\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\u0003t\u0000\u000bunspecifiedt\u0000\u0004truet\u0000\u0005falsexq\u0000~\u0000>sq"
							+ "\u0000~\u0000?q\u0000~\u0000Lq\u0000~\u0000&sq\u0000~\u0000At\u0000\fdefinitenessq\u0000~\u0000&q\u0000~\u0000Fsq\u0000~\u0000\u0011ppsq\u0000~\u0000\u0013q"
							+ "\u0000~\u0000\u0017psq\u0000~\u0000\u0018ppq\u0000~\u0000/q\u0000~\u0000>sq\u0000~\u0000?q\u0000~\u00001q\u0000~\u00000sq\u0000~\u0000At\u0000\texpansionq\u0000~"
							+ "\u0000&q\u0000~\u0000Fsq\u0000~\u0000\u0011ppsq\u0000~\u0000\u0013q\u0000~\u0000\u0017psq\u0000~\u0000\u0018ppsq\u0000~\u0000\u001cq\u0000~\u0000&t\u0000\nGenderTypeq"
							+ "\u0000~\u0000*\u0000\u0000q\u0000~\u0000/q\u0000~\u0000/q\u0000~\u00002sq\u0000~\u00003w\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\u0005t\u0000\u000bunspecifiedt\u0000\bfe"
							+ "mininet\u0000\nirrelevantt\u0000\u0016masculine and femininet\u0000\tmasculinexq\u0000~"
							+ "\u0000>sq\u0000~\u0000?q\u0000~\u0000^q\u0000~\u0000&sq\u0000~\u0000At\u0000\u0006genderq\u0000~\u0000&q\u0000~\u0000Fsq\u0000~\u0000\u0011ppsq\u0000~\u0000\u0013q\u0000~"
							+ "\u0000\u0017pq\u0000~\u0000Vsq\u0000~\u0000At\u0000\u0004moodq\u0000~\u0000&q\u0000~\u0000Fsq\u0000~\u0000\u0011ppsq\u0000~\u0000\u0013q\u0000~\u0000\u0017psq\u0000~\u0000\u0018pps"
							+ "q\u0000~\u0000\u001cq\u0000~\u0000&t\u0000\nNumberTypeq\u0000~\u0000*\u0000\u0000q\u0000~\u0000/q\u0000~\u0000/q\u0000~\u00002sq\u0000~\u00003w\f\u0000\u0000\u0000\u0010?@\u0000"
							+ "\u0000\u0000\u0000\u0000\u0006t\u0000\u000bunspecifiedt\u0000\u0013singular and pluralt\u0000\u0004dualt\u0000\u000fdual and "
							+ "pluralt\u0000\bsingulart\u0000\u0006pluralxq\u0000~\u0000>sq\u0000~\u0000?q\u0000~\u0000pq\u0000~\u0000&sq\u0000~\u0000At\u0000\u0006num"
							+ "berq\u0000~\u0000&q\u0000~\u0000Fsq\u0000~\u0000\u0011ppsq\u0000~\u0000\u0013q\u0000~\u0000\u0017psq\u0000~\u0000\u0018ppsq\u0000~\u0000\u001cq\u0000~\u0000&t\u0000\nPerso"
							+ "nTypeq\u0000~\u0000*\u0000\u0000q\u0000~\u0000/q\u0000~\u0000/q\u0000~\u00002sq\u0000~\u00003w\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\u0005t\u0000\u000bunspecifie"
							+ "dt\u0000\u00013t\u0000\u00012t\u0000\u0003anyt\u0000\u00011xq\u0000~\u0000>sq\u0000~\u0000?q\u0000~\u0000\u007fq\u0000~\u0000&sq\u0000~\u0000At\u0000\u0006personq\u0000~\u0000"
							+ "&q\u0000~\u0000Fsq\u0000~\u0000\u0011ppsq\u0000~\u0000\u0013q\u0000~\u0000\u0017psq\u0000~\u0000\u0018ppsq\u0000~\u0000\u001cq\u0000~\u0000&t\u0000\fRegisterType"
							+ "q\u0000~\u0000*\u0000\u0000q\u0000~\u0000/q\u0000~\u0000/q\u0000~\u00002sq\u0000~\u00003w\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\u0003t\u0000\u0006formalt\u0000\binform"
							+ "alt\u0000\u0007archaicxq\u0000~\u0000>sq\u0000~\u0000?q\u0000~\u0000\u008dq\u0000~\u0000&sq\u0000~\u0000At\u0000\bregisterq\u0000~\u0000&q\u0000~\u0000"
							+ "Fsq\u0000~\u0000\u0011ppsq\u0000~\u0000\u0013q\u0000~\u0000\u0017pq\u0000~\u0000Vsq\u0000~\u0000At\u0000\u0004rootq\u0000~\u0000&q\u0000~\u0000Fsq\u0000~\u0000\u0011ppsq\u0000"
							+ "~\u0000\u0013q\u0000~\u0000\u0017psq\u0000~\u0000\u0018ppsq\u0000~\u0000\u001cq\u0000~\u0000&t\u0000\fSpellingTypeq\u0000~\u0000*\u0000\u0000q\u0000~\u0000/q\u0000~\u0000/"
							+ "q\u0000~\u00002sq\u0000~\u00003w\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\u0002t\u0000\tirregulart\u0000\bstandardxq\u0000~\u0000>sq\u0000~\u0000?"
							+ "q\u0000~\u0000\u009dq\u0000~\u0000&sq\u0000~\u0000At\u0000\bspellingq\u0000~\u0000&q\u0000~\u0000Fsq\u0000~\u0000\u0011ppsq\u0000~\u0000\u0013q\u0000~\u0000\u0017psq\u0000"
							+ "~\u0000\u0018ppsq\u0000~\u0000\u001cq\u0000~\u0000&t\u0000\nStatusTypeq\u0000~\u0000*\u0000\u0000q\u0000~\u0000/q\u0000~\u0000/q\u0000~\u00002sq\u0000~\u00003w\f\u0000"
							+ "\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\u0004t\u0000\u000bunspecifiedt\u0000\tconstructt\u0000\babsolutet\u0000\u0016absolute "
							+ "and constructxq\u0000~\u0000>sq\u0000~\u0000?q\u0000~\u0000\u00a8q\u0000~\u0000&sq\u0000~\u0000At\u0000\u0006statusq\u0000~\u0000&q\u0000~\u0000F"
							+ "sq\u0000~\u0000\u0011ppsq\u0000~\u0000\u0013q\u0000~\u0000\u0017pq\u0000~\u0000Vsq\u0000~\u0000At\u0000\u000fsubcoordinatingq\u0000~\u0000&q\u0000~\u0000Fs"
							+ "q\u0000~\u0000\u0011ppsq\u0000~\u0000\u0013q\u0000~\u0000\u0017psq\u0000~\u0000\u0018ppsq\u0000~\u0000\u001cq\u0000~\u0000&t\u0000\u0011ParticiplePosTypeq\u0000"
							+ "~\u0000*\u0000\u0000q\u0000~\u0000/q\u0000~\u0000/q\u0000~\u00002sq\u0000~\u00003w\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\u0003t\u0000\tadjectivet\u0000\u0004verbt"
							+ "\u0000\u0004nounxq\u0000~\u0000>sq\u0000~\u0000?q\u0000~\u0000\u00b9q\u0000~\u0000&sq\u0000~\u0000At\u0000\u0004typeq\u0000~\u0000&q\u0000~\u0000Fsr\u0000\"com.s"
							+ "un.msv.grammar.ExpressionPool\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\bexpTablet\u0000/Lcom/s"
							+ "un/msv/grammar/ExpressionPool$ClosedHash;xpsr\u0000-com.sun.msv.g"
							+ "rammar.ExpressionPool$ClosedHash\u00d7j\u00d0N\u00ef\u00e8\u00ed\u001c\u0003\u0000\u0003I\u0000\u0005countB\u0000\rstream"
							+ "VersionL\u0000\u0006parentt\u0000$Lcom/sun/msv/grammar/ExpressionPool;xp\u0000\u0000\u0000"
							+ "\u0019\u0001pq\u0000~\u0000lq\u0000~\u0000\u0099q\u0000~\u0000Zq\u0000~\u0000\u0007q\u0000~\u0000Hq\u0000~\u0000\u00b1q\u0000~\u0000\u000fq\u0000~\u0000\u00b5q\u0000~\u0000\u0006q\u0000~\u0000hq\u0000~\u0000\u0010q\u0000"
							+ "~\u0000\rq\u0000~\u0000\u0095q\u0000~\u0000{q\u0000~\u0000Tq\u0000~\u0000\nq\u0000~\u0000\fq\u0000~\u0000\u0012q\u0000~\u0000\tq\u0000~\u0000\bq\u0000~\u0000\u000eq\u0000~\u0000\u0089q\u0000~\u0000\u0005q\u0000"
							+ "~\u0000\u000bq\u0000~\u0000\u00a4x"));
		}
		return new com.sun.msv.verifier.regexp.REDocumentDeclaration(
				schemaFragment);
	}

	@Override
	public mila.generated.impl.runtime.UnmarshallingEventHandler createUnmarshaller(
			mila.generated.impl.runtime.UnmarshallingContext context) {
		return new mila.generated.impl.ParticipleTypeImpl.Unmarshaller(context);
	}

	@Override
	public java.lang.String getBinyan() {
		if (_Binyan == null) {
			return "unspecified";
		} else {
			return _Binyan;
		}
	}

	@Override
	public java.lang.String getDefiniteness() {
		if (_Definiteness == null) {
			return "false";
		} else {
			return _Definiteness;
		}
	}

	@Override
	public java.lang.String getExpansion() {
		return _Expansion;
	}

	@Override
	public java.lang.String getGender() {
		if (_Gender == null) {
			return "unspecified";
		} else {
			return _Gender;
		}
	}

	@Override
	public java.lang.String getMood() {
		return _Mood;
	}

	@Override
	public java.lang.String getNumber() {
		if (_Number == null) {
			return "unspecified";
		} else {
			return _Number;
		}
	}

	@Override
	public java.lang.String getPerson() {
		if (_Person == null) {
			return "unspecified";
		} else {
			return _Person;
		}
	}

	@Override
	public java.lang.Class getPrimaryInterface() {
		return (mila.generated.ParticipleType.class);
	}

	@Override
	public java.lang.String getRegister() {
		if (_Register == null) {
			return "formal";
		} else {
			return _Register;
		}
	}

	@Override
	public java.lang.String getRoot() {
		return _Root;
	}

	@Override
	public java.lang.String getSpelling() {
		if (_Spelling == null) {
			return "standard";
		} else {
			return _Spelling;
		}
	}

	@Override
	public java.lang.String getStatus() {
		if (_Status == null) {
			return "absolute and construct";
		} else {
			return _Status;
		}
	}

	@Override
	public java.lang.String getSubcoordinating() {
		if (_Subcoordinating == null) {
			return "false";
		} else {
			return _Subcoordinating;
		}
	}

	@Override
	public java.lang.String getType() {
		if (_Type == null) {
			return "verb";
		} else {
			return _Type;
		}
	}

	@Override
	public void serializeAttributes(mila.generated.impl.runtime.XMLSerializer context)
			throws org.xml.sax.SAXException {
		if (_Binyan != null) {
			context.startAttribute("", "binyan");
			try {
				context.text(_Binyan, "Binyan");
			} catch (java.lang.Exception e) {
				mila.generated.impl.runtime.Util.handlePrintConversionException(
						this, e, context);
			}
			context.endAttribute();
		}
		if (_Definiteness != null) {
			context.startAttribute("", "definiteness");
			try {
				context.text(_Definiteness, "Definiteness");
			} catch (java.lang.Exception e) {
				mila.generated.impl.runtime.Util.handlePrintConversionException(
						this, e, context);
			}
			context.endAttribute();
		}
		if (_Expansion != null) {
			context.startAttribute("", "expansion");
			try {
				context.text(_Expansion, "Expansion");
			} catch (java.lang.Exception e) {
				mila.generated.impl.runtime.Util.handlePrintConversionException(
						this, e, context);
			}
			context.endAttribute();
		}
		if (_Gender != null) {
			context.startAttribute("", "gender");
			try {
				context.text(_Gender, "Gender");
			} catch (java.lang.Exception e) {
				mila.generated.impl.runtime.Util.handlePrintConversionException(
						this, e, context);
			}
			context.endAttribute();
		}
		if (_Mood != null) {
			context.startAttribute("", "mood");
			try {
				context.text(_Mood, "Mood");
			} catch (java.lang.Exception e) {
				mila.generated.impl.runtime.Util.handlePrintConversionException(
						this, e, context);
			}
			context.endAttribute();
		}
		if (_Number != null) {
			context.startAttribute("", "number");
			try {
				context.text(_Number, "Number");
			} catch (java.lang.Exception e) {
				mila.generated.impl.runtime.Util.handlePrintConversionException(
						this, e, context);
			}
			context.endAttribute();
		}
		if (_Person != null) {
			context.startAttribute("", "person");
			try {
				context.text(_Person, "Person");
			} catch (java.lang.Exception e) {
				mila.generated.impl.runtime.Util.handlePrintConversionException(
						this, e, context);
			}
			context.endAttribute();
		}
		if (_Register != null) {
			context.startAttribute("", "register");
			try {
				context.text(_Register, "Register");
			} catch (java.lang.Exception e) {
				mila.generated.impl.runtime.Util.handlePrintConversionException(
						this, e, context);
			}
			context.endAttribute();
		}
		if (_Root != null) {
			context.startAttribute("", "root");
			try {
				context.text(_Root, "Root");
			} catch (java.lang.Exception e) {
				mila.generated.impl.runtime.Util.handlePrintConversionException(
						this, e, context);
			}
			context.endAttribute();
		}
		if (_Spelling != null) {
			context.startAttribute("", "spelling");
			try {
				context.text(_Spelling, "Spelling");
			} catch (java.lang.Exception e) {
				mila.generated.impl.runtime.Util.handlePrintConversionException(
						this, e, context);
			}
			context.endAttribute();
		}
		if (_Status != null) {
			context.startAttribute("", "status");
			try {
				context.text(_Status, "Status");
			} catch (java.lang.Exception e) {
				mila.generated.impl.runtime.Util.handlePrintConversionException(
						this, e, context);
			}
			context.endAttribute();
		}
		if (_Subcoordinating != null) {
			context.startAttribute("", "subcoordinating");
			try {
				context.text(_Subcoordinating, "Subcoordinating");
			} catch (java.lang.Exception e) {
				mila.generated.impl.runtime.Util.handlePrintConversionException(
						this, e, context);
			}
			context.endAttribute();
		}
		if (_Type != null) {
			context.startAttribute("", "type");
			try {
				context.text(_Type, "Type");
			} catch (java.lang.Exception e) {
				mila.generated.impl.runtime.Util.handlePrintConversionException(
						this, e, context);
			}
			context.endAttribute();
		}
	}

	@Override
	public void serializeBody(mila.generated.impl.runtime.XMLSerializer context)
			throws org.xml.sax.SAXException {
	}

	@Override
	public void serializeURIs(mila.generated.impl.runtime.XMLSerializer context)
			throws org.xml.sax.SAXException {
	}

	@Override
	public void setBinyan(java.lang.String value) {
		_Binyan = value;
	}

	@Override
	public void setDefiniteness(java.lang.String value) {
		_Definiteness = value;
	}

	@Override
	public void setExpansion(java.lang.String value) {
		_Expansion = value;
	}

	@Override
	public void setGender(java.lang.String value) {
		_Gender = value;
	}

	@Override
	public void setMood(java.lang.String value) {
		_Mood = value;
	}

	@Override
	public void setNumber(java.lang.String value) {
		_Number = value;
	}

	@Override
	public void setPerson(java.lang.String value) {
		_Person = value;
	}

	@Override
	public void setRegister(java.lang.String value) {
		_Register = value;
	}

	@Override
	public void setRoot(java.lang.String value) {
		_Root = value;
	}

	@Override
	public void setSpelling(java.lang.String value) {
		_Spelling = value;
	}

	@Override
	public void setStatus(java.lang.String value) {
		_Status = value;
	}

	@Override
	public void setSubcoordinating(java.lang.String value) {
		_Subcoordinating = value;
	}

	@Override
	public void setType(java.lang.String value) {
		_Type = value;
	}

}
