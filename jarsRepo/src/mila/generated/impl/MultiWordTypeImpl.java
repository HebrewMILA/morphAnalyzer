//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v1.0.5-b16-fcs 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2008.03.18 at 12:01:08 PM IST 
//

package mila.generated.impl;

public class MultiWordTypeImpl implements mila.generated.MultiWordType,
		com.sun.xml.bind.JAXBObject,
		mila.generated.impl.runtime.UnmarshallableObject,
		mila.generated.impl.runtime.XMLSerializable,
		mila.generated.impl.runtime.ValidatableObject {

	public class Unmarshaller extends
			mila.generated.impl.runtime.AbstractUnmarshallingEventHandlerImpl {

		public Unmarshaller(mila.generated.impl.runtime.UnmarshallingContext context) {
			super(context, "-------------");
		}

		protected Unmarshaller(
				mila.generated.impl.runtime.UnmarshallingContext context,
				int startState) {
			this(context);
			state = startState;
		}

		private void eatText1(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_Consecutive = javax.xml.bind.DatatypeConverter
						.parseBoolean(com.sun.xml.bind.WhiteSpaceProcessor
								.collapse(value));
				has_Consecutive = true;
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		private void eatText2(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_Length = javax.xml.bind.DatatypeConverter
						.parseInt(com.sun.xml.bind.WhiteSpaceProcessor
								.collapse(value));
				has_Length = true;
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		private void eatText3(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_SubId = javax.xml.bind.DatatypeConverter
						.parseInt(com.sun.xml.bind.WhiteSpaceProcessor
								.collapse(value));
				has_SubId = true;
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		private void eatText4(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_Id = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		@Override
		public void enterAttribute(java.lang.String ___uri,
				java.lang.String ___local, java.lang.String ___qname)
				throws org.xml.sax.SAXException {
			int attIdx;
			outer: while (true) {
				switch (state) {
				case 0:
					if (("consecutive" == ___local) && ("" == ___uri)) {
						state = 1;
						return;
					}
					state = 3;
					continue outer;
				case 6:
					if (("length" == ___local) && ("" == ___uri)) {
						state = 7;
						return;
					}
					state = 9;
					continue outer;
				case 12:
					revertToParentFromEnterAttribute(___uri, ___local, ___qname);
					return;
				case 9:
					if (("subId" == ___local) && ("" == ___uri)) {
						state = 10;
						return;
					}
					state = 12;
					continue outer;
				case 3:
					if (("id" == ___local) && ("" == ___uri)) {
						state = 4;
						return;
					}
					state = 6;
					continue outer;
				}
				super.enterAttribute(___uri, ___local, ___qname);
				break;
			}
		}

		@Override
		public void enterElement(java.lang.String ___uri,
				java.lang.String ___local, java.lang.String ___qname,
				org.xml.sax.Attributes __atts) throws org.xml.sax.SAXException {
			int attIdx;
			outer: while (true) {
				switch (state) {
				case 0:
					attIdx = context.getAttribute("", "consecutive");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 3;
						eatText1(v);
						continue outer;
					}
					state = 3;
					continue outer;
				case 6:
					attIdx = context.getAttribute("", "length");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 9;
						eatText2(v);
						continue outer;
					}
					state = 9;
					continue outer;
				case 12:
					revertToParentFromEnterElement(___uri, ___local, ___qname,
							__atts);
					return;
				case 9:
					attIdx = context.getAttribute("", "subId");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 12;
						eatText3(v);
						continue outer;
					}
					state = 12;
					continue outer;
				case 3:
					attIdx = context.getAttribute("", "id");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 6;
						eatText4(v);
						continue outer;
					}
					state = 6;
					continue outer;
				}
				super.enterElement(___uri, ___local, ___qname, __atts);
				break;
			}
		}

		@Override
		public void handleText(final java.lang.String value)
				throws org.xml.sax.SAXException {
			int attIdx;
			outer: while (true) {
				try {
					switch (state) {
					case 0:
						attIdx = context.getAttribute("", "consecutive");
						if (attIdx >= 0) {
							final java.lang.String v = context
									.eatAttribute(attIdx);
							state = 3;
							eatText1(v);
							continue outer;
						}
						state = 3;
						continue outer;
					case 10:
						state = 11;
						eatText3(value);
						return;
					case 1:
						state = 2;
						eatText1(value);
						return;
					case 6:
						attIdx = context.getAttribute("", "length");
						if (attIdx >= 0) {
							final java.lang.String v = context
									.eatAttribute(attIdx);
							state = 9;
							eatText2(v);
							continue outer;
						}
						state = 9;
						continue outer;
					case 4:
						state = 5;
						eatText4(value);
						return;
					case 7:
						state = 8;
						eatText2(value);
						return;
					case 12:
						revertToParentFromText(value);
						return;
					case 9:
						attIdx = context.getAttribute("", "subId");
						if (attIdx >= 0) {
							final java.lang.String v = context
									.eatAttribute(attIdx);
							state = 12;
							eatText3(v);
							continue outer;
						}
						state = 12;
						continue outer;
					case 3:
						attIdx = context.getAttribute("", "id");
						if (attIdx >= 0) {
							final java.lang.String v = context
									.eatAttribute(attIdx);
							state = 6;
							eatText4(v);
							continue outer;
						}
						state = 6;
						continue outer;
					}
				} catch (java.lang.RuntimeException e) {
					handleUnexpectedTextException(value, e);
				}
				break;
			}
		}

		@Override
		public void leaveAttribute(java.lang.String ___uri,
				java.lang.String ___local, java.lang.String ___qname)
				throws org.xml.sax.SAXException {
			int attIdx;
			outer: while (true) {
				switch (state) {
				case 2:
					if (("consecutive" == ___local) && ("" == ___uri)) {
						state = 3;
						return;
					}
					break;
				case 0:
					attIdx = context.getAttribute("", "consecutive");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 3;
						eatText1(v);
						continue outer;
					}
					state = 3;
					continue outer;
				case 11:
					if (("subId" == ___local) && ("" == ___uri)) {
						state = 12;
						return;
					}
					break;
				case 6:
					attIdx = context.getAttribute("", "length");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 9;
						eatText2(v);
						continue outer;
					}
					state = 9;
					continue outer;
				case 5:
					if (("id" == ___local) && ("" == ___uri)) {
						state = 6;
						return;
					}
					break;
				case 12:
					revertToParentFromLeaveAttribute(___uri, ___local, ___qname);
					return;
				case 9:
					attIdx = context.getAttribute("", "subId");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 12;
						eatText3(v);
						continue outer;
					}
					state = 12;
					continue outer;
				case 3:
					attIdx = context.getAttribute("", "id");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 6;
						eatText4(v);
						continue outer;
					}
					state = 6;
					continue outer;
				case 8:
					if (("length" == ___local) && ("" == ___uri)) {
						state = 9;
						return;
					}
					break;
				}
				super.leaveAttribute(___uri, ___local, ___qname);
				break;
			}
		}

		@Override
		public void leaveElement(java.lang.String ___uri,
				java.lang.String ___local, java.lang.String ___qname)
				throws org.xml.sax.SAXException {
			int attIdx;
			outer: while (true) {
				switch (state) {
				case 0:
					attIdx = context.getAttribute("", "consecutive");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 3;
						eatText1(v);
						continue outer;
					}
					state = 3;
					continue outer;
				case 6:
					attIdx = context.getAttribute("", "length");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 9;
						eatText2(v);
						continue outer;
					}
					state = 9;
					continue outer;
				case 12:
					revertToParentFromLeaveElement(___uri, ___local, ___qname);
					return;
				case 9:
					attIdx = context.getAttribute("", "subId");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 12;
						eatText3(v);
						continue outer;
					}
					state = 12;
					continue outer;
				case 3:
					attIdx = context.getAttribute("", "id");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 6;
						eatText4(v);
						continue outer;
					}
					state = 6;
					continue outer;
				}
				super.leaveElement(___uri, ___local, ___qname);
				break;
			}
		}

		@Override
		public java.lang.Object owner() {
			return mila.generated.impl.MultiWordTypeImpl.this;
		}

	}

	protected boolean has_SubId;
	protected int _SubId;
	protected boolean has_Length;
	protected int _Length;
	protected boolean has_Consecutive;
	protected boolean _Consecutive;
	protected java.lang.String _Id;
	public final static java.lang.Class version = (mila.generated.impl.JAXBVersion.class);

	private static com.sun.msv.grammar.Grammar schemaFragment;

	private final static java.lang.Class PRIMARY_INTERFACE_CLASS() {
		return (mila.generated.MultiWordType.class);
	}

	@Override
	public com.sun.msv.verifier.DocumentDeclaration createRawValidator() {
		if (schemaFragment == null) {
			schemaFragment = com.sun.xml.bind.validator.SchemaDeserializer
					.deserialize(("\u00ac\u00ed\u0000\u0005sr\u0000\u001fcom.sun.msv.grammar.SequenceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.su"
							+ "n.msv.grammar.BinaryExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0004exp1t\u0000 Lcom/sun/msv/gra"
							+ "mmar/Expression;L\u0000\u0004exp2q\u0000~\u0000\u0002xr\u0000\u001ecom.sun.msv.grammar.Expressi"
							+ "on\u00f8\u0018\u0082\u00e8N5~O\u0002\u0000\u0002L\u0000\u0013epsilonReducibilityt\u0000\u0013Ljava/lang/Boolean;L\u0000\u000b"
							+ "expandedExpq\u0000~\u0000\u0002xpppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsr\u0000\u001dcom.sun.msv.grammar."
							+ "ChoiceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0001ppsr\u0000 com.sun.msv.grammar.Attribut"
							+ "eExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0003expq\u0000~\u0000\u0002L\u0000\tnameClasst\u0000\u001fLcom/sun/msv/gramma"
							+ "r/NameClass;xq\u0000~\u0000\u0003sr\u0000\u0011java.lang.Boolean\u00cd r\u0080\u00d5\u009c\u00fa\u00ee\u0002\u0000\u0001Z\u0000\u0005valuexp"
							+ "\u0000psr\u0000\u001bcom.sun.msv.grammar.DataExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\u0002dtt\u0000\u001fLorg/rel"
							+ "axng/datatype/Datatype;L\u0000\u0006exceptq\u0000~\u0000\u0002L\u0000\u0004namet\u0000\u001dLcom/sun/msv/"
							+ "util/StringPair;xq\u0000~\u0000\u0003ppsr\u0000$com.sun.msv.datatype.xsd.Boolean"
							+ "Type\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000*com.sun.msv.datatype.xsd.BuiltinAtomicTyp"
							+ "e\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000%com.sun.msv.datatype.xsd.ConcreteType\u0000\u0000\u0000\u0000\u0000\u0000\u0000"
							+ "\u0001\u0002\u0000\u0000xr\u0000\'com.sun.msv.datatype.xsd.XSDatatypeImpl\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000"
							+ "\fnamespaceUrit\u0000\u0012Ljava/lang/String;L\u0000\btypeNameq\u0000~\u0000\u0017L\u0000\nwhiteSp"
							+ "acet\u0000.Lcom/sun/msv/datatype/xsd/WhiteSpaceProcessor;xpt\u0000 htt"
							+ "p://www.w3.org/2001/XMLSchemat\u0000\u0007booleansr\u00005com.sun.msv.datat"
							+ "ype.xsd.WhiteSpaceProcessor$Collapse\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000,com.sun.m"
							+ "sv.datatype.xsd.WhiteSpaceProcessor\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xpsr\u00000com.sun."
							+ "msv.grammar.Expression$NullSetExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003pps"
							+ "r\u0000\u001bcom.sun.msv.util.StringPair\u00d0t\u001ejB\u008f\u008d\u00a0\u0002\u0000\u0002L\u0000\tlocalNameq\u0000~\u0000\u0017L\u0000"
							+ "\fnamespaceURIq\u0000~\u0000\u0017xpq\u0000~\u0000\u001bq\u0000~\u0000\u001asr\u0000#com.sun.msv.grammar.Simple"
							+ "NameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\tlocalNameq\u0000~\u0000\u0017L\u0000\fnamespaceURIq\u0000~\u0000\u0017xr\u0000"
							+ "\u001dcom.sun.msv.grammar.NameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xpt\u0000\u000bconsecutivet\u0000\u0000"
							+ "sr\u00000com.sun.msv.grammar.Expression$EpsilonExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001"
							+ "\u0002\u0000\u0000xq\u0000~\u0000\u0003sq\u0000~\u0000\r\u0001q\u0000~\u0000)sq\u0000~\u0000\bppsq\u0000~\u0000\nq\u0000~\u0000\u000epsq\u0000~\u0000\u000fppsr\u0000\"com.sun"
							+ ".msv.datatype.xsd.TokenType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000#com.sun.msv.dataty"
							+ "pe.xsd.StringType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001Z\u0000\risAlwaysValidxq\u0000~\u0000\u0014q\u0000~\u0000\u001at\u0000\u0005to"
							+ "kenq\u0000~\u0000\u001e\u0001q\u0000~\u0000 sq\u0000~\u0000!q\u0000~\u00001q\u0000~\u0000\u001asq\u0000~\u0000#t\u0000\u0002idq\u0000~\u0000\'q\u0000~\u0000)sq\u0000~\u0000\bpps"
							+ "q\u0000~\u0000\nq\u0000~\u0000\u000epsq\u0000~\u0000\u000fppsr\u0000 com.sun.msv.datatype.xsd.IntType\u0000\u0000\u0000\u0000\u0000"
							+ "\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000+com.sun.msv.datatype.xsd.IntegerDerivedType\u0099\u00f1]\u0090&6k"
							+ "\u00be\u0002\u0000\u0001L\u0000\nbaseFacetst\u0000)Lcom/sun/msv/datatype/xsd/XSDatatypeImpl"
							+ ";xq\u0000~\u0000\u0014q\u0000~\u0000\u001at\u0000\u0003intq\u0000~\u0000\u001esr\u0000*com.sun.msv.datatype.xsd.MaxInclu"
							+ "siveFacet\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000#com.sun.msv.datatype.xsd.RangeFacet\u0000"
							+ "\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\nlimitValuet\u0000\u0012Ljava/lang/Object;xr\u00009com.sun.msv."
							+ "datatype.xsd.DataTypeWithValueConstraintFacet\"\u00a7Ro\u00ca\u00c7\u008aT\u0002\u0000\u0000xr\u0000*"
							+ "com.sun.msv.datatype.xsd.DataTypeWithFacet\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0005Z\u0000\fisFa"
							+ "cetFixedZ\u0000\u0012needValueCheckFlagL\u0000\bbaseTypeq\u0000~\u0000:L\u0000\fconcreteType"
							+ "t\u0000\'Lcom/sun/msv/datatype/xsd/ConcreteType;L\u0000\tfacetNameq\u0000~\u0000\u0017x"
							+ "q\u0000~\u0000\u0016ppq\u0000~\u0000\u001e\u0000\u0001sr\u0000*com.sun.msv.datatype.xsd.MinInclusiveFacet"
							+ "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000>ppq\u0000~\u0000\u001e\u0000\u0000sr\u0000!com.sun.msv.datatype.xsd.LongT"
							+ "ype\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u00009q\u0000~\u0000\u001at\u0000\u0004longq\u0000~\u0000\u001esq\u0000~\u0000=ppq\u0000~\u0000\u001e\u0000\u0001sq\u0000~\u0000Dpp"
							+ "q\u0000~\u0000\u001e\u0000\u0000sr\u0000$com.sun.msv.datatype.xsd.IntegerType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq"
							+ "\u0000~\u00009q\u0000~\u0000\u001at\u0000\u0007integerq\u0000~\u0000\u001esr\u0000,com.sun.msv.datatype.xsd.Fractio"
							+ "nDigitsFacet\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001I\u0000\u0005scalexr\u0000;com.sun.msv.datatype.xsd."
							+ "DataTypeWithLexicalConstraintFacetT\u0090\u001c>\u001azb\u00ea\u0002\u0000\u0000xq\u0000~\u0000Appq\u0000~\u0000\u001e\u0001\u0000"
							+ "sr\u0000#com.sun.msv.datatype.xsd.NumberType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0014q\u0000~\u0000"
							+ "\u001at\u0000\u0007decimalq\u0000~\u0000\u001eq\u0000~\u0000Rt\u0000\u000efractionDigits\u0000\u0000\u0000\u0000q\u0000~\u0000Lt\u0000\fminInclusi"
							+ "vesr\u0000\u000ejava.lang.Long;\u008b\u00e4\u0090\u00cc\u008f#\u00df\u0002\u0000\u0001J\u0000\u0005valuexr\u0000\u0010java.lang.Number\u0086"
							+ "\u00ac\u0095\u001d\u000b\u0094\u00e0\u008b\u0002\u0000\u0000xp\u0080\u0000\u0000\u0000\u0000\u0000\u0000\u0000q\u0000~\u0000Lt\u0000\fmaxInclusivesq\u0000~\u0000V\u007f\u00ff\u00ff\u00ff\u00ff\u00ff\u00ff\u00ffq\u0000~\u0000Gq"
							+ "\u0000~\u0000Usr\u0000\u0011java.lang.Integer\u0012\u00e2\u00a0\u00a4\u00f7\u0081\u00878\u0002\u0000\u0001I\u0000\u0005valuexq\u0000~\u0000W\u0080\u0000\u0000\u0000q\u0000~\u0000Gq"
							+ "\u0000~\u0000Ysq\u0000~\u0000[\u007f\u00ff\u00ff\u00ffq\u0000~\u0000 sq\u0000~\u0000!q\u0000~\u0000<q\u0000~\u0000\u001asq\u0000~\u0000#t\u0000\u0006lengthq\u0000~\u0000\'q\u0000~\u0000)"
							+ "sq\u0000~\u0000\bppsq\u0000~\u0000\nq\u0000~\u0000\u000epq\u0000~\u00007sq\u0000~\u0000#t\u0000\u0005subIdq\u0000~\u0000\'q\u0000~\u0000)sr\u0000\"com.sun"
							+ ".msv.grammar.ExpressionPool\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\bexpTablet\u0000/Lcom/sun"
							+ "/msv/grammar/ExpressionPool$ClosedHash;xpsr\u0000-com.sun.msv.gra"
							+ "mmar.ExpressionPool$ClosedHash\u00d7j\u00d0N\u00ef\u00e8\u00ed\u001c\u0003\u0000\u0003I\u0000\u0005countB\u0000\rstreamVe"
							+ "rsionL\u0000\u0006parentt\u0000$Lcom/sun/msv/grammar/ExpressionPool;xp\u0000\u0000\u0000\u0007\u0001"
							+ "pq\u0000~\u0000\u0005q\u0000~\u00005q\u0000~\u0000\tq\u0000~\u0000\u0006q\u0000~\u0000aq\u0000~\u0000\u0007q\u0000~\u0000+x"));
		}
		return new com.sun.msv.verifier.regexp.REDocumentDeclaration(
				schemaFragment);
	}

	@Override
	public mila.generated.impl.runtime.UnmarshallingEventHandler createUnmarshaller(
			mila.generated.impl.runtime.UnmarshallingContext context) {
		return new mila.generated.impl.MultiWordTypeImpl.Unmarshaller(context);
	}

	@Override
	public java.lang.String getId() {
		return _Id;
	}

	@Override
	public int getLength() {
		return _Length;
	}

	@Override
	public java.lang.Class getPrimaryInterface() {
		return (mila.generated.MultiWordType.class);
	}

	@Override
	public int getSubId() {
		return _SubId;
	}

	@Override
	public boolean isConsecutive() {
		if (!has_Consecutive) {
			return javax.xml.bind.DatatypeConverter
					.parseBoolean(com.sun.xml.bind.DatatypeConverterImpl
							.installHook("true"));
		} else {
			return _Consecutive;
		}
	}

	@Override
	public void serializeAttributes(mila.generated.impl.runtime.XMLSerializer context)
			throws org.xml.sax.SAXException {
		if (has_Consecutive) {
			context.startAttribute("", "consecutive");
			try {
				context.text(javax.xml.bind.DatatypeConverter
						.printBoolean(_Consecutive), "Consecutive");
			} catch (java.lang.Exception e) {
				mila.generated.impl.runtime.Util.handlePrintConversionException(
						this, e, context);
			}
			context.endAttribute();
		}
		if (_Id != null) {
			context.startAttribute("", "id");
			try {
				context.text(_Id, "Id");
			} catch (java.lang.Exception e) {
				mila.generated.impl.runtime.Util.handlePrintConversionException(
						this, e, context);
			}
			context.endAttribute();
		}
		if (has_Length) {
			context.startAttribute("", "length");
			try {
				context.text(
						javax.xml.bind.DatatypeConverter.printInt(_Length),
						"Length");
			} catch (java.lang.Exception e) {
				mila.generated.impl.runtime.Util.handlePrintConversionException(
						this, e, context);
			}
			context.endAttribute();
		}
		if (has_SubId) {
			context.startAttribute("", "subId");
			try {
				context.text(javax.xml.bind.DatatypeConverter.printInt(_SubId),
						"SubId");
			} catch (java.lang.Exception e) {
				mila.generated.impl.runtime.Util.handlePrintConversionException(
						this, e, context);
			}
			context.endAttribute();
		}
	}

	@Override
	public void serializeBody(mila.generated.impl.runtime.XMLSerializer context)
			throws org.xml.sax.SAXException {
	}

	@Override
	public void serializeURIs(mila.generated.impl.runtime.XMLSerializer context)
			throws org.xml.sax.SAXException {
	}

	@Override
	public void setConsecutive(boolean value) {
		_Consecutive = value;
		has_Consecutive = true;
	}

	@Override
	public void setId(java.lang.String value) {
		_Id = value;
	}

	@Override
	public void setLength(int value) {
		_Length = value;
		has_Length = true;
	}

	@Override
	public void setSubId(int value) {
		_SubId = value;
		has_SubId = true;
	}

}
