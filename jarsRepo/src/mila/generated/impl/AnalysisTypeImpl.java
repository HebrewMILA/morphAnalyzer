//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v1.0.5-b16-fcs 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2009.06.14 at 03:41:34 PM IDT 
//

package mila.generated.impl;

public class AnalysisTypeImpl implements mila.generated.AnalysisType,
		com.sun.xml.bind.JAXBObject,
		mila.generated.impl.runtime.UnmarshallableObject,
		mila.generated.impl.runtime.XMLSerializable,
		mila.generated.impl.runtime.ValidatableObject {

	public class Unmarshaller extends
			mila.generated.impl.runtime.AbstractUnmarshallingEventHandlerImpl {

		public Unmarshaller(mila.generated.impl.runtime.UnmarshallingContext context) {
			super(context, "------------------");
		}

		protected Unmarshaller(
				mila.generated.impl.runtime.UnmarshallingContext context,
				int startState) {
			this(context);
			state = startState;
		}

		private void eatText1(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_Id = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		private void eatText2(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_Guess = javax.xml.bind.DatatypeConverter
						.parseBoolean(com.sun.xml.bind.WhiteSpaceProcessor
								.collapse(value));
				has_Guess = true;
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		private void eatText3(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_Score = javax.xml.bind.DatatypeConverter
						.parseDouble(com.sun.xml.bind.WhiteSpaceProcessor
								.collapse(value));
				has_Score = true;
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		@Override
		public void enterAttribute(java.lang.String ___uri,
				java.lang.String ___local, java.lang.String ___qname)
				throws org.xml.sax.SAXException {
			int attIdx;
			outer: while (true) {
				switch (state) {
				case 12:
					if (("dottedLexiconItem" == ___local) && ("" == ___uri)) {
						_Base = ((mila.generated.impl.BaseTypeImpl) spawnChildFromEnterAttribute(
								(mila.generated.impl.BaseTypeImpl.class), 13,
								___uri, ___local, ___qname));
						return;
					}
					if (("lexiconItem" == ___local) && ("" == ___uri)) {
						_Base = ((mila.generated.impl.BaseTypeImpl) spawnChildFromEnterAttribute(
								(mila.generated.impl.BaseTypeImpl.class), 13,
								___uri, ___local, ___qname));
						return;
					}
					if (("lexiconPointer" == ___local) && ("" == ___uri)) {
						_Base = ((mila.generated.impl.BaseTypeImpl) spawnChildFromEnterAttribute(
								(mila.generated.impl.BaseTypeImpl.class), 13,
								___uri, ___local, ___qname));
						return;
					}
					if (("transliteratedLexiconItem" == ___local)
							&& ("" == ___uri)) {
						_Base = ((mila.generated.impl.BaseTypeImpl) spawnChildFromEnterAttribute(
								(mila.generated.impl.BaseTypeImpl.class), 13,
								___uri, ___local, ___qname));
						return;
					}
					break;
				case 17:
					revertToParentFromEnterAttribute(___uri, ___local, ___qname);
					return;
				case 3:
					if (("id" == ___local) && ("" == ___uri)) {
						state = 4;
						return;
					}
					break;
				case 15:
					if (("function" == ___local) && ("" == ___uri)) {
						_Suffix = ((mila.generated.impl.SuffixTypeImpl) spawnChildFromEnterAttribute(
								(mila.generated.impl.SuffixTypeImpl.class), 16,
								___uri, ___local, ___qname));
						return;
					}
					if (("gender" == ___local) && ("" == ___uri)) {
						_Suffix = ((mila.generated.impl.SuffixTypeImpl) spawnChildFromEnterAttribute(
								(mila.generated.impl.SuffixTypeImpl.class), 16,
								___uri, ___local, ___qname));
						return;
					}
					if (("number" == ___local) && ("" == ___uri)) {
						_Suffix = ((mila.generated.impl.SuffixTypeImpl) spawnChildFromEnterAttribute(
								(mila.generated.impl.SuffixTypeImpl.class), 16,
								___uri, ___local, ___qname));
						return;
					}
					if (("person" == ___local) && ("" == ___uri)) {
						_Suffix = ((mila.generated.impl.SuffixTypeImpl) spawnChildFromEnterAttribute(
								(mila.generated.impl.SuffixTypeImpl.class), 16,
								___uri, ___local, ___qname));
						return;
					}
					if (("surface" == ___local) && ("" == ___uri)) {
						_Suffix = ((mila.generated.impl.SuffixTypeImpl) spawnChildFromEnterAttribute(
								(mila.generated.impl.SuffixTypeImpl.class), 16,
								___uri, ___local, ___qname));
						return;
					}
					if (("transliterated" == ___local) && ("" == ___uri)) {
						_Suffix = ((mila.generated.impl.SuffixTypeImpl) spawnChildFromEnterAttribute(
								(mila.generated.impl.SuffixTypeImpl.class), 16,
								___uri, ___local, ___qname));
						return;
					}
					_Suffix = ((mila.generated.impl.SuffixTypeImpl) spawnChildFromEnterAttribute(
							(mila.generated.impl.SuffixTypeImpl.class), 16, ___uri,
							___local, ___qname));
					return;
				case 14:
					state = 17;
					continue outer;
				case 10:
					if (("function" == ___local) && ("" == ___uri)) {
						_getPrefix().add(
								spawnChildFromEnterAttribute(
										(mila.generated.impl.PrefixTypeImpl.class),
										11, ___uri, ___local, ___qname));
						return;
					}
					if (("id" == ___local) && ("" == ___uri)) {
						_getPrefix().add(
								spawnChildFromEnterAttribute(
										(mila.generated.impl.PrefixTypeImpl.class),
										11, ___uri, ___local, ___qname));
						return;
					}
					break;
				case 0:
					if (("guess" == ___local) && ("" == ___uri)) {
						state = 1;
						return;
					}
					state = 3;
					continue outer;
				case 6:
					if (("score" == ___local) && ("" == ___uri)) {
						state = 7;
						return;
					}
					state = 9;
					continue outer;
				case 9:
					state = 14;
					continue outer;
				}
				super.enterAttribute(___uri, ___local, ___qname);
				break;
			}
		}

		@Override
		public void enterElement(java.lang.String ___uri,
				java.lang.String ___local, java.lang.String ___qname,
				org.xml.sax.Attributes __atts) throws org.xml.sax.SAXException {
			int attIdx;
			outer: while (true) {
				switch (state) {
				case 12:
					attIdx = context.getAttribute("", "dottedLexiconItem");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					attIdx = context.getAttribute("", "lexiconItem");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					attIdx = context.getAttribute("", "lexiconPointer");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					attIdx = context.getAttribute("",
							"transliteratedLexiconItem");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					if (("adjective" == ___local) && ("" == ___uri)) {
						_Base = ((mila.generated.impl.BaseTypeImpl) spawnChildFromEnterElement(
								(mila.generated.impl.BaseTypeImpl.class), 13,
								___uri, ___local, ___qname, __atts));
						return;
					}
					if (("adverb" == ___local) && ("" == ___uri)) {
						_Base = ((mila.generated.impl.BaseTypeImpl) spawnChildFromEnterElement(
								(mila.generated.impl.BaseTypeImpl.class), 13,
								___uri, ___local, ___qname, __atts));
						return;
					}
					if (("zevel" == ___local) && ("" == ___uri)) {
						_Base = ((mila.generated.impl.BaseTypeImpl) spawnChildFromEnterElement(
								(mila.generated.impl.BaseTypeImpl.class), 13,
								___uri, ___local, ___qname, __atts));
						return;
					}
					if (("conjunction" == ___local) && ("" == ___uri)) {
						_Base = ((mila.generated.impl.BaseTypeImpl) spawnChildFromEnterElement(
								(mila.generated.impl.BaseTypeImpl.class), 13,
								___uri, ___local, ___qname, __atts));
						return;
					}
					if (("interjection" == ___local) && ("" == ___uri)) {
						_Base = ((mila.generated.impl.BaseTypeImpl) spawnChildFromEnterElement(
								(mila.generated.impl.BaseTypeImpl.class), 13,
								___uri, ___local, ___qname, __atts));
						return;
					}
					if (("interrogative" == ___local) && ("" == ___uri)) {
						_Base = ((mila.generated.impl.BaseTypeImpl) spawnChildFromEnterElement(
								(mila.generated.impl.BaseTypeImpl.class), 13,
								___uri, ___local, ___qname, __atts));
						return;
					}
					if (("negation" == ___local) && ("" == ___uri)) {
						_Base = ((mila.generated.impl.BaseTypeImpl) spawnChildFromEnterElement(
								(mila.generated.impl.BaseTypeImpl.class), 13,
								___uri, ___local, ___qname, __atts));
						return;
					}
					if (("foreign" == ___local) && ("" == ___uri)) {
						_Base = ((mila.generated.impl.BaseTypeImpl) spawnChildFromEnterElement(
								(mila.generated.impl.BaseTypeImpl.class), 13,
								___uri, ___local, ___qname, __atts));
						return;
					}
					if (("url" == ___local) && ("" == ___uri)) {
						_Base = ((mila.generated.impl.BaseTypeImpl) spawnChildFromEnterElement(
								(mila.generated.impl.BaseTypeImpl.class), 13,
								___uri, ___local, ___qname, __atts));
						return;
					}
					if (("noun" == ___local) && ("" == ___uri)) {
						_Base = ((mila.generated.impl.BaseTypeImpl) spawnChildFromEnterElement(
								(mila.generated.impl.BaseTypeImpl.class), 13,
								___uri, ___local, ___qname, __atts));
						return;
					}
					if (("preposition" == ___local) && ("" == ___uri)) {
						_Base = ((mila.generated.impl.BaseTypeImpl) spawnChildFromEnterElement(
								(mila.generated.impl.BaseTypeImpl.class), 13,
								___uri, ___local, ___qname, __atts));
						return;
					}
					if (("pronoun" == ___local) && ("" == ___uri)) {
						_Base = ((mila.generated.impl.BaseTypeImpl) spawnChildFromEnterElement(
								(mila.generated.impl.BaseTypeImpl.class), 13,
								___uri, ___local, ___qname, __atts));
						return;
					}
					if (("properName" == ___local) && ("" == ___uri)) {
						_Base = ((mila.generated.impl.BaseTypeImpl) spawnChildFromEnterElement(
								(mila.generated.impl.BaseTypeImpl.class), 13,
								___uri, ___local, ___qname, __atts));
						return;
					}
					if (("punctuation" == ___local) && ("" == ___uri)) {
						_Base = ((mila.generated.impl.BaseTypeImpl) spawnChildFromEnterElement(
								(mila.generated.impl.BaseTypeImpl.class), 13,
								___uri, ___local, ___qname, __atts));
						return;
					}
					if (("numberExpression" == ___local) && ("" == ___uri)) {
						_Base = ((mila.generated.impl.BaseTypeImpl) spawnChildFromEnterElement(
								(mila.generated.impl.BaseTypeImpl.class), 13,
								___uri, ___local, ___qname, __atts));
						return;
					}
					if (("quantifier" == ___local) && ("" == ___uri)) {
						_Base = ((mila.generated.impl.BaseTypeImpl) spawnChildFromEnterElement(
								(mila.generated.impl.BaseTypeImpl.class), 13,
								___uri, ___local, ___qname, __atts));
						return;
					}
					if (("verb" == ___local) && ("" == ___uri)) {
						_Base = ((mila.generated.impl.BaseTypeImpl) spawnChildFromEnterElement(
								(mila.generated.impl.BaseTypeImpl.class), 13,
								___uri, ___local, ___qname, __atts));
						return;
					}
					if (("participle" == ___local) && ("" == ___uri)) {
						_Base = ((mila.generated.impl.BaseTypeImpl) spawnChildFromEnterElement(
								(mila.generated.impl.BaseTypeImpl.class), 13,
								___uri, ___local, ___qname, __atts));
						return;
					}
					if (("numeral" == ___local) && ("" == ___uri)) {
						_Base = ((mila.generated.impl.BaseTypeImpl) spawnChildFromEnterElement(
								(mila.generated.impl.BaseTypeImpl.class), 13,
								___uri, ___local, ___qname, __atts));
						return;
					}
					if (("existential" == ___local) && ("" == ___uri)) {
						_Base = ((mila.generated.impl.BaseTypeImpl) spawnChildFromEnterElement(
								(mila.generated.impl.BaseTypeImpl.class), 13,
								___uri, ___local, ___qname, __atts));
						return;
					}
					if (("impersonal" == ___local) && ("" == ___uri)) {
						_Base = ((mila.generated.impl.BaseTypeImpl) spawnChildFromEnterElement(
								(mila.generated.impl.BaseTypeImpl.class), 13,
								___uri, ___local, ___qname, __atts));
						return;
					}
					if (("wPrefix" == ___local) && ("" == ___uri)) {
						_Base = ((mila.generated.impl.BaseTypeImpl) spawnChildFromEnterElement(
								(mila.generated.impl.BaseTypeImpl.class), 13,
								___uri, ___local, ___qname, __atts));
						return;
					}
					if (("modal" == ___local) && ("" == ___uri)) {
						_Base = ((mila.generated.impl.BaseTypeImpl) spawnChildFromEnterElement(
								(mila.generated.impl.BaseTypeImpl.class), 13,
								___uri, ___local, ___qname, __atts));
						return;
					}
					if (("copula" == ___local) && ("" == ___uri)) {
						_Base = ((mila.generated.impl.BaseTypeImpl) spawnChildFromEnterElement(
								(mila.generated.impl.BaseTypeImpl.class), 13,
								___uri, ___local, ___qname, __atts));
						return;
					}
					if (("title" == ___local) && ("" == ___uri)) {
						_Base = ((mila.generated.impl.BaseTypeImpl) spawnChildFromEnterElement(
								(mila.generated.impl.BaseTypeImpl.class), 13,
								___uri, ___local, ___qname, __atts));
						return;
					}
					if (("MWE" == ___local) && ("" == ___uri)) {
						_Base = ((mila.generated.impl.BaseTypeImpl) spawnChildFromEnterElement(
								(mila.generated.impl.BaseTypeImpl.class), 13,
								___uri, ___local, ___qname, __atts));
						return;
					}
					if (("unknown" == ___local) && ("" == ___uri)) {
						_Base = ((mila.generated.impl.BaseTypeImpl) spawnChildFromEnterElement(
								(mila.generated.impl.BaseTypeImpl.class), 13,
								___uri, ___local, ___qname, __atts));
						return;
					}
					break;
				case 17:
					revertToParentFromEnterElement(___uri, ___local, ___qname,
							__atts);
					return;
				case 3:
					attIdx = context.getAttribute("", "id");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 6;
						eatText1(v);
						continue outer;
					}
					break;
				case 15:
					attIdx = context.getAttribute("", "function");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					attIdx = context.getAttribute("", "gender");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					attIdx = context.getAttribute("", "number");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					attIdx = context.getAttribute("", "person");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					attIdx = context.getAttribute("", "surface");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					attIdx = context.getAttribute("", "transliterated");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					_Suffix = ((mila.generated.impl.SuffixTypeImpl) spawnChildFromEnterElement(
							(mila.generated.impl.SuffixTypeImpl.class), 16, ___uri,
							___local, ___qname, __atts));
					return;
				case 14:
					if (("suffix" == ___local) && ("" == ___uri)) {
						context.pushAttributes(__atts, false);
						state = 15;
						return;
					}
					state = 17;
					continue outer;
				case 10:
					attIdx = context.getAttribute("", "function");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					attIdx = context.getAttribute("", "id");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					break;
				case 0:
					attIdx = context.getAttribute("", "guess");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 3;
						eatText2(v);
						continue outer;
					}
					state = 3;
					continue outer;
				case 6:
					attIdx = context.getAttribute("", "score");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 9;
						eatText3(v);
						continue outer;
					}
					state = 9;
					continue outer;
				case 9:
					if (("prefix" == ___local) && ("" == ___uri)) {
						context.pushAttributes(__atts, false);
						state = 10;
						return;
					}
					if (("base" == ___local) && ("" == ___uri)) {
						context.pushAttributes(__atts, false);
						state = 12;
						return;
					}
					state = 14;
					continue outer;
				}
				super.enterElement(___uri, ___local, ___qname, __atts);
				break;
			}
		}

		@Override
		public void handleText(final java.lang.String value)
				throws org.xml.sax.SAXException {
			int attIdx;
			outer: while (true) {
				try {
					switch (state) {
					case 12:
						attIdx = context.getAttribute("", "dottedLexiconItem");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						attIdx = context.getAttribute("", "lexiconItem");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						attIdx = context.getAttribute("", "lexiconPointer");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						attIdx = context.getAttribute("",
								"transliteratedLexiconItem");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						break;
					case 17:
						revertToParentFromText(value);
						return;
					case 4:
						state = 5;
						eatText1(value);
						return;
					case 1:
						state = 2;
						eatText2(value);
						return;
					case 3:
						attIdx = context.getAttribute("", "id");
						if (attIdx >= 0) {
							final java.lang.String v = context
									.eatAttribute(attIdx);
							state = 6;
							eatText1(v);
							continue outer;
						}
						break;
					case 15:
						attIdx = context.getAttribute("", "function");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						attIdx = context.getAttribute("", "gender");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						attIdx = context.getAttribute("", "number");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						attIdx = context.getAttribute("", "person");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						attIdx = context.getAttribute("", "surface");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						attIdx = context.getAttribute("", "transliterated");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						_Suffix = ((mila.generated.impl.SuffixTypeImpl) spawnChildFromText(
								(mila.generated.impl.SuffixTypeImpl.class), 16,
								value));
						return;
					case 7:
						state = 8;
						eatText3(value);
						return;
					case 14:
						state = 17;
						continue outer;
					case 10:
						attIdx = context.getAttribute("", "function");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						attIdx = context.getAttribute("", "id");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						break;
					case 0:
						attIdx = context.getAttribute("", "guess");
						if (attIdx >= 0) {
							final java.lang.String v = context
									.eatAttribute(attIdx);
							state = 3;
							eatText2(v);
							continue outer;
						}
						state = 3;
						continue outer;
					case 6:
						attIdx = context.getAttribute("", "score");
						if (attIdx >= 0) {
							final java.lang.String v = context
									.eatAttribute(attIdx);
							state = 9;
							eatText3(v);
							continue outer;
						}
						state = 9;
						continue outer;
					case 9:
						state = 14;
						continue outer;
					}
				} catch (java.lang.RuntimeException e) {
					handleUnexpectedTextException(value, e);
				}
				break;
			}
		}

		@Override
		public void leaveAttribute(java.lang.String ___uri,
				java.lang.String ___local, java.lang.String ___qname)
				throws org.xml.sax.SAXException {
			int attIdx;
			outer: while (true) {
				switch (state) {
				case 12:
					attIdx = context.getAttribute("", "dottedLexiconItem");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "lexiconItem");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "lexiconPointer");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("",
							"transliteratedLexiconItem");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					break;
				case 17:
					revertToParentFromLeaveAttribute(___uri, ___local, ___qname);
					return;
				case 3:
					attIdx = context.getAttribute("", "id");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 6;
						eatText1(v);
						continue outer;
					}
					break;
				case 15:
					attIdx = context.getAttribute("", "function");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "gender");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "number");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "person");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "surface");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "transliterated");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					_Suffix = ((mila.generated.impl.SuffixTypeImpl) spawnChildFromLeaveAttribute(
							(mila.generated.impl.SuffixTypeImpl.class), 16, ___uri,
							___local, ___qname));
					return;
				case 14:
					state = 17;
					continue outer;
				case 10:
					attIdx = context.getAttribute("", "function");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "id");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					break;
				case 5:
					if (("id" == ___local) && ("" == ___uri)) {
						state = 6;
						return;
					}
					break;
				case 0:
					attIdx = context.getAttribute("", "guess");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 3;
						eatText2(v);
						continue outer;
					}
					state = 3;
					continue outer;
				case 6:
					attIdx = context.getAttribute("", "score");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 9;
						eatText3(v);
						continue outer;
					}
					state = 9;
					continue outer;
				case 2:
					if (("guess" == ___local) && ("" == ___uri)) {
						state = 3;
						return;
					}
					break;
				case 9:
					state = 14;
					continue outer;
				case 8:
					if (("score" == ___local) && ("" == ___uri)) {
						state = 9;
						return;
					}
					break;
				}
				super.leaveAttribute(___uri, ___local, ___qname);
				break;
			}
		}

		@Override
		public void leaveElement(java.lang.String ___uri,
				java.lang.String ___local, java.lang.String ___qname)
				throws org.xml.sax.SAXException {
			int attIdx;
			outer: while (true) {
				switch (state) {
				case 16:
					if (("suffix" == ___local) && ("" == ___uri)) {
						context.popAttributes();
						state = 17;
						return;
					}
					break;
				case 12:
					attIdx = context.getAttribute("", "dottedLexiconItem");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "lexiconItem");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "lexiconPointer");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("",
							"transliteratedLexiconItem");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					break;
				case 17:
					revertToParentFromLeaveElement(___uri, ___local, ___qname);
					return;
				case 11:
					if (("prefix" == ___local) && ("" == ___uri)) {
						context.popAttributes();
						state = 9;
						return;
					}
					break;
				case 3:
					attIdx = context.getAttribute("", "id");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 6;
						eatText1(v);
						continue outer;
					}
					break;
				case 15:
					attIdx = context.getAttribute("", "function");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "gender");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "number");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "person");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "surface");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "transliterated");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					_Suffix = ((mila.generated.impl.SuffixTypeImpl) spawnChildFromLeaveElement(
							(mila.generated.impl.SuffixTypeImpl.class), 16, ___uri,
							___local, ___qname));
					return;
				case 14:
					state = 17;
					continue outer;
				case 10:
					attIdx = context.getAttribute("", "function");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					attIdx = context.getAttribute("", "id");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					break;
				case 13:
					if (("base" == ___local) && ("" == ___uri)) {
						context.popAttributes();
						state = 14;
						return;
					}
					break;
				case 0:
					attIdx = context.getAttribute("", "guess");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 3;
						eatText2(v);
						continue outer;
					}
					state = 3;
					continue outer;
				case 6:
					attIdx = context.getAttribute("", "score");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 9;
						eatText3(v);
						continue outer;
					}
					state = 9;
					continue outer;
				case 9:
					state = 14;
					continue outer;
				}
				super.leaveElement(___uri, ___local, ___qname);
				break;
			}
		}

		@Override
		public java.lang.Object owner() {
			return mila.generated.impl.AnalysisTypeImpl.this;
		}

	}

	protected mila.generated.BaseType _Base;
	protected com.sun.xml.bind.util.ListImpl _Prefix;
	protected boolean has_Score;
	protected double _Score;
	protected boolean has_Guess;
	protected boolean _Guess;
	protected java.lang.String _Id;
	protected mila.generated.SuffixType _Suffix;
	public final static java.lang.Class version = (mila.generated.impl.JAXBVersion.class);

	private static com.sun.msv.grammar.Grammar schemaFragment;

	private final static java.lang.Class PRIMARY_INTERFACE_CLASS() {
		return (mila.generated.AnalysisType.class);
	}

	protected com.sun.xml.bind.util.ListImpl _getPrefix() {
		if (_Prefix == null) {
			_Prefix = new com.sun.xml.bind.util.ListImpl(
					new java.util.ArrayList());
		}
		return _Prefix;
	}

	@Override
	public com.sun.msv.verifier.DocumentDeclaration createRawValidator() {
		if (schemaFragment == null) {
			schemaFragment = com.sun.xml.bind.validator.SchemaDeserializer
					.deserialize(("\u00ac\u00ed\u0000\u0005sr\u0000\u001fcom.sun.msv.grammar.SequenceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.su"
							+ "n.msv.grammar.BinaryExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0004exp1t\u0000 Lcom/sun/msv/gra"
							+ "mmar/Expression;L\u0000\u0004exp2q\u0000~\u0000\u0002xr\u0000\u001ecom.sun.msv.grammar.Expressi"
							+ "on\u00f8\u0018\u0082\u00e8N5~O\u0002\u0000\u0002L\u0000\u0013epsilonReducibilityt\u0000\u0013Ljava/lang/Boolean;L\u0000\u000b"
							+ "expandedExpq\u0000~\u0000\u0002xpppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsr\u0000\u001dcom."
							+ "sun.msv.grammar.ChoiceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0001ppsq\u0000~\u0000\u0000sr\u0000\u0011java.l"
							+ "ang.Boolean\u00cd r\u0080\u00d5\u009c\u00fa\u00ee\u0002\u0000\u0001Z\u0000\u0005valuexp\u0000psr\u0000\'com.sun.msv.grammar.tr"
							+ "ex.ElementPattern\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\tnameClasst\u0000\u001fLcom/sun/msv/gram"
							+ "mar/NameClass;xr\u0000\u001ecom.sun.msv.grammar.ElementExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002Z"
							+ "\u0000\u001aignoreUndeclaredAttributesL\u0000\fcontentModelq\u0000~\u0000\u0002xq\u0000~\u0000\u0003q\u0000~\u0000\u000ep"
							+ "\u0000sq\u0000~\u0000\u0000ppsq\u0000~\u0000\u000fpp\u0000sq\u0000~\u0000\nppsr\u0000 com.sun.msv.grammar.OneOrMoreE"
							+ "xp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001ccom.sun.msv.grammar.UnaryExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\u0003e"
							+ "xpq\u0000~\u0000\u0002xq\u0000~\u0000\u0003q\u0000~\u0000\u000epsr\u0000 com.sun.msv.grammar.AttributeExp\u0000\u0000\u0000\u0000\u0000"
							+ "\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0003expq\u0000~\u0000\u0002L\u0000\tnameClassq\u0000~\u0000\u0010xq\u0000~\u0000\u0003q\u0000~\u0000\u000epsr\u00002com.sun.ms"
							+ "v.grammar.Expression$AnyStringExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003sq\u0000"
							+ "~\u0000\r\u0001q\u0000~\u0000\u001csr\u0000 com.sun.msv.grammar.AnyNameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001d"
							+ "com.sun.msv.grammar.NameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xpsr\u00000com.sun.msv.gr"
							+ "ammar.Expression$EpsilonExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003q\u0000~\u0000\u001dq\u0000~\u0000"
							+ "\"sr\u0000#com.sun.msv.grammar.SimpleNameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\tlocalN"
							+ "amet\u0000\u0012Ljava/lang/String;L\u0000\fnamespaceURIq\u0000~\u0000$xq\u0000~\u0000\u001ft\u0000\u0014generat"
							+ "ed.PrefixTypet\u0000+http://java.sun.com/jaxb/xjc/dummy-elementss"
							+ "q\u0000~\u0000\nppsq\u0000~\u0000\u0019q\u0000~\u0000\u000epsr\u0000\u001bcom.sun.msv.grammar.DataExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000"
							+ "\u0003L\u0000\u0002dtt\u0000\u001fLorg/relaxng/datatype/Datatype;L\u0000\u0006exceptq\u0000~\u0000\u0002L\u0000\u0004nam"
							+ "et\u0000\u001dLcom/sun/msv/util/StringPair;xq\u0000~\u0000\u0003ppsr\u0000\"com.sun.msv.dat"
							+ "atype.xsd.QnameType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000*com.sun.msv.datatype.xsd.B"
							+ "uiltinAtomicType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000%com.sun.msv.datatype.xsd.Conc"
							+ "reteType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\'com.sun.msv.datatype.xsd.XSDatatypeIm"
							+ "pl\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\fnamespaceUriq\u0000~\u0000$L\u0000\btypeNameq\u0000~\u0000$L\u0000\nwhiteSpa"
							+ "cet\u0000.Lcom/sun/msv/datatype/xsd/WhiteSpaceProcessor;xpt\u0000 http"
							+ "://www.w3.org/2001/XMLSchemat\u0000\u0005QNamesr\u00005com.sun.msv.datatype"
							+ ".xsd.WhiteSpaceProcessor$Collapse\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000,com.sun.msv."
							+ "datatype.xsd.WhiteSpaceProcessor\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xpsr\u00000com.sun.msv"
							+ ".grammar.Expression$NullSetExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003ppsr\u0000\u001b"
							+ "com.sun.msv.util.StringPair\u00d0t\u001ejB\u008f\u008d\u00a0\u0002\u0000\u0002L\u0000\tlocalNameq\u0000~\u0000$L\u0000\fna"
							+ "mespaceURIq\u0000~\u0000$xpq\u0000~\u00005q\u0000~\u00004sq\u0000~\u0000#t\u0000\u0004typet\u0000)http://www.w3.org"
							+ "/2001/XMLSchema-instanceq\u0000~\u0000\"sq\u0000~\u0000#t\u0000\u0006prefixt\u0000\u0000sq\u0000~\u0000\nppsq\u0000~\u0000"
							+ "\u0000q\u0000~\u0000\u000epsq\u0000~\u0000\u000fq\u0000~\u0000\u000ep\u0000sq\u0000~\u0000\u0000ppsq\u0000~\u0000\u000fpp\u0000sq\u0000~\u0000\nppsq\u0000~\u0000\u0016q\u0000~\u0000\u000epsq\u0000"
							+ "~\u0000\u0019q\u0000~\u0000\u000epq\u0000~\u0000\u001cq\u0000~\u0000 q\u0000~\u0000\"sq\u0000~\u0000#q\u0000~\u0000&q\u0000~\u0000\'sq\u0000~\u0000\nppsq\u0000~\u0000\u0019q\u0000~\u0000\u000ep"
							+ "q\u0000~\u0000-q\u0000~\u0000=q\u0000~\u0000\"q\u0000~\u0000@sq\u0000~\u0000\nppsq\u0000~\u0000\u0000q\u0000~\u0000\u000epsq\u0000~\u0000\u000fq\u0000~\u0000\u000ep\u0000sq\u0000~\u0000\u0000p"
							+ "psq\u0000~\u0000\u000fpp\u0000sq\u0000~\u0000\nppsq\u0000~\u0000\u0016q\u0000~\u0000\u000epsq\u0000~\u0000\u0019q\u0000~\u0000\u000epq\u0000~\u0000\u001cq\u0000~\u0000 q\u0000~\u0000\"sq\u0000"
							+ "~\u0000#q\u0000~\u0000&q\u0000~\u0000\'sq\u0000~\u0000\nppsq\u0000~\u0000\u0019q\u0000~\u0000\u000epq\u0000~\u0000-q\u0000~\u0000=q\u0000~\u0000\"q\u0000~\u0000@sq\u0000~\u0000\np"
							+ "psq\u0000~\u0000\u0000q\u0000~\u0000\u000epsq\u0000~\u0000\u000fq\u0000~\u0000\u000ep\u0000sq\u0000~\u0000\u0000ppsq\u0000~\u0000\u000fpp\u0000sq\u0000~\u0000\nppsq\u0000~\u0000\u0016q\u0000~"
							+ "\u0000\u000epsq\u0000~\u0000\u0019q\u0000~\u0000\u000epq\u0000~\u0000\u001cq\u0000~\u0000 q\u0000~\u0000\"sq\u0000~\u0000#q\u0000~\u0000&q\u0000~\u0000\'sq\u0000~\u0000\nppsq\u0000~\u0000\u0019"
							+ "q\u0000~\u0000\u000epq\u0000~\u0000-q\u0000~\u0000=q\u0000~\u0000\"q\u0000~\u0000@sq\u0000~\u0000\nppsq\u0000~\u0000\u0000q\u0000~\u0000\u000epsq\u0000~\u0000\u000fq\u0000~\u0000\u000ep\u0000s"
							+ "q\u0000~\u0000\u0000ppsq\u0000~\u0000\u000fpp\u0000sq\u0000~\u0000\nppsq\u0000~\u0000\u0016q\u0000~\u0000\u000epsq\u0000~\u0000\u0019q\u0000~\u0000\u000epq\u0000~\u0000\u001cq\u0000~\u0000 q\u0000"
							+ "~\u0000\"sq\u0000~\u0000#q\u0000~\u0000&q\u0000~\u0000\'sq\u0000~\u0000\nppsq\u0000~\u0000\u0019q\u0000~\u0000\u000epq\u0000~\u0000-q\u0000~\u0000=q\u0000~\u0000\"q\u0000~\u0000@s"
							+ "q\u0000~\u0000\nppsq\u0000~\u0000\u000fq\u0000~\u0000\u000ep\u0000sq\u0000~\u0000\u0000ppsq\u0000~\u0000\u000fpp\u0000sq\u0000~\u0000\nppsq\u0000~\u0000\u0016q\u0000~\u0000\u000epsq\u0000"
							+ "~\u0000\u0019q\u0000~\u0000\u000epq\u0000~\u0000\u001cq\u0000~\u0000 q\u0000~\u0000\"sq\u0000~\u0000#q\u0000~\u0000&q\u0000~\u0000\'sq\u0000~\u0000\nppsq\u0000~\u0000\u0019q\u0000~\u0000\u000ep"
							+ "q\u0000~\u0000-q\u0000~\u0000=q\u0000~\u0000\"q\u0000~\u0000@q\u0000~\u0000\"q\u0000~\u0000\"q\u0000~\u0000\"q\u0000~\u0000\"q\u0000~\u0000\"q\u0000~\u0000\"sq\u0000~\u0000\nppsq"
							+ "\u0000~\u0000\u000fq\u0000~\u0000\u000ep\u0000sq\u0000~\u0000\u0000ppsq\u0000~\u0000\u000fpp\u0000sq\u0000~\u0000\nppsq\u0000~\u0000\u0016q\u0000~\u0000\u000epsq\u0000~\u0000\u0019q\u0000~\u0000\u000ep"
							+ "q\u0000~\u0000\u001cq\u0000~\u0000 q\u0000~\u0000\"sq\u0000~\u0000#t\u0000\u0012generated.BaseTypeq\u0000~\u0000\'sq\u0000~\u0000\nppsq\u0000~\u0000"
							+ "\u0019q\u0000~\u0000\u000epq\u0000~\u0000-q\u0000~\u0000=q\u0000~\u0000\"sq\u0000~\u0000#t\u0000\u0004baseq\u0000~\u0000Bq\u0000~\u0000\"sq\u0000~\u0000\nppsq\u0000~\u0000\u000fq"
							+ "\u0000~\u0000\u000ep\u0000sq\u0000~\u0000\u0000ppsq\u0000~\u0000\u000fpp\u0000sq\u0000~\u0000\nppsq\u0000~\u0000\u0016q\u0000~\u0000\u000epsq\u0000~\u0000\u0019q\u0000~\u0000\u000epq\u0000~\u0000\u001c"
							+ "q\u0000~\u0000 q\u0000~\u0000\"sq\u0000~\u0000#t\u0000\u0014generated.SuffixTypeq\u0000~\u0000\'sq\u0000~\u0000\nppsq\u0000~\u0000\u0019q\u0000"
							+ "~\u0000\u000epq\u0000~\u0000-q\u0000~\u0000=q\u0000~\u0000\"sq\u0000~\u0000#t\u0000\u0006suffixq\u0000~\u0000Bq\u0000~\u0000\"sq\u0000~\u0000\nppsq\u0000~\u0000\u0019q\u0000"
							+ "~\u0000\u000epsq\u0000~\u0000*ppsr\u0000$com.sun.msv.datatype.xsd.BooleanType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001"
							+ "\u0002\u0000\u0000xq\u0000~\u0000/q\u0000~\u00004t\u0000\u0007booleanq\u0000~\u00008q\u0000~\u0000:sq\u0000~\u0000;q\u0000~\u0000\u0098q\u0000~\u00004sq\u0000~\u0000#t\u0000\u0005g"
							+ "uessq\u0000~\u0000Bq\u0000~\u0000\"sq\u0000~\u0000\u0019ppsq\u0000~\u0000*ppsr\u0000\"com.sun.msv.datatype.xsd.T"
							+ "okenType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000#com.sun.msv.datatype.xsd.StringType\u0000\u0000"
							+ "\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001Z\u0000\risAlwaysValidxq\u0000~\u0000/q\u0000~\u00004t\u0000\u0005tokenq\u0000~\u00008\u0001q\u0000~\u0000:sq\u0000~\u0000"
							+ ";q\u0000~\u0000\u00a1q\u0000~\u00004sq\u0000~\u0000#t\u0000\u0002idq\u0000~\u0000Bsq\u0000~\u0000\nppsq\u0000~\u0000\u0019q\u0000~\u0000\u000epsq\u0000~\u0000*ppsr\u0000#c"
							+ "om.sun.msv.datatype.xsd.DoubleType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000+com.sun.msv"
							+ ".datatype.xsd.FloatingNumberType\u00fc\u00e3\u00b6\u0087\u008c\u00a8|\u00e0\u0002\u0000\u0000xq\u0000~\u0000/q\u0000~\u00004t\u0000\u0006dou"
							+ "bleq\u0000~\u00008q\u0000~\u0000:sq\u0000~\u0000;q\u0000~\u0000\u00abq\u0000~\u00004sq\u0000~\u0000#t\u0000\u0005scoreq\u0000~\u0000Bq\u0000~\u0000\"sr\u0000\"com"
							+ ".sun.msv.grammar.ExpressionPool\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\bexpTablet\u0000/Lcom"
							+ "/sun/msv/grammar/ExpressionPool$ClosedHash;xpsr\u0000-com.sun.msv"
							+ ".grammar.ExpressionPool$ClosedHash\u00d7j\u00d0N\u00ef\u00e8\u00ed\u001c\u0003\u0000\u0003I\u0000\u0005countB\u0000\rstre"
							+ "amVersionL\u0000\u0006parentt\u0000$Lcom/sun/msv/grammar/ExpressionPool;xp\u0000"
							+ "\u0000\u00004\u0001pq\u0000~\u0000Nq\u0000~\u0000oq\u0000~\u0000yq\u0000~\u0000\u0086q\u0000~\u0000dq\u0000~\u0000\u0018q\u0000~\u0000Iq\u0000~\u0000Tq\u0000~\u0000_q\u0000~\u0000jq\u0000~\u0000("
							+ "q\u0000~\u0000Lq\u0000~\u0000Wq\u0000~\u0000bq\u0000~\u0000mq\u0000~\u0000tq\u0000~\u0000wq\u0000~\u0000~q\u0000~\u0000Yq\u0000~\u0000\u0082q\u0000~\u0000\u008bq\u0000~\u0000\u008fq\u0000~\u0000\u0006"
							+ "q\u0000~\u0000Dq\u0000~\u0000\u000bq\u0000~\u0000\bq\u0000~\u0000Cq\u0000~\u0000\u0007q\u0000~\u0000\u0013q\u0000~\u0000Fq\u0000~\u0000Qq\u0000~\u0000\\q\u0000~\u0000gq\u0000~\u0000qq\u0000~\u0000{"
							+ "q\u0000~\u0000\u0088q\u0000~\u0000\u0093q\u0000~\u0000\u0015q\u0000~\u0000Hq\u0000~\u0000Sq\u0000~\u0000^q\u0000~\u0000iq\u0000~\u0000sq\u0000~\u0000}q\u0000~\u0000\u008aq\u0000~\u0000\u00a5q\u0000~\u0000Z"
							+ "q\u0000~\u0000\fq\u0000~\u0000eq\u0000~\u0000\tq\u0000~\u0000Oq\u0000~\u0000\u0005x"));
		}
		return new com.sun.msv.verifier.regexp.REDocumentDeclaration(
				schemaFragment);
	}

	@Override
	public mila.generated.impl.runtime.UnmarshallingEventHandler createUnmarshaller(
			mila.generated.impl.runtime.UnmarshallingContext context) {
		return new mila.generated.impl.AnalysisTypeImpl.Unmarshaller(context);
	}

	@Override
	public mila.generated.BaseType getBase() {
		return _Base;
	}

	@Override
	public java.lang.String getId() {
		return _Id;
	}

	@Override
	public java.util.List getPrefix() {
		return _getPrefix();
	}

	@Override
	public java.lang.Class getPrimaryInterface() {
		return (mila.generated.AnalysisType.class);
	}

	@Override
	public double getScore() {
		if (!has_Score) {
			return javax.xml.bind.DatatypeConverter
					.parseDouble(com.sun.xml.bind.DatatypeConverterImpl
							.installHook("0.0"));
		} else {
			return _Score;
		}
	}

	@Override
	public mila.generated.SuffixType getSuffix() {
		return _Suffix;
	}

	@Override
	public boolean isGuess() {
		if (!has_Guess) {
			return javax.xml.bind.DatatypeConverter
					.parseBoolean(com.sun.xml.bind.DatatypeConverterImpl
							.installHook("false"));
		} else {
			return _Guess;
		}
	}

	@Override
	public void serializeAttributes(mila.generated.impl.runtime.XMLSerializer context)
			throws org.xml.sax.SAXException {
		int idx2 = 0;
		final int len2 = ((_Prefix == null) ? 0 : _Prefix.size());
		if (has_Guess) {
			context.startAttribute("", "guess");
			try {
				context.text(
						javax.xml.bind.DatatypeConverter.printBoolean(_Guess),
						"Guess");
			} catch (java.lang.Exception e) {
				mila.generated.impl.runtime.Util.handlePrintConversionException(
						this, e, context);
			}
			context.endAttribute();
		}
		context.startAttribute("", "id");
		try {
			context.text(_Id, "Id");
		} catch (java.lang.Exception e) {
			mila.generated.impl.runtime.Util.handlePrintConversionException(this, e,
					context);
		}
		context.endAttribute();
		if (has_Score) {
			context.startAttribute("", "score");
			try {
				context.text(
						javax.xml.bind.DatatypeConverter.printDouble(_Score),
						"Score");
			} catch (java.lang.Exception e) {
				mila.generated.impl.runtime.Util.handlePrintConversionException(
						this, e, context);
			}
			context.endAttribute();
		}
		while (idx2 != len2) {
			idx2 += 1;
		}
	}

	@Override
	public void serializeBody(mila.generated.impl.runtime.XMLSerializer context)
			throws org.xml.sax.SAXException {
		int idx2 = 0;
		final int len2 = ((_Prefix == null) ? 0 : _Prefix.size());
		while (idx2 != len2) {
			context.startElement("", "prefix");
			int idx_0 = idx2;
			context.childAsURIs(
					((com.sun.xml.bind.JAXBObject) _Prefix.get(idx_0++)),
					"Prefix");
			context.endNamespaceDecls();
			int idx_1 = idx2;
			context.childAsAttributes(
					((com.sun.xml.bind.JAXBObject) _Prefix.get(idx_1++)),
					"Prefix");
			context.endAttributes();
			context.childAsBody(
					((com.sun.xml.bind.JAXBObject) _Prefix.get(idx2++)),
					"Prefix");
			context.endElement();
		}
		if (_Base != null) {
			context.startElement("", "base");
			context.childAsURIs(((com.sun.xml.bind.JAXBObject) _Base), "Base");
			context.endNamespaceDecls();
			context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _Base),
					"Base");
			context.endAttributes();
			context.childAsBody(((com.sun.xml.bind.JAXBObject) _Base), "Base");
			context.endElement();
		}
		if (_Suffix != null) {
			context.startElement("", "suffix");
			context.childAsURIs(((com.sun.xml.bind.JAXBObject) _Suffix),
					"Suffix");
			context.endNamespaceDecls();
			context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _Suffix),
					"Suffix");
			context.endAttributes();
			context.childAsBody(((com.sun.xml.bind.JAXBObject) _Suffix),
					"Suffix");
			context.endElement();
		}
	}

	@Override
	public void serializeURIs(mila.generated.impl.runtime.XMLSerializer context)
			throws org.xml.sax.SAXException {
		int idx2 = 0;
		final int len2 = ((_Prefix == null) ? 0 : _Prefix.size());
		while (idx2 != len2) {
			idx2 += 1;
		}
	}

	@Override
	public void setBase(mila.generated.BaseType value) {
		_Base = value;
	}

	@Override
	public void setGuess(boolean value) {
		_Guess = value;
		has_Guess = true;
	}

	@Override
	public void setId(java.lang.String value) {
		_Id = value;
	}

	@Override
	public void setScore(double value) {
		_Score = value;
		has_Score = true;
	}

	@Override
	public void setSuffix(mila.generated.SuffixType value) {
		_Suffix = value;
	}

}
