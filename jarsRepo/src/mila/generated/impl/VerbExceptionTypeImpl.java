//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v1.0.5-b16-fcs 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2008.12.01 at 02:23:12 PM IST 
//

package mila.generated.impl;

public class VerbExceptionTypeImpl implements mila.generated.VerbExceptionType,
		com.sun.xml.bind.JAXBObject,
		mila.generated.impl.runtime.UnmarshallableObject,
		mila.generated.impl.runtime.XMLSerializable,
		mila.generated.impl.runtime.ValidatableObject {

	public class Unmarshaller extends
			mila.generated.impl.runtime.AbstractUnmarshallingEventHandlerImpl {

		public Unmarshaller(mila.generated.impl.runtime.UnmarshallingContext context) {
			super(context, "--------------------------------------");
		}

		protected Unmarshaller(
				mila.generated.impl.runtime.UnmarshallingContext context,
				int startState) {
			this(context);
			state = startState;
		}

		private void eatText1(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_InflectBeinoniPossessive = javax.xml.bind.DatatypeConverter
						.parseBoolean(com.sun.xml.bind.WhiteSpaceProcessor
								.collapse(value));
				has_InflectBeinoniPossessive = true;
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		private void eatText10(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_Transliterated = com.sun.xml.bind.WhiteSpaceProcessor
						.collapse(value);
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		private void eatText11(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_BeinoniConstruct = javax.xml.bind.DatatypeConverter
						.parseBoolean(com.sun.xml.bind.WhiteSpaceProcessor
								.collapse(value));
				has_BeinoniConstruct = true;
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		private void eatText12(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_Pgn = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		private void eatText13(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_Value = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		private void eatText2(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_Undotted = com.sun.xml.bind.WhiteSpaceProcessor
						.collapse(value);
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		private void eatText3(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_Tense = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		private void eatText4(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_Person = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		private void eatText5(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_Dotted = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		private void eatText6(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_BeinoniDefiniteness = javax.xml.bind.DatatypeConverter
						.parseBoolean(com.sun.xml.bind.WhiteSpaceProcessor
								.collapse(value));
				has_BeinoniDefiniteness = true;
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		private void eatText7(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_Gender = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		private void eatText8(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_Script = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		private void eatText9(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_Number = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		@Override
		public void enterAttribute(java.lang.String ___uri,
				java.lang.String ___local, java.lang.String ___qname)
				throws org.xml.sax.SAXException {
			int attIdx;
			outer: while (true) {
				switch (state) {
				case 12:
					if (("inflectBeinoniPossessive" == ___local)
							&& ("" == ___uri)) {
						state = 13;
						return;
					}
					state = 15;
					continue outer;
				case 33:
					if (("undotted" == ___local) && ("" == ___uri)) {
						state = 34;
						return;
					}
					break;
				case 27:
					if (("tense" == ___local) && ("" == ___uri)) {
						state = 28;
						return;
					}
					break;
				case 18:
					if (("person" == ___local) && ("" == ___uri)) {
						state = 19;
						return;
					}
					state = 21;
					continue outer;
				case 6:
					if (("dotted" == ___local) && ("" == ___uri)) {
						state = 7;
						return;
					}
					state = 9;
					continue outer;
				case 3:
					if (("beinoniDefiniteness" == ___local) && ("" == ___uri)) {
						state = 4;
						return;
					}
					state = 6;
					continue outer;
				case 9:
					if (("gender" == ___local) && ("" == ___uri)) {
						state = 10;
						return;
					}
					state = 12;
					continue outer;
				case 24:
					if (("script" == ___local) && ("" == ___uri)) {
						state = 25;
						return;
					}
					state = 27;
					continue outer;
				case 37:
					revertToParentFromEnterAttribute(___uri, ___local, ___qname);
					return;
				case 15:
					if (("number" == ___local) && ("" == ___uri)) {
						state = 16;
						return;
					}
					state = 18;
					continue outer;
				case 30:
					if (("transliterated" == ___local) && ("" == ___uri)) {
						state = 31;
						return;
					}
					break;
				case 0:
					if (("beinoniConstruct" == ___local) && ("" == ___uri)) {
						state = 1;
						return;
					}
					state = 3;
					continue outer;
				case 21:
					if (("pgn" == ___local) && ("" == ___uri)) {
						state = 22;
						return;
					}
					break;
				}
				super.enterAttribute(___uri, ___local, ___qname);
				break;
			}
		}

		@Override
		public void enterElement(java.lang.String ___uri,
				java.lang.String ___local, java.lang.String ___qname,
				org.xml.sax.Attributes __atts) throws org.xml.sax.SAXException {
			int attIdx;
			outer: while (true) {
				switch (state) {
				case 12:
					attIdx = context.getAttribute("",
							"inflectBeinoniPossessive");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 15;
						eatText1(v);
						continue outer;
					}
					state = 15;
					continue outer;
				case 33:
					attIdx = context.getAttribute("", "undotted");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 36;
						eatText2(v);
						continue outer;
					}
					break;
				case 27:
					attIdx = context.getAttribute("", "tense");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 30;
						eatText3(v);
						continue outer;
					}
					break;
				case 18:
					attIdx = context.getAttribute("", "person");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 21;
						eatText4(v);
						continue outer;
					}
					state = 21;
					continue outer;
				case 6:
					attIdx = context.getAttribute("", "dotted");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 9;
						eatText5(v);
						continue outer;
					}
					state = 9;
					continue outer;
				case 3:
					attIdx = context.getAttribute("", "beinoniDefiniteness");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 6;
						eatText6(v);
						continue outer;
					}
					state = 6;
					continue outer;
				case 9:
					attIdx = context.getAttribute("", "gender");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 12;
						eatText7(v);
						continue outer;
					}
					state = 12;
					continue outer;
				case 24:
					attIdx = context.getAttribute("", "script");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 27;
						eatText8(v);
						continue outer;
					}
					state = 27;
					continue outer;
				case 37:
					revertToParentFromEnterElement(___uri, ___local, ___qname,
							__atts);
					return;
				case 15:
					attIdx = context.getAttribute("", "number");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 18;
						eatText9(v);
						continue outer;
					}
					state = 18;
					continue outer;
				case 30:
					attIdx = context.getAttribute("", "transliterated");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 33;
						eatText10(v);
						continue outer;
					}
					break;
				case 0:
					attIdx = context.getAttribute("", "beinoniConstruct");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 3;
						eatText11(v);
						continue outer;
					}
					state = 3;
					continue outer;
				case 21:
					attIdx = context.getAttribute("", "pgn");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 24;
						eatText12(v);
						continue outer;
					}
					break;
				}
				super.enterElement(___uri, ___local, ___qname, __atts);
				break;
			}
		}

		@Override
		public void handleText(final java.lang.String value)
				throws org.xml.sax.SAXException {
			int attIdx;
			outer: while (true) {
				try {
					switch (state) {
					case 12:
						attIdx = context.getAttribute("",
								"inflectBeinoniPossessive");
						if (attIdx >= 0) {
							final java.lang.String v = context
									.eatAttribute(attIdx);
							state = 15;
							eatText1(v);
							continue outer;
						}
						state = 15;
						continue outer;
					case 10:
						state = 11;
						eatText7(value);
						return;
					case 31:
						state = 32;
						eatText10(value);
						return;
					case 16:
						state = 17;
						eatText9(value);
						return;
					case 33:
						attIdx = context.getAttribute("", "undotted");
						if (attIdx >= 0) {
							final java.lang.String v = context
									.eatAttribute(attIdx);
							state = 36;
							eatText2(v);
							continue outer;
						}
						break;
					case 27:
						attIdx = context.getAttribute("", "tense");
						if (attIdx >= 0) {
							final java.lang.String v = context
									.eatAttribute(attIdx);
							state = 30;
							eatText3(v);
							continue outer;
						}
						break;
					case 36:
						state = 37;
						eatText13(value);
						return;
					case 7:
						state = 8;
						eatText5(value);
						return;
					case 25:
						state = 26;
						eatText8(value);
						return;
					case 34:
						state = 35;
						eatText2(value);
						return;
					case 1:
						state = 2;
						eatText11(value);
						return;
					case 28:
						state = 29;
						eatText3(value);
						return;
					case 18:
						attIdx = context.getAttribute("", "person");
						if (attIdx >= 0) {
							final java.lang.String v = context
									.eatAttribute(attIdx);
							state = 21;
							eatText4(v);
							continue outer;
						}
						state = 21;
						continue outer;
					case 6:
						attIdx = context.getAttribute("", "dotted");
						if (attIdx >= 0) {
							final java.lang.String v = context
									.eatAttribute(attIdx);
							state = 9;
							eatText5(v);
							continue outer;
						}
						state = 9;
						continue outer;
					case 3:
						attIdx = context
								.getAttribute("", "beinoniDefiniteness");
						if (attIdx >= 0) {
							final java.lang.String v = context
									.eatAttribute(attIdx);
							state = 6;
							eatText6(v);
							continue outer;
						}
						state = 6;
						continue outer;
					case 19:
						state = 20;
						eatText4(value);
						return;
					case 9:
						attIdx = context.getAttribute("", "gender");
						if (attIdx >= 0) {
							final java.lang.String v = context
									.eatAttribute(attIdx);
							state = 12;
							eatText7(v);
							continue outer;
						}
						state = 12;
						continue outer;
					case 24:
						attIdx = context.getAttribute("", "script");
						if (attIdx >= 0) {
							final java.lang.String v = context
									.eatAttribute(attIdx);
							state = 27;
							eatText8(v);
							continue outer;
						}
						state = 27;
						continue outer;
					case 37:
						revertToParentFromText(value);
						return;
					case 13:
						state = 14;
						eatText1(value);
						return;
					case 15:
						attIdx = context.getAttribute("", "number");
						if (attIdx >= 0) {
							final java.lang.String v = context
									.eatAttribute(attIdx);
							state = 18;
							eatText9(v);
							continue outer;
						}
						state = 18;
						continue outer;
					case 30:
						attIdx = context.getAttribute("", "transliterated");
						if (attIdx >= 0) {
							final java.lang.String v = context
									.eatAttribute(attIdx);
							state = 33;
							eatText10(v);
							continue outer;
						}
						break;
					case 22:
						state = 23;
						eatText12(value);
						return;
					case 0:
						attIdx = context.getAttribute("", "beinoniConstruct");
						if (attIdx >= 0) {
							final java.lang.String v = context
									.eatAttribute(attIdx);
							state = 3;
							eatText11(v);
							continue outer;
						}
						state = 3;
						continue outer;
					case 4:
						state = 5;
						eatText6(value);
						return;
					case 21:
						attIdx = context.getAttribute("", "pgn");
						if (attIdx >= 0) {
							final java.lang.String v = context
									.eatAttribute(attIdx);
							state = 24;
							eatText12(v);
							continue outer;
						}
						break;
					}
				} catch (java.lang.RuntimeException e) {
					handleUnexpectedTextException(value, e);
				}
				break;
			}
		}

		@Override
		public void leaveAttribute(java.lang.String ___uri,
				java.lang.String ___local, java.lang.String ___qname)
				throws org.xml.sax.SAXException {
			int attIdx;
			outer: while (true) {
				switch (state) {
				case 12:
					attIdx = context.getAttribute("",
							"inflectBeinoniPossessive");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 15;
						eatText1(v);
						continue outer;
					}
					state = 15;
					continue outer;
				case 5:
					if (("beinoniDefiniteness" == ___local) && ("" == ___uri)) {
						state = 6;
						return;
					}
					break;
				case 33:
					attIdx = context.getAttribute("", "undotted");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 36;
						eatText2(v);
						continue outer;
					}
					break;
				case 27:
					attIdx = context.getAttribute("", "tense");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 30;
						eatText3(v);
						continue outer;
					}
					break;
				case 32:
					if (("transliterated" == ___local) && ("" == ___uri)) {
						state = 33;
						return;
					}
					break;
				case 14:
					if (("inflectBeinoniPossessive" == ___local)
							&& ("" == ___uri)) {
						state = 15;
						return;
					}
					break;
				case 23:
					if (("pgn" == ___local) && ("" == ___uri)) {
						state = 24;
						return;
					}
					break;
				case 26:
					if (("script" == ___local) && ("" == ___uri)) {
						state = 27;
						return;
					}
					break;
				case 18:
					attIdx = context.getAttribute("", "person");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 21;
						eatText4(v);
						continue outer;
					}
					state = 21;
					continue outer;
				case 2:
					if (("beinoniConstruct" == ___local) && ("" == ___uri)) {
						state = 3;
						return;
					}
					break;
				case 35:
					if (("undotted" == ___local) && ("" == ___uri)) {
						state = 36;
						return;
					}
					break;
				case 6:
					attIdx = context.getAttribute("", "dotted");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 9;
						eatText5(v);
						continue outer;
					}
					state = 9;
					continue outer;
				case 3:
					attIdx = context.getAttribute("", "beinoniDefiniteness");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 6;
						eatText6(v);
						continue outer;
					}
					state = 6;
					continue outer;
				case 20:
					if (("person" == ___local) && ("" == ___uri)) {
						state = 21;
						return;
					}
					break;
				case 9:
					attIdx = context.getAttribute("", "gender");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 12;
						eatText7(v);
						continue outer;
					}
					state = 12;
					continue outer;
				case 29:
					if (("tense" == ___local) && ("" == ___uri)) {
						state = 30;
						return;
					}
					break;
				case 24:
					attIdx = context.getAttribute("", "script");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 27;
						eatText8(v);
						continue outer;
					}
					state = 27;
					continue outer;
				case 17:
					if (("number" == ___local) && ("" == ___uri)) {
						state = 18;
						return;
					}
					break;
				case 37:
					revertToParentFromLeaveAttribute(___uri, ___local, ___qname);
					return;
				case 15:
					attIdx = context.getAttribute("", "number");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 18;
						eatText9(v);
						continue outer;
					}
					state = 18;
					continue outer;
				case 30:
					attIdx = context.getAttribute("", "transliterated");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 33;
						eatText10(v);
						continue outer;
					}
					break;
				case 8:
					if (("dotted" == ___local) && ("" == ___uri)) {
						state = 9;
						return;
					}
					break;
				case 11:
					if (("gender" == ___local) && ("" == ___uri)) {
						state = 12;
						return;
					}
					break;
				case 0:
					attIdx = context.getAttribute("", "beinoniConstruct");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 3;
						eatText11(v);
						continue outer;
					}
					state = 3;
					continue outer;
				case 21:
					attIdx = context.getAttribute("", "pgn");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 24;
						eatText12(v);
						continue outer;
					}
					break;
				}
				super.leaveAttribute(___uri, ___local, ___qname);
				break;
			}
		}

		@Override
		public void leaveElement(java.lang.String ___uri,
				java.lang.String ___local, java.lang.String ___qname)
				throws org.xml.sax.SAXException {
			int attIdx;
			outer: while (true) {
				switch (state) {
				case 12:
					attIdx = context.getAttribute("",
							"inflectBeinoniPossessive");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 15;
						eatText1(v);
						continue outer;
					}
					state = 15;
					continue outer;
				case 33:
					attIdx = context.getAttribute("", "undotted");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 36;
						eatText2(v);
						continue outer;
					}
					break;
				case 27:
					attIdx = context.getAttribute("", "tense");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 30;
						eatText3(v);
						continue outer;
					}
					break;
				case 18:
					attIdx = context.getAttribute("", "person");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 21;
						eatText4(v);
						continue outer;
					}
					state = 21;
					continue outer;
				case 6:
					attIdx = context.getAttribute("", "dotted");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 9;
						eatText5(v);
						continue outer;
					}
					state = 9;
					continue outer;
				case 3:
					attIdx = context.getAttribute("", "beinoniDefiniteness");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 6;
						eatText6(v);
						continue outer;
					}
					state = 6;
					continue outer;
				case 9:
					attIdx = context.getAttribute("", "gender");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 12;
						eatText7(v);
						continue outer;
					}
					state = 12;
					continue outer;
				case 24:
					attIdx = context.getAttribute("", "script");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 27;
						eatText8(v);
						continue outer;
					}
					state = 27;
					continue outer;
				case 37:
					revertToParentFromLeaveElement(___uri, ___local, ___qname);
					return;
				case 15:
					attIdx = context.getAttribute("", "number");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 18;
						eatText9(v);
						continue outer;
					}
					state = 18;
					continue outer;
				case 30:
					attIdx = context.getAttribute("", "transliterated");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 33;
						eatText10(v);
						continue outer;
					}
					break;
				case 0:
					attIdx = context.getAttribute("", "beinoniConstruct");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 3;
						eatText11(v);
						continue outer;
					}
					state = 3;
					continue outer;
				case 21:
					attIdx = context.getAttribute("", "pgn");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 24;
						eatText12(v);
						continue outer;
					}
					break;
				}
				super.leaveElement(___uri, ___local, ___qname);
				break;
			}
		}

		@Override
		public java.lang.Object owner() {
			return mila.generated.impl.VerbExceptionTypeImpl.this;
		}

	}

	protected java.lang.String _Pgn;
	protected java.lang.String _Gender;
	protected boolean has_BeinoniDefiniteness;
	protected boolean _BeinoniDefiniteness;
	protected java.lang.String _Person;
	protected java.lang.String _Script;
	protected boolean has_InflectBeinoniPossessive;
	protected boolean _InflectBeinoniPossessive;
	protected java.lang.String _Transliterated;
	protected java.lang.String _Tense;
	protected java.lang.String _Value;
	protected java.lang.String _Number;
	protected java.lang.String _Dotted;
	protected java.lang.String _Undotted;
	protected boolean has_BeinoniConstruct;
	protected boolean _BeinoniConstruct;
	public final static java.lang.Class version = (mila.generated.impl.JAXBVersion.class);

	private static com.sun.msv.grammar.Grammar schemaFragment;

	private final static java.lang.Class PRIMARY_INTERFACE_CLASS() {
		return (mila.generated.VerbExceptionType.class);
	}

	@Override
	public com.sun.msv.verifier.DocumentDeclaration createRawValidator() {
		if (schemaFragment == null) {
			schemaFragment = com.sun.xml.bind.validator.SchemaDeserializer
					.deserialize(("\u00ac\u00ed\u0000\u0005sr\u0000\u001fcom.sun.msv.grammar.SequenceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.su"
							+ "n.msv.grammar.BinaryExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0004exp1t\u0000 Lcom/sun/msv/gra"
							+ "mmar/Expression;L\u0000\u0004exp2q\u0000~\u0000\u0002xr\u0000\u001ecom.sun.msv.grammar.Expressi"
							+ "on\u00f8\u0018\u0082\u00e8N5~O\u0002\u0000\u0002L\u0000\u0013epsilonReducibilityt\u0000\u0013Ljava/lang/Boolean;L\u0000\u000b"
							+ "expandedExpq\u0000~\u0000\u0002xpppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000pp"
							+ "sq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsr\u0000\u001bcom.sun."
							+ "msv.grammar.DataExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\u0002dtt\u0000\u001fLorg/relaxng/datatype/"
							+ "Datatype;L\u0000\u0006exceptq\u0000~\u0000\u0002L\u0000\u0004namet\u0000\u001dLcom/sun/msv/util/StringPai"
							+ "r;xq\u0000~\u0000\u0003ppsr\u0000\"com.sun.msv.datatype.xsd.TokenType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000x"
							+ "r\u0000#com.sun.msv.datatype.xsd.StringType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001Z\u0000\risAlways"
							+ "Validxr\u0000*com.sun.msv.datatype.xsd.BuiltinAtomicType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002"
							+ "\u0000\u0000xr\u0000%com.sun.msv.datatype.xsd.ConcreteType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\'co"
							+ "m.sun.msv.datatype.xsd.XSDatatypeImpl\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\fnamespace"
							+ "Urit\u0000\u0012Ljava/lang/String;L\u0000\btypeNameq\u0000~\u0000\u001aL\u0000\nwhiteSpacet\u0000.Lcom"
							+ "/sun/msv/datatype/xsd/WhiteSpaceProcessor;xpt\u0000 http://www.w3"
							+ ".org/2001/XMLSchemat\u0000\u0005tokensr\u00005com.sun.msv.datatype.xsd.Whit"
							+ "eSpaceProcessor$Collapse\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000,com.sun.msv.datatype."
							+ "xsd.WhiteSpaceProcessor\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xp\u0001sr\u00000com.sun.msv.grammar"
							+ ".Expression$NullSetExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003ppsr\u0000\u001bcom.sun."
							+ "msv.util.StringPair\u00d0t\u001ejB\u008f\u008d\u00a0\u0002\u0000\u0002L\u0000\tlocalNameq\u0000~\u0000\u001aL\u0000\fnamespaceU"
							+ "RIq\u0000~\u0000\u001axpq\u0000~\u0000\u001eq\u0000~\u0000\u001dsr\u0000\u001dcom.sun.msv.grammar.ChoiceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001"
							+ "\u0002\u0000\u0000xq\u0000~\u0000\u0001ppsr\u0000 com.sun.msv.grammar.AttributeExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000"
							+ "\u0003expq\u0000~\u0000\u0002L\u0000\tnameClasst\u0000\u001fLcom/sun/msv/grammar/NameClass;xq\u0000~\u0000"
							+ "\u0003sr\u0000\u0011java.lang.Boolean\u00cd r\u0080\u00d5\u009c\u00fa\u00ee\u0002\u0000\u0001Z\u0000\u0005valuexp\u0000psq\u0000~\u0000\u0011ppsr\u0000$com"
							+ ".sun.msv.datatype.xsd.BooleanType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0017q\u0000~\u0000\u001dt\u0000\u0007bo"
							+ "oleanq\u0000~\u0000!q\u0000~\u0000#sq\u0000~\u0000$q\u0000~\u00000q\u0000~\u0000\u001dsr\u0000#com.sun.msv.grammar.Simpl"
							+ "eNameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\tlocalNameq\u0000~\u0000\u001aL\u0000\fnamespaceURIq\u0000~\u0000\u001axr"
							+ "\u0000\u001dcom.sun.msv.grammar.NameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xpt\u0000\u0010beinoniConstr"
							+ "uctt\u0000\u0000sr\u00000com.sun.msv.grammar.Expression$EpsilonExpression\u0000\u0000"
							+ "\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003sq\u0000~\u0000+\u0001q\u0000~\u00008sq\u0000~\u0000&ppsq\u0000~\u0000(q\u0000~\u0000,pq\u0000~\u0000-sq\u0000~\u00002t\u0000"
							+ "\u0013beinoniDefinitenessq\u0000~\u00006q\u0000~\u00008sq\u0000~\u0000&ppsq\u0000~\u0000(q\u0000~\u0000,pq\u0000~\u0000\u0014sq\u0000~\u0000"
							+ "2t\u0000\u0006dottedq\u0000~\u00006q\u0000~\u00008sq\u0000~\u0000&ppsq\u0000~\u0000(q\u0000~\u0000,psq\u0000~\u0000\u0011ppsr\u0000)com.sun."
							+ "msv.datatype.xsd.EnumerationFacet\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\u0006valuest\u0000\u000fLjav"
							+ "a/util/Set;xr\u00009com.sun.msv.datatype.xsd.DataTypeWithValueCon"
							+ "straintFacet\"\u00a7Ro\u00ca\u00c7\u008aT\u0002\u0000\u0000xr\u0000*com.sun.msv.datatype.xsd.DataType"
							+ "WithFacet\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0005Z\u0000\fisFacetFixedZ\u0000\u0012needValueCheckFlagL\u0000\bb"
							+ "aseTypet\u0000)Lcom/sun/msv/datatype/xsd/XSDatatypeImpl;L\u0000\fconcre"
							+ "teTypet\u0000\'Lcom/sun/msv/datatype/xsd/ConcreteType;L\u0000\tfacetName"
							+ "q\u0000~\u0000\u001axq\u0000~\u0000\u0019q\u0000~\u00006t\u0000\nGenderTypeq\u0000~\u0000!\u0000\u0000q\u0000~\u0000\u001cq\u0000~\u0000\u001ct\u0000\u000benumeration"
							+ "sr\u0000\u0011java.util.HashSet\u00baD\u0085\u0095\u0096\u00b8\u00b74\u0003\u0000\u0000xpw\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\u0004t\u0000\u000bunspecifi"
							+ "edt\u0000\bfemininet\u0000\u0016masculine and femininet\u0000\tmasculinexq\u0000~\u0000#sq\u0000~"
							+ "\u0000$q\u0000~\u0000Lq\u0000~\u00006sq\u0000~\u00002t\u0000\u0006genderq\u0000~\u00006q\u0000~\u00008sq\u0000~\u0000&ppsq\u0000~\u0000(q\u0000~\u0000,pq\u0000~"
							+ "\u0000-sq\u0000~\u00002t\u0000\u0018inflectBeinoniPossessiveq\u0000~\u00006q\u0000~\u00008sq\u0000~\u0000&ppsq\u0000~\u0000(q"
							+ "\u0000~\u0000,psq\u0000~\u0000\u0011ppsq\u0000~\u0000Eq\u0000~\u00006t\u0000\nNumberTypeq\u0000~\u0000!\u0000\u0000q\u0000~\u0000\u001cq\u0000~\u0000\u001cq\u0000~\u0000Ms"
							+ "q\u0000~\u0000Nw\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\u0006t\u0000\u000bunspecifiedt\u0000\u0013singular and pluralt\u0000\u0004du"
							+ "alt\u0000\u000fdual and pluralt\u0000\bsingulart\u0000\u0006pluralxq\u0000~\u0000#sq\u0000~\u0000$q\u0000~\u0000_q\u0000~"
							+ "\u00006sq\u0000~\u00002t\u0000\u0006numberq\u0000~\u00006q\u0000~\u00008sq\u0000~\u0000&ppsq\u0000~\u0000(q\u0000~\u0000,psq\u0000~\u0000\u0011ppsq\u0000~\u0000"
							+ "Eq\u0000~\u00006t\u0000\nPersonTypeq\u0000~\u0000!\u0000\u0000q\u0000~\u0000\u001cq\u0000~\u0000\u001cq\u0000~\u0000Msq\u0000~\u0000Nw\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000"
							+ "\u0005t\u0000\u000bunspecifiedt\u0000\u00013t\u0000\u00012t\u0000\u0003anyt\u0000\u00011xq\u0000~\u0000#sq\u0000~\u0000$q\u0000~\u0000nq\u0000~\u00006sq\u0000~\u0000"
							+ "2t\u0000\u0006personq\u0000~\u00006q\u0000~\u00008sq\u0000~\u0000(ppsq\u0000~\u0000\u0011ppsq\u0000~\u0000Eq\u0000~\u00006t\u0000\u0007PGNTypeq\u0000~"
							+ "\u0000!\u0000\u0000q\u0000~\u0000\u001cq\u0000~\u0000\u001cq\u0000~\u0000Msq\u0000~\u0000Nw\f\u0000\u0000\u0000 ?@\u0000\u0000\u0000\u0000\u0000\u0013t\u0000\t123p/M/Sgt\u0000\u00072p/M/P"
							+ "lt\u0000\u00073p/M/Sgt\u0000\b1p/MF/Sgt\u0000\t123p/M/Plt\u0000\b2p/MF/Plt\u0000\u00072p/M/Sgt\u0000\u00071p"
							+ "/F/Sgt\u0000\b3p/MF/Plt\u0000\u00073p/F/Plt\u0000\u00071p/M/Sgt\u0000\u000bunspecifiedt\u0000\u00072p/F/Pl"
							+ "t\u0000\t123p/F/Plt\u0000\u00073p/M/Plt\u0000\u00073p/F/Sgt\u0000\t123p/F/Sgt\u0000\b1p/MF/Plt\u0000\u00072p"
							+ "/F/Sgxq\u0000~\u0000#sq\u0000~\u0000$q\u0000~\u0000{q\u0000~\u00006sq\u0000~\u00002t\u0000\u0003pgnq\u0000~\u00006sq\u0000~\u0000&ppsq\u0000~\u0000(q\u0000"
							+ "~\u0000,psq\u0000~\u0000\u0011ppsq\u0000~\u0000Eq\u0000~\u00006t\u0000\nScriptTypeq\u0000~\u0000!\u0000\u0000q\u0000~\u0000\u001cq\u0000~\u0000\u001cq\u0000~\u0000Msq"
							+ "\u0000~\u0000Nw\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\u0004t\u0000\u0004typot\u0000\u0006formalt\u0000\u0005slangt\u0000\ncolloquialxq\u0000~\u0000"
							+ "#sq\u0000~\u0000$q\u0000~\u0000\u0097q\u0000~\u00006sq\u0000~\u00002t\u0000\u0006scriptq\u0000~\u00006q\u0000~\u00008sq\u0000~\u0000(ppsq\u0000~\u0000\u0011ppsq"
							+ "\u0000~\u0000Eq\u0000~\u00006t\u0000\tTenseTypeq\u0000~\u0000!\u0000\u0000q\u0000~\u0000\u001cq\u0000~\u0000\u001cq\u0000~\u0000Msq\u0000~\u0000Nw\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000"
							+ "\u0000\u0000\bt\u0000\u000bunspecifiedt\u0000\u0004pastt\u0000\nimperativet\u0000\u0007beinonit\u0000\ninfinitive"
							+ "t\u0000\u0006futuret\u0000\u000ebareInfinitivet\u0000\u0011passiveParticiplexq\u0000~\u0000#sq\u0000~\u0000$q\u0000"
							+ "~\u0000\u00a3q\u0000~\u00006sq\u0000~\u00002t\u0000\u0005tenseq\u0000~\u00006sq\u0000~\u0000(ppq\u0000~\u0000\u0014sq\u0000~\u00002t\u0000\u000etranslitera"
							+ "tedq\u0000~\u00006sq\u0000~\u0000(ppq\u0000~\u0000\u0014sq\u0000~\u00002t\u0000\bundottedq\u0000~\u00006sr\u0000\"com.sun.msv.g"
							+ "rammar.ExpressionPool\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\bexpTablet\u0000/Lcom/sun/msv/g"
							+ "rammar/ExpressionPool$ClosedHash;xpsr\u0000-com.sun.msv.grammar.E"
							+ "xpressionPool$ClosedHash\u00d7j\u00d0N\u00ef\u00e8\u00ed\u001c\u0003\u0000\u0003I\u0000\u0005countB\u0000\rstreamVersionL"
							+ "\u0000\u0006parentt\u0000$Lcom/sun/msv/grammar/ExpressionPool;xp\u0000\u0000\u0000\u0014\u0001pq\u0000~\u0000\n"
							+ "q\u0000~\u0000\u0010q\u0000~\u0000Bq\u0000~\u0000[q\u0000~\u0000\u000bq\u0000~\u0000\bq\u0000~\u0000\fq\u0000~\u0000:q\u0000~\u0000\u0006q\u0000~\u0000\tq\u0000~\u0000\rq\u0000~\u0000\u0007q\u0000~\u0000\u0093"
							+ "q\u0000~\u0000\u000fq\u0000~\u0000\u0005q\u0000~\u0000jq\u0000~\u0000\'q\u0000~\u0000\u000eq\u0000~\u0000Wq\u0000~\u0000>x"));
		}
		return new com.sun.msv.verifier.regexp.REDocumentDeclaration(
				schemaFragment);
	}

	@Override
	public mila.generated.impl.runtime.UnmarshallingEventHandler createUnmarshaller(
			mila.generated.impl.runtime.UnmarshallingContext context) {
		return new mila.generated.impl.VerbExceptionTypeImpl.Unmarshaller(context);
	}

	@Override
	public java.lang.String getDotted() {
		if (_Dotted == null) {
			return "";
		} else {
			return _Dotted;
		}
	}

	@Override
	public java.lang.String getGender() {
		if (_Gender == null) {
			return "unspecified";
		} else {
			return _Gender;
		}
	}

	@Override
	public java.lang.String getNumber() {
		if (_Number == null) {
			return "unspecified";
		} else {
			return _Number;
		}
	}

	@Override
	public java.lang.String getPerson() {
		if (_Person == null) {
			return "unspecified";
		} else {
			return _Person;
		}
	}

	@Override
	public java.lang.String getPgn() {
		return _Pgn;
	}

	@Override
	public java.lang.Class getPrimaryInterface() {
		return (mila.generated.VerbExceptionType.class);
	}

	@Override
	public java.lang.String getScript() {
		if (_Script == null) {
			return "formal";
		} else {
			return _Script;
		}
	}

	@Override
	public java.lang.String getTense() {
		return _Tense;
	}

	@Override
	public java.lang.String getTransliterated() {
		return _Transliterated;
	}

	@Override
	public java.lang.String getUndotted() {
		return _Undotted;
	}

	@Override
	public java.lang.String getValue() {
		return _Value;
	}

	@Override
	public boolean isBeinoniConstruct() {
		if (!has_BeinoniConstruct) {
			return javax.xml.bind.DatatypeConverter
					.parseBoolean(com.sun.xml.bind.DatatypeConverterImpl
							.installHook("false"));
		} else {
			return _BeinoniConstruct;
		}
	}

	@Override
	public boolean isBeinoniDefiniteness() {
		if (!has_BeinoniDefiniteness) {
			return javax.xml.bind.DatatypeConverter
					.parseBoolean(com.sun.xml.bind.DatatypeConverterImpl
							.installHook("false"));
		} else {
			return _BeinoniDefiniteness;
		}
	}

	@Override
	public boolean isInflectBeinoniPossessive() {
		if (!has_InflectBeinoniPossessive) {
			return javax.xml.bind.DatatypeConverter
					.parseBoolean(com.sun.xml.bind.DatatypeConverterImpl
							.installHook("false"));
		} else {
			return _InflectBeinoniPossessive;
		}
	}

	@Override
	public void serializeAttributes(mila.generated.impl.runtime.XMLSerializer context)
			throws org.xml.sax.SAXException {
		if (has_BeinoniConstruct) {
			context.startAttribute("", "beinoniConstruct");
			try {
				context.text(javax.xml.bind.DatatypeConverter
						.printBoolean(_BeinoniConstruct), "BeinoniConstruct");
			} catch (java.lang.Exception e) {
				mila.generated.impl.runtime.Util.handlePrintConversionException(
						this, e, context);
			}
			context.endAttribute();
		}
		if (has_BeinoniDefiniteness) {
			context.startAttribute("", "beinoniDefiniteness");
			try {
				context.text(javax.xml.bind.DatatypeConverter
						.printBoolean(_BeinoniDefiniteness),
						"BeinoniDefiniteness");
			} catch (java.lang.Exception e) {
				mila.generated.impl.runtime.Util.handlePrintConversionException(
						this, e, context);
			}
			context.endAttribute();
		}
		if (_Dotted != null) {
			context.startAttribute("", "dotted");
			try {
				context.text(_Dotted, "Dotted");
			} catch (java.lang.Exception e) {
				mila.generated.impl.runtime.Util.handlePrintConversionException(
						this, e, context);
			}
			context.endAttribute();
		}
		if (_Gender != null) {
			context.startAttribute("", "gender");
			try {
				context.text(_Gender, "Gender");
			} catch (java.lang.Exception e) {
				mila.generated.impl.runtime.Util.handlePrintConversionException(
						this, e, context);
			}
			context.endAttribute();
		}
		if (has_InflectBeinoniPossessive) {
			context.startAttribute("", "inflectBeinoniPossessive");
			try {
				context.text(javax.xml.bind.DatatypeConverter
						.printBoolean(_InflectBeinoniPossessive),
						"InflectBeinoniPossessive");
			} catch (java.lang.Exception e) {
				mila.generated.impl.runtime.Util.handlePrintConversionException(
						this, e, context);
			}
			context.endAttribute();
		}
		if (_Number != null) {
			context.startAttribute("", "number");
			try {
				context.text(_Number, "Number");
			} catch (java.lang.Exception e) {
				mila.generated.impl.runtime.Util.handlePrintConversionException(
						this, e, context);
			}
			context.endAttribute();
		}
		if (_Person != null) {
			context.startAttribute("", "person");
			try {
				context.text(_Person, "Person");
			} catch (java.lang.Exception e) {
				mila.generated.impl.runtime.Util.handlePrintConversionException(
						this, e, context);
			}
			context.endAttribute();
		}
		context.startAttribute("", "pgn");
		try {
			context.text(_Pgn, "Pgn");
		} catch (java.lang.Exception e) {
			mila.generated.impl.runtime.Util.handlePrintConversionException(this, e,
					context);
		}
		context.endAttribute();
		if (_Script != null) {
			context.startAttribute("", "script");
			try {
				context.text(_Script, "Script");
			} catch (java.lang.Exception e) {
				mila.generated.impl.runtime.Util.handlePrintConversionException(
						this, e, context);
			}
			context.endAttribute();
		}
		context.startAttribute("", "tense");
		try {
			context.text(_Tense, "Tense");
		} catch (java.lang.Exception e) {
			mila.generated.impl.runtime.Util.handlePrintConversionException(this, e,
					context);
		}
		context.endAttribute();
		context.startAttribute("", "transliterated");
		try {
			context.text(_Transliterated, "Transliterated");
		} catch (java.lang.Exception e) {
			mila.generated.impl.runtime.Util.handlePrintConversionException(this, e,
					context);
		}
		context.endAttribute();
		context.startAttribute("", "undotted");
		try {
			context.text(_Undotted, "Undotted");
		} catch (java.lang.Exception e) {
			mila.generated.impl.runtime.Util.handlePrintConversionException(this, e,
					context);
		}
		context.endAttribute();
	}

	@Override
	public void serializeBody(mila.generated.impl.runtime.XMLSerializer context)
			throws org.xml.sax.SAXException {
		try {
			context.text(_Value, "Value");
		} catch (java.lang.Exception e) {
			mila.generated.impl.runtime.Util.handlePrintConversionException(this, e,
					context);
		}
	}

	@Override
	public void serializeURIs(mila.generated.impl.runtime.XMLSerializer context)
			throws org.xml.sax.SAXException {
	}

	@Override
	public void setBeinoniConstruct(boolean value) {
		_BeinoniConstruct = value;
		has_BeinoniConstruct = true;
	}

	@Override
	public void setBeinoniDefiniteness(boolean value) {
		_BeinoniDefiniteness = value;
		has_BeinoniDefiniteness = true;
	}

	@Override
	public void setDotted(java.lang.String value) {
		_Dotted = value;
	}

	@Override
	public void setGender(java.lang.String value) {
		_Gender = value;
	}

	@Override
	public void setInflectBeinoniPossessive(boolean value) {
		_InflectBeinoniPossessive = value;
		has_InflectBeinoniPossessive = true;
	}

	@Override
	public void setNumber(java.lang.String value) {
		_Number = value;
	}

	@Override
	public void setPerson(java.lang.String value) {
		_Person = value;
	}

	@Override
	public void setPgn(java.lang.String value) {
		_Pgn = value;
	}

	@Override
	public void setScript(java.lang.String value) {
		_Script = value;
	}

	@Override
	public void setTense(java.lang.String value) {
		_Tense = value;
	}

	@Override
	public void setTransliterated(java.lang.String value) {
		_Transliterated = value;
	}

	@Override
	public void setUndotted(java.lang.String value) {
		_Undotted = value;
	}

	@Override
	public void setValue(java.lang.String value) {
		_Value = value;
	}

}
