//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v1.0.5-b16-fcs 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2008.12.01 at 02:23:12 PM IST 
//

package mila.generated.impl;

public class AcronymLexiconTypeImpl implements mila.generated.AcronymLexiconType,
		com.sun.xml.bind.JAXBObject,
		mila.generated.impl.runtime.UnmarshallableObject,
		mila.generated.impl.runtime.XMLSerializable,
		mila.generated.impl.runtime.ValidatableObject {

	public static class AddImpl extends mila.generated.impl.AcronymExceptionTypeImpl
			implements mila.generated.AcronymLexiconType.Add,
			com.sun.xml.bind.RIElement, com.sun.xml.bind.JAXBObject,
			mila.generated.impl.runtime.UnmarshallableObject,
			mila.generated.impl.runtime.XMLSerializable,
			mila.generated.impl.runtime.ValidatableObject {

		public class Unmarshaller extends
				mila.generated.impl.runtime.AbstractUnmarshallingEventHandlerImpl {

			public Unmarshaller(
					mila.generated.impl.runtime.UnmarshallingContext context) {
				super(context, "----");
			}

			protected Unmarshaller(
					mila.generated.impl.runtime.UnmarshallingContext context,
					int startState) {
				this(context);
				state = startState;
			}

			@Override
			public void enterAttribute(java.lang.String ___uri,
					java.lang.String ___local, java.lang.String ___qname)
					throws org.xml.sax.SAXException {
				int attIdx;
				outer: while (true) {
					switch (state) {
					case 3:
						revertToParentFromEnterAttribute(___uri, ___local,
								___qname);
						return;
					case 1:
						if (("conjunctionType" == ___local) && ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((mila.generated.impl.AcronymExceptionTypeImpl) mila.generated.impl.AcronymLexiconTypeImpl.AddImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						if (("dotted" == ___local) && ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((mila.generated.impl.AcronymExceptionTypeImpl) mila.generated.impl.AcronymLexiconTypeImpl.AddImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						if (("gender" == ___local) && ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((mila.generated.impl.AcronymExceptionTypeImpl) mila.generated.impl.AcronymLexiconTypeImpl.AddImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						if (("number" == ___local) && ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((mila.generated.impl.AcronymExceptionTypeImpl) mila.generated.impl.AcronymLexiconTypeImpl.AddImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						if (("properNameType" == ___local) && ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((mila.generated.impl.AcronymExceptionTypeImpl) mila.generated.impl.AcronymLexiconTypeImpl.AddImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						if (("script" == ___local) && ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((mila.generated.impl.AcronymExceptionTypeImpl) mila.generated.impl.AcronymLexiconTypeImpl.AddImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						if (("transliterated" == ___local) && ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((mila.generated.impl.AcronymExceptionTypeImpl) mila.generated.impl.AcronymLexiconTypeImpl.AddImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						break;
					}
					super.enterAttribute(___uri, ___local, ___qname);
					break;
				}
			}

			@Override
			public void enterElement(java.lang.String ___uri,
					java.lang.String ___local, java.lang.String ___qname,
					org.xml.sax.Attributes __atts)
					throws org.xml.sax.SAXException {
				int attIdx;
				outer: while (true) {
					switch (state) {
					case 3:
						revertToParentFromEnterElement(___uri, ___local,
								___qname, __atts);
						return;
					case 1:
						attIdx = context.getAttribute("", "conjunctionType");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						attIdx = context.getAttribute("", "dotted");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						attIdx = context.getAttribute("", "gender");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						attIdx = context.getAttribute("", "number");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						attIdx = context.getAttribute("", "properNameType");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						attIdx = context.getAttribute("", "script");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						attIdx = context.getAttribute("", "transliterated");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						break;
					case 0:
						if (("add" == ___local) && ("" == ___uri)) {
							context.pushAttributes(__atts, true);
							state = 1;
							return;
						}
						break;
					}
					super.enterElement(___uri, ___local, ___qname, __atts);
					break;
				}
			}

			@Override
			public void handleText(final java.lang.String value)
					throws org.xml.sax.SAXException {
				int attIdx;
				outer: while (true) {
					try {
						switch (state) {
						case 3:
							revertToParentFromText(value);
							return;
						case 1:
							attIdx = context
									.getAttribute("", "conjunctionType");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							attIdx = context.getAttribute("", "dotted");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							attIdx = context.getAttribute("", "gender");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							attIdx = context.getAttribute("", "number");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							attIdx = context.getAttribute("", "properNameType");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							attIdx = context.getAttribute("", "script");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							attIdx = context.getAttribute("", "transliterated");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							break;
						}
					} catch (java.lang.RuntimeException e) {
						handleUnexpectedTextException(value, e);
					}
					break;
				}
			}

			@Override
			public void leaveAttribute(java.lang.String ___uri,
					java.lang.String ___local, java.lang.String ___qname)
					throws org.xml.sax.SAXException {
				int attIdx;
				outer: while (true) {
					switch (state) {
					case 3:
						revertToParentFromLeaveAttribute(___uri, ___local,
								___qname);
						return;
					case 1:
						attIdx = context.getAttribute("", "conjunctionType");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "dotted");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "gender");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "number");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "properNameType");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "script");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "transliterated");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						break;
					}
					super.leaveAttribute(___uri, ___local, ___qname);
					break;
				}
			}

			@Override
			public void leaveElement(java.lang.String ___uri,
					java.lang.String ___local, java.lang.String ___qname)
					throws org.xml.sax.SAXException {
				int attIdx;
				outer: while (true) {
					switch (state) {
					case 3:
						revertToParentFromLeaveElement(___uri, ___local,
								___qname);
						return;
					case 1:
						attIdx = context.getAttribute("", "conjunctionType");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "dotted");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "gender");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "number");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "properNameType");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "script");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "transliterated");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						break;
					case 2:
						if (("add" == ___local) && ("" == ___uri)) {
							context.popAttributes();
							state = 3;
							return;
						}
						break;
					}
					super.leaveElement(___uri, ___local, ___qname);
					break;
				}
			}

			@Override
			public java.lang.Object owner() {
				return mila.generated.impl.AcronymLexiconTypeImpl.AddImpl.this;
			}

		}

		public final static java.lang.Class<JAXBVersion> version = (mila.generated.impl.JAXBVersion.class);

		private static com.sun.msv.grammar.Grammar schemaFragment;

		private final static java.lang.Class PRIMARY_INTERFACE_CLASS() {
			return (mila.generated.AcronymLexiconType.Add.class);
		}

		@Override
		public java.lang.String ____jaxb_ri____getLocalName() {
			return "add";
		}

		@Override
		public java.lang.String ____jaxb_ri____getNamespaceURI() {
			return "";
		}

		@Override
		public com.sun.msv.verifier.DocumentDeclaration createRawValidator() {
			if (schemaFragment == null) {
				schemaFragment = com.sun.xml.bind.validator.SchemaDeserializer
						.deserialize(("\u00ac\u00ed\u0000\u0005sr\u0000\'com.sun.msv.grammar.trex.ElementPattern\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000"
								+ "\tnameClasst\u0000\u001fLcom/sun/msv/grammar/NameClass;xr\u0000\u001ecom.sun.msv."
								+ "grammar.ElementExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002Z\u0000\u001aignoreUndeclaredAttributesL\u0000"
								+ "\fcontentModelt\u0000 Lcom/sun/msv/grammar/Expression;xr\u0000\u001ecom.sun."
								+ "msv.grammar.Expression\u00f8\u0018\u0082\u00e8N5~O\u0002\u0000\u0002L\u0000\u0013epsilonReducibilityt\u0000\u0013Lj"
								+ "ava/lang/Boolean;L\u0000\u000bexpandedExpq\u0000~\u0000\u0003xppp\u0000sr\u0000\u001fcom.sun.msv.gra"
								+ "mmar.SequenceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.sun.msv.grammar.BinaryExp"
								+ "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0004exp1q\u0000~\u0000\u0003L\u0000\u0004exp2q\u0000~\u0000\u0003xq\u0000~\u0000\u0004ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007pps"
								+ "q\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsr\u0000\u001bcom.sun.m"
								+ "sv.grammar.DataExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\u0002dtt\u0000\u001fLorg/relaxng/datatype/D"
								+ "atatype;L\u0000\u0006exceptq\u0000~\u0000\u0003L\u0000\u0004namet\u0000\u001dLcom/sun/msv/util/StringPair"
								+ ";xq\u0000~\u0000\u0004ppsr\u0000\"com.sun.msv.datatype.xsd.TokenType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr"
								+ "\u0000#com.sun.msv.datatype.xsd.StringType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001Z\u0000\risAlwaysV"
								+ "alidxr\u0000*com.sun.msv.datatype.xsd.BuiltinAtomicType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000"
								+ "\u0000xr\u0000%com.sun.msv.datatype.xsd.ConcreteType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\'com"
								+ ".sun.msv.datatype.xsd.XSDatatypeImpl\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\fnamespaceU"
								+ "rit\u0000\u0012Ljava/lang/String;L\u0000\btypeNameq\u0000~\u0000\u001bL\u0000\nwhiteSpacet\u0000.Lcom/"
								+ "sun/msv/datatype/xsd/WhiteSpaceProcessor;xpt\u0000 http://www.w3."
								+ "org/2001/XMLSchemat\u0000\u0005tokensr\u00005com.sun.msv.datatype.xsd.White"
								+ "SpaceProcessor$Collapse\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000,com.sun.msv.datatype.x"
								+ "sd.WhiteSpaceProcessor\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xp\u0001sr\u00000com.sun.msv.grammar."
								+ "Expression$NullSetExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0004ppsr\u0000\u001bcom.sun.m"
								+ "sv.util.StringPair\u00d0t\u001ejB\u008f\u008d\u00a0\u0002\u0000\u0002L\u0000\tlocalNameq\u0000~\u0000\u001bL\u0000\fnamespaceUR"
								+ "Iq\u0000~\u0000\u001bxpq\u0000~\u0000\u001fq\u0000~\u0000\u001esr\u0000\u001dcom.sun.msv.grammar.ChoiceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002"
								+ "\u0000\u0000xq\u0000~\u0000\bppsr\u0000 com.sun.msv.grammar.AttributeExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0003"
								+ "expq\u0000~\u0000\u0003L\u0000\tnameClassq\u0000~\u0000\u0001xq\u0000~\u0000\u0004sr\u0000\u0011java.lang.Boolean\u00cd r\u0080\u00d5\u009c\u00fa\u00ee"
								+ "\u0002\u0000\u0001Z\u0000\u0005valuexp\u0000psq\u0000~\u0000\u0012ppsr\u0000)com.sun.msv.datatype.xsd.Enumerat"
								+ "ionFacet\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\u0006valuest\u0000\u000fLjava/util/Set;xr\u00009com.sun.ms"
								+ "v.datatype.xsd.DataTypeWithValueConstraintFacet\"\u00a7Ro\u00ca\u00c7\u008aT\u0002\u0000\u0000xr"
								+ "\u0000*com.sun.msv.datatype.xsd.DataTypeWithFacet\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0005Z\u0000\fis"
								+ "FacetFixedZ\u0000\u0012needValueCheckFlagL\u0000\bbaseTypet\u0000)Lcom/sun/msv/da"
								+ "tatype/xsd/XSDatatypeImpl;L\u0000\fconcreteTypet\u0000\'Lcom/sun/msv/dat"
								+ "atype/xsd/ConcreteType;L\u0000\tfacetNameq\u0000~\u0000\u001bxq\u0000~\u0000\u001at\u0000\u0000t\u0000\u000fConjunct"
								+ "ionTypeq\u0000~\u0000\"\u0000\u0000q\u0000~\u0000\u001dq\u0000~\u0000\u001dt\u0000\u000benumerationsr\u0000\u0011java.util.HashSet\u00ba"
								+ "D\u0085\u0095\u0096\u00b8\u00b74\u0003\u0000\u0000xpw\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\u0004t\u0000\u000bunspecifiedt\u0000\rsubordinatingt\u0000\fr"
								+ "elativizingt\u0000\fcoordinatingxq\u0000~\u0000$sq\u0000~\u0000%q\u0000~\u00006q\u0000~\u00005sr\u0000#com.sun."
								+ "msv.grammar.SimpleNameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\tlocalNameq\u0000~\u0000\u001bL\u0000\fna"
								+ "mespaceURIq\u0000~\u0000\u001bxr\u0000\u001dcom.sun.msv.grammar.NameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000x"
								+ "pt\u0000\u000fconjunctionTypeq\u0000~\u00005sr\u00000com.sun.msv.grammar.Expression$E"
								+ "psilonExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0004sq\u0000~\u0000+\u0001q\u0000~\u0000Dsq\u0000~\u0000\'ppsq\u0000~\u0000)q"
								+ "\u0000~\u0000,pq\u0000~\u0000\u0015sq\u0000~\u0000?t\u0000\u0006dottedq\u0000~\u00005q\u0000~\u0000Dsq\u0000~\u0000\'ppsq\u0000~\u0000)q\u0000~\u0000,psq\u0000~\u0000"
								+ "\u0012ppsq\u0000~\u0000.q\u0000~\u00005t\u0000\nGenderTypeq\u0000~\u0000\"\u0000\u0000q\u0000~\u0000\u001dq\u0000~\u0000\u001dq\u0000~\u00007sq\u0000~\u00008w\f\u0000\u0000\u0000"
								+ "\u0010?@\u0000\u0000\u0000\u0000\u0000\u0004t\u0000\u000bunspecifiedt\u0000\bfemininet\u0000\u0016masculine and femininet"
								+ "\u0000\tmasculinexq\u0000~\u0000$sq\u0000~\u0000%q\u0000~\u0000Nq\u0000~\u00005sq\u0000~\u0000?t\u0000\u0006genderq\u0000~\u00005q\u0000~\u0000Dsq"
								+ "\u0000~\u0000\'ppsq\u0000~\u0000)q\u0000~\u0000,psq\u0000~\u0000\u0012ppsq\u0000~\u0000.q\u0000~\u00005t\u0000\nNumberTypeq\u0000~\u0000\"\u0000\u0000q\u0000~"
								+ "\u0000\u001dq\u0000~\u0000\u001dq\u0000~\u00007sq\u0000~\u00008w\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\u0006t\u0000\u000bunspecifiedt\u0000\u0013singular an"
								+ "d pluralt\u0000\u0004dualt\u0000\u000fdual and pluralt\u0000\bsingulart\u0000\u0006pluralxq\u0000~\u0000$s"
								+ "q\u0000~\u0000%q\u0000~\u0000[q\u0000~\u00005sq\u0000~\u0000?t\u0000\u0006numberq\u0000~\u00005q\u0000~\u0000Dsq\u0000~\u0000\'ppsq\u0000~\u0000)q\u0000~\u0000,p"
								+ "sq\u0000~\u0000\u0012ppsq\u0000~\u0000.q\u0000~\u00005t\u0000\u000fNamedEntityTypeq\u0000~\u0000\"\u0000\u0000q\u0000~\u0000\u001dq\u0000~\u0000\u001dq\u0000~\u00007s"
								+ "q\u0000~\u00008w\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\u000bt\u0000\u000bunspecifiedt\u0000\u0007productt\u0000\u0005othert\u0000\bdateTi"
								+ "met\u0000\u0007countryt\u0000\u0004coint\u0000\u0006persont\u0000\blocationt\u0000\blanguaget\u0000\u0006symbolt"
								+ "\u0000\forganizationxq\u0000~\u0000$sq\u0000~\u0000%q\u0000~\u0000jq\u0000~\u00005sq\u0000~\u0000?t\u0000\u000eproperNameTypeq"
								+ "\u0000~\u00005q\u0000~\u0000Dsq\u0000~\u0000\'ppsq\u0000~\u0000)q\u0000~\u0000,psq\u0000~\u0000\u0012ppsq\u0000~\u0000.q\u0000~\u00005t\u0000\nScriptTyp"
								+ "eq\u0000~\u0000\"\u0000\u0000q\u0000~\u0000\u001dq\u0000~\u0000\u001dq\u0000~\u00007sq\u0000~\u00008w\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\u0004t\u0000\u0004typot\u0000\u0006formalt"
								+ "\u0000\u0005slangt\u0000\ncolloquialxq\u0000~\u0000$sq\u0000~\u0000%q\u0000~\u0000~q\u0000~\u00005sq\u0000~\u0000?t\u0000\u0006scriptq\u0000~"
								+ "\u00005q\u0000~\u0000Dsq\u0000~\u0000)ppq\u0000~\u0000\u0015sq\u0000~\u0000?t\u0000\u000etransliteratedq\u0000~\u00005sq\u0000~\u0000)ppq\u0000~\u0000"
								+ "\u0015sq\u0000~\u0000?t\u0000\bundottedq\u0000~\u00005sq\u0000~\u0000\'ppsq\u0000~\u0000)q\u0000~\u0000,psq\u0000~\u0000\u0012ppsr\u0000\"com.s"
								+ "un.msv.datatype.xsd.QnameType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0018q\u0000~\u0000\u001et\u0000\u0005QNameq"
								+ "\u0000~\u0000\"q\u0000~\u0000$sq\u0000~\u0000%q\u0000~\u0000\u0092q\u0000~\u0000\u001esq\u0000~\u0000?t\u0000\u0004typet\u0000)http://www.w3.org/2"
								+ "001/XMLSchema-instanceq\u0000~\u0000Dsq\u0000~\u0000?t\u0000\u0003addq\u0000~\u00005sr\u0000\"com.sun.msv."
								+ "grammar.ExpressionPool\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\bexpTablet\u0000/Lcom/sun/msv/"
								+ "grammar/ExpressionPool$ClosedHash;xpsr\u0000-com.sun.msv.grammar."
								+ "ExpressionPool$ClosedHash\u00d7j\u00d0N\u00ef\u00e8\u00ed\u001c\u0003\u0000\u0003I\u0000\u0005countB\u0000\rstreamVersion"
								+ "L\u0000\u0006parentt\u0000$Lcom/sun/msv/grammar/ExpressionPool;xp\u0000\u0000\u0000\u0010\u0001pq\u0000~\u0000"
								+ "\u008dq\u0000~\u0000\u000bq\u0000~\u0000\u0010q\u0000~\u0000\nq\u0000~\u0000(q\u0000~\u0000\u000eq\u0000~\u0000Jq\u0000~\u0000zq\u0000~\u0000\tq\u0000~\u0000\u000fq\u0000~\u0000\u0011q\u0000~\u0000\rq\u0000~\u0000"
								+ "Fq\u0000~\u0000Wq\u0000~\u0000fq\u0000~\u0000\fx"));
			}
			return new com.sun.msv.verifier.regexp.REDocumentDeclaration(
					schemaFragment);
		}

		@Override
		public mila.generated.impl.runtime.UnmarshallingEventHandler createUnmarshaller(
				mila.generated.impl.runtime.UnmarshallingContext context) {
			return new mila.generated.impl.AcronymLexiconTypeImpl.AddImpl.Unmarshaller(
					context);
		}

		@Override
		public java.lang.Class getPrimaryInterface() {
			return (mila.generated.AcronymLexiconType.Add.class);
		}

		@Override
		public void serializeAttributes(
				mila.generated.impl.runtime.XMLSerializer context)
				throws org.xml.sax.SAXException {
		}

		@Override
		public void serializeBody(mila.generated.impl.runtime.XMLSerializer context)
				throws org.xml.sax.SAXException {
			context.startElement("", "add");
			super.serializeURIs(context);
			context.endNamespaceDecls();
			super.serializeAttributes(context);
			context.endAttributes();
			super.serializeBody(context);
			context.endElement();
		}

		@Override
		public void serializeURIs(mila.generated.impl.runtime.XMLSerializer context)
				throws org.xml.sax.SAXException {
		}

	}

	public static class RemoveImpl extends
			mila.generated.impl.AcronymExceptionTypeImpl implements
			mila.generated.AcronymLexiconType.Remove, com.sun.xml.bind.RIElement,
			com.sun.xml.bind.JAXBObject,
			mila.generated.impl.runtime.UnmarshallableObject,
			mila.generated.impl.runtime.XMLSerializable,
			mila.generated.impl.runtime.ValidatableObject {

		public class Unmarshaller extends
				mila.generated.impl.runtime.AbstractUnmarshallingEventHandlerImpl {

			public Unmarshaller(
					mila.generated.impl.runtime.UnmarshallingContext context) {
				super(context, "----");
			}

			protected Unmarshaller(
					mila.generated.impl.runtime.UnmarshallingContext context,
					int startState) {
				this(context);
				state = startState;
			}

			@Override
			public void enterAttribute(java.lang.String ___uri,
					java.lang.String ___local, java.lang.String ___qname)
					throws org.xml.sax.SAXException {
				int attIdx;
				outer: while (true) {
					switch (state) {
					case 3:
						revertToParentFromEnterAttribute(___uri, ___local,
								___qname);
						return;
					case 1:
						if (("conjunctionType" == ___local) && ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((mila.generated.impl.AcronymExceptionTypeImpl) mila.generated.impl.AcronymLexiconTypeImpl.RemoveImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						if (("dotted" == ___local) && ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((mila.generated.impl.AcronymExceptionTypeImpl) mila.generated.impl.AcronymLexiconTypeImpl.RemoveImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						if (("gender" == ___local) && ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((mila.generated.impl.AcronymExceptionTypeImpl) mila.generated.impl.AcronymLexiconTypeImpl.RemoveImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						if (("number" == ___local) && ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((mila.generated.impl.AcronymExceptionTypeImpl) mila.generated.impl.AcronymLexiconTypeImpl.RemoveImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						if (("properNameType" == ___local) && ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((mila.generated.impl.AcronymExceptionTypeImpl) mila.generated.impl.AcronymLexiconTypeImpl.RemoveImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						if (("script" == ___local) && ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((mila.generated.impl.AcronymExceptionTypeImpl) mila.generated.impl.AcronymLexiconTypeImpl.RemoveImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						if (("transliterated" == ___local) && ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((mila.generated.impl.AcronymExceptionTypeImpl) mila.generated.impl.AcronymLexiconTypeImpl.RemoveImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						break;
					}
					super.enterAttribute(___uri, ___local, ___qname);
					break;
				}
			}

			@Override
			public void enterElement(java.lang.String ___uri,
					java.lang.String ___local, java.lang.String ___qname,
					org.xml.sax.Attributes __atts)
					throws org.xml.sax.SAXException {
				int attIdx;
				outer: while (true) {
					switch (state) {
					case 3:
						revertToParentFromEnterElement(___uri, ___local,
								___qname, __atts);
						return;
					case 1:
						attIdx = context.getAttribute("", "conjunctionType");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						attIdx = context.getAttribute("", "dotted");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						attIdx = context.getAttribute("", "gender");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						attIdx = context.getAttribute("", "number");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						attIdx = context.getAttribute("", "properNameType");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						attIdx = context.getAttribute("", "script");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						attIdx = context.getAttribute("", "transliterated");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						break;
					case 0:
						if (("remove" == ___local) && ("" == ___uri)) {
							context.pushAttributes(__atts, true);
							state = 1;
							return;
						}
						break;
					}
					super.enterElement(___uri, ___local, ___qname, __atts);
					break;
				}
			}

			@Override
			public void handleText(final java.lang.String value)
					throws org.xml.sax.SAXException {
				int attIdx;
				outer: while (true) {
					try {
						switch (state) {
						case 3:
							revertToParentFromText(value);
							return;
						case 1:
							attIdx = context
									.getAttribute("", "conjunctionType");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							attIdx = context.getAttribute("", "dotted");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							attIdx = context.getAttribute("", "gender");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							attIdx = context.getAttribute("", "number");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							attIdx = context.getAttribute("", "properNameType");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							attIdx = context.getAttribute("", "script");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							attIdx = context.getAttribute("", "transliterated");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							break;
						}
					} catch (java.lang.RuntimeException e) {
						handleUnexpectedTextException(value, e);
					}
					break;
				}
			}

			@Override
			public void leaveAttribute(java.lang.String ___uri,
					java.lang.String ___local, java.lang.String ___qname)
					throws org.xml.sax.SAXException {
				int attIdx;
				outer: while (true) {
					switch (state) {
					case 3:
						revertToParentFromLeaveAttribute(___uri, ___local,
								___qname);
						return;
					case 1:
						attIdx = context.getAttribute("", "conjunctionType");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "dotted");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "gender");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "number");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "properNameType");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "script");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "transliterated");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						break;
					}
					super.leaveAttribute(___uri, ___local, ___qname);
					break;
				}
			}

			@Override
			public void leaveElement(java.lang.String ___uri,
					java.lang.String ___local, java.lang.String ___qname)
					throws org.xml.sax.SAXException {
				int attIdx;
				outer: while (true) {
					switch (state) {
					case 3:
						revertToParentFromLeaveElement(___uri, ___local,
								___qname);
						return;
					case 2:
						if (("remove" == ___local) && ("" == ___uri)) {
							context.popAttributes();
							state = 3;
							return;
						}
						break;
					case 1:
						attIdx = context.getAttribute("", "conjunctionType");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "dotted");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "gender");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "number");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "properNameType");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "script");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "transliterated");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						break;
					}
					super.leaveElement(___uri, ___local, ___qname);
					break;
				}
			}

			@Override
			public java.lang.Object owner() {
				return mila.generated.impl.AcronymLexiconTypeImpl.RemoveImpl.this;
			}

		}

		public final static java.lang.Class<JAXBVersion> version = (mila.generated.impl.JAXBVersion.class);

		private static com.sun.msv.grammar.Grammar schemaFragment;

		private final static java.lang.Class PRIMARY_INTERFACE_CLASS() {
			return (mila.generated.AcronymLexiconType.Remove.class);
		}

		@Override
		public java.lang.String ____jaxb_ri____getLocalName() {
			return "remove";
		}

		@Override
		public java.lang.String ____jaxb_ri____getNamespaceURI() {
			return "";
		}

		@Override
		public com.sun.msv.verifier.DocumentDeclaration createRawValidator() {
			if (schemaFragment == null) {
				schemaFragment = com.sun.xml.bind.validator.SchemaDeserializer
						.deserialize(("\u00ac\u00ed\u0000\u0005sr\u0000\'com.sun.msv.grammar.trex.ElementPattern\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000"
								+ "\tnameClasst\u0000\u001fLcom/sun/msv/grammar/NameClass;xr\u0000\u001ecom.sun.msv."
								+ "grammar.ElementExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002Z\u0000\u001aignoreUndeclaredAttributesL\u0000"
								+ "\fcontentModelt\u0000 Lcom/sun/msv/grammar/Expression;xr\u0000\u001ecom.sun."
								+ "msv.grammar.Expression\u00f8\u0018\u0082\u00e8N5~O\u0002\u0000\u0002L\u0000\u0013epsilonReducibilityt\u0000\u0013Lj"
								+ "ava/lang/Boolean;L\u0000\u000bexpandedExpq\u0000~\u0000\u0003xppp\u0000sr\u0000\u001fcom.sun.msv.gra"
								+ "mmar.SequenceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.sun.msv.grammar.BinaryExp"
								+ "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0004exp1q\u0000~\u0000\u0003L\u0000\u0004exp2q\u0000~\u0000\u0003xq\u0000~\u0000\u0004ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007pps"
								+ "q\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsr\u0000\u001bcom.sun.m"
								+ "sv.grammar.DataExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\u0002dtt\u0000\u001fLorg/relaxng/datatype/D"
								+ "atatype;L\u0000\u0006exceptq\u0000~\u0000\u0003L\u0000\u0004namet\u0000\u001dLcom/sun/msv/util/StringPair"
								+ ";xq\u0000~\u0000\u0004ppsr\u0000\"com.sun.msv.datatype.xsd.TokenType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr"
								+ "\u0000#com.sun.msv.datatype.xsd.StringType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001Z\u0000\risAlwaysV"
								+ "alidxr\u0000*com.sun.msv.datatype.xsd.BuiltinAtomicType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000"
								+ "\u0000xr\u0000%com.sun.msv.datatype.xsd.ConcreteType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\'com"
								+ ".sun.msv.datatype.xsd.XSDatatypeImpl\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\fnamespaceU"
								+ "rit\u0000\u0012Ljava/lang/String;L\u0000\btypeNameq\u0000~\u0000\u001bL\u0000\nwhiteSpacet\u0000.Lcom/"
								+ "sun/msv/datatype/xsd/WhiteSpaceProcessor;xpt\u0000 http://www.w3."
								+ "org/2001/XMLSchemat\u0000\u0005tokensr\u00005com.sun.msv.datatype.xsd.White"
								+ "SpaceProcessor$Collapse\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000,com.sun.msv.datatype.x"
								+ "sd.WhiteSpaceProcessor\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xp\u0001sr\u00000com.sun.msv.grammar."
								+ "Expression$NullSetExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0004ppsr\u0000\u001bcom.sun.m"
								+ "sv.util.StringPair\u00d0t\u001ejB\u008f\u008d\u00a0\u0002\u0000\u0002L\u0000\tlocalNameq\u0000~\u0000\u001bL\u0000\fnamespaceUR"
								+ "Iq\u0000~\u0000\u001bxpq\u0000~\u0000\u001fq\u0000~\u0000\u001esr\u0000\u001dcom.sun.msv.grammar.ChoiceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002"
								+ "\u0000\u0000xq\u0000~\u0000\bppsr\u0000 com.sun.msv.grammar.AttributeExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0003"
								+ "expq\u0000~\u0000\u0003L\u0000\tnameClassq\u0000~\u0000\u0001xq\u0000~\u0000\u0004sr\u0000\u0011java.lang.Boolean\u00cd r\u0080\u00d5\u009c\u00fa\u00ee"
								+ "\u0002\u0000\u0001Z\u0000\u0005valuexp\u0000psq\u0000~\u0000\u0012ppsr\u0000)com.sun.msv.datatype.xsd.Enumerat"
								+ "ionFacet\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\u0006valuest\u0000\u000fLjava/util/Set;xr\u00009com.sun.ms"
								+ "v.datatype.xsd.DataTypeWithValueConstraintFacet\"\u00a7Ro\u00ca\u00c7\u008aT\u0002\u0000\u0000xr"
								+ "\u0000*com.sun.msv.datatype.xsd.DataTypeWithFacet\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0005Z\u0000\fis"
								+ "FacetFixedZ\u0000\u0012needValueCheckFlagL\u0000\bbaseTypet\u0000)Lcom/sun/msv/da"
								+ "tatype/xsd/XSDatatypeImpl;L\u0000\fconcreteTypet\u0000\'Lcom/sun/msv/dat"
								+ "atype/xsd/ConcreteType;L\u0000\tfacetNameq\u0000~\u0000\u001bxq\u0000~\u0000\u001at\u0000\u0000t\u0000\u000fConjunct"
								+ "ionTypeq\u0000~\u0000\"\u0000\u0000q\u0000~\u0000\u001dq\u0000~\u0000\u001dt\u0000\u000benumerationsr\u0000\u0011java.util.HashSet\u00ba"
								+ "D\u0085\u0095\u0096\u00b8\u00b74\u0003\u0000\u0000xpw\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\u0004t\u0000\u000bunspecifiedt\u0000\rsubordinatingt\u0000\fr"
								+ "elativizingt\u0000\fcoordinatingxq\u0000~\u0000$sq\u0000~\u0000%q\u0000~\u00006q\u0000~\u00005sr\u0000#com.sun."
								+ "msv.grammar.SimpleNameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\tlocalNameq\u0000~\u0000\u001bL\u0000\fna"
								+ "mespaceURIq\u0000~\u0000\u001bxr\u0000\u001dcom.sun.msv.grammar.NameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000x"
								+ "pt\u0000\u000fconjunctionTypeq\u0000~\u00005sr\u00000com.sun.msv.grammar.Expression$E"
								+ "psilonExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0004sq\u0000~\u0000+\u0001q\u0000~\u0000Dsq\u0000~\u0000\'ppsq\u0000~\u0000)q"
								+ "\u0000~\u0000,pq\u0000~\u0000\u0015sq\u0000~\u0000?t\u0000\u0006dottedq\u0000~\u00005q\u0000~\u0000Dsq\u0000~\u0000\'ppsq\u0000~\u0000)q\u0000~\u0000,psq\u0000~\u0000"
								+ "\u0012ppsq\u0000~\u0000.q\u0000~\u00005t\u0000\nGenderTypeq\u0000~\u0000\"\u0000\u0000q\u0000~\u0000\u001dq\u0000~\u0000\u001dq\u0000~\u00007sq\u0000~\u00008w\f\u0000\u0000\u0000"
								+ "\u0010?@\u0000\u0000\u0000\u0000\u0000\u0004t\u0000\u000bunspecifiedt\u0000\bfemininet\u0000\u0016masculine and femininet"
								+ "\u0000\tmasculinexq\u0000~\u0000$sq\u0000~\u0000%q\u0000~\u0000Nq\u0000~\u00005sq\u0000~\u0000?t\u0000\u0006genderq\u0000~\u00005q\u0000~\u0000Dsq"
								+ "\u0000~\u0000\'ppsq\u0000~\u0000)q\u0000~\u0000,psq\u0000~\u0000\u0012ppsq\u0000~\u0000.q\u0000~\u00005t\u0000\nNumberTypeq\u0000~\u0000\"\u0000\u0000q\u0000~"
								+ "\u0000\u001dq\u0000~\u0000\u001dq\u0000~\u00007sq\u0000~\u00008w\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\u0006t\u0000\u000bunspecifiedt\u0000\u0013singular an"
								+ "d pluralt\u0000\u0004dualt\u0000\u000fdual and pluralt\u0000\bsingulart\u0000\u0006pluralxq\u0000~\u0000$s"
								+ "q\u0000~\u0000%q\u0000~\u0000[q\u0000~\u00005sq\u0000~\u0000?t\u0000\u0006numberq\u0000~\u00005q\u0000~\u0000Dsq\u0000~\u0000\'ppsq\u0000~\u0000)q\u0000~\u0000,p"
								+ "sq\u0000~\u0000\u0012ppsq\u0000~\u0000.q\u0000~\u00005t\u0000\u000fNamedEntityTypeq\u0000~\u0000\"\u0000\u0000q\u0000~\u0000\u001dq\u0000~\u0000\u001dq\u0000~\u00007s"
								+ "q\u0000~\u00008w\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\u000bt\u0000\u000bunspecifiedt\u0000\u0007productt\u0000\u0005othert\u0000\bdateTi"
								+ "met\u0000\u0007countryt\u0000\u0004coint\u0000\u0006persont\u0000\blocationt\u0000\blanguaget\u0000\u0006symbolt"
								+ "\u0000\forganizationxq\u0000~\u0000$sq\u0000~\u0000%q\u0000~\u0000jq\u0000~\u00005sq\u0000~\u0000?t\u0000\u000eproperNameTypeq"
								+ "\u0000~\u00005q\u0000~\u0000Dsq\u0000~\u0000\'ppsq\u0000~\u0000)q\u0000~\u0000,psq\u0000~\u0000\u0012ppsq\u0000~\u0000.q\u0000~\u00005t\u0000\nScriptTyp"
								+ "eq\u0000~\u0000\"\u0000\u0000q\u0000~\u0000\u001dq\u0000~\u0000\u001dq\u0000~\u00007sq\u0000~\u00008w\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\u0004t\u0000\u0004typot\u0000\u0006formalt"
								+ "\u0000\u0005slangt\u0000\ncolloquialxq\u0000~\u0000$sq\u0000~\u0000%q\u0000~\u0000~q\u0000~\u00005sq\u0000~\u0000?t\u0000\u0006scriptq\u0000~"
								+ "\u00005q\u0000~\u0000Dsq\u0000~\u0000)ppq\u0000~\u0000\u0015sq\u0000~\u0000?t\u0000\u000etransliteratedq\u0000~\u00005sq\u0000~\u0000)ppq\u0000~\u0000"
								+ "\u0015sq\u0000~\u0000?t\u0000\bundottedq\u0000~\u00005sq\u0000~\u0000\'ppsq\u0000~\u0000)q\u0000~\u0000,psq\u0000~\u0000\u0012ppsr\u0000\"com.s"
								+ "un.msv.datatype.xsd.QnameType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0018q\u0000~\u0000\u001et\u0000\u0005QNameq"
								+ "\u0000~\u0000\"q\u0000~\u0000$sq\u0000~\u0000%q\u0000~\u0000\u0092q\u0000~\u0000\u001esq\u0000~\u0000?t\u0000\u0004typet\u0000)http://www.w3.org/2"
								+ "001/XMLSchema-instanceq\u0000~\u0000Dsq\u0000~\u0000?t\u0000\u0006removeq\u0000~\u00005sr\u0000\"com.sun.m"
								+ "sv.grammar.ExpressionPool\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\bexpTablet\u0000/Lcom/sun/m"
								+ "sv/grammar/ExpressionPool$ClosedHash;xpsr\u0000-com.sun.msv.gramm"
								+ "ar.ExpressionPool$ClosedHash\u00d7j\u00d0N\u00ef\u00e8\u00ed\u001c\u0003\u0000\u0003I\u0000\u0005countB\u0000\rstreamVers"
								+ "ionL\u0000\u0006parentt\u0000$Lcom/sun/msv/grammar/ExpressionPool;xp\u0000\u0000\u0000\u0010\u0001pq"
								+ "\u0000~\u0000\u008dq\u0000~\u0000\u000bq\u0000~\u0000\u0010q\u0000~\u0000\nq\u0000~\u0000(q\u0000~\u0000\u000eq\u0000~\u0000Jq\u0000~\u0000zq\u0000~\u0000\tq\u0000~\u0000\u000fq\u0000~\u0000\u0011q\u0000~\u0000\rq"
								+ "\u0000~\u0000Fq\u0000~\u0000Wq\u0000~\u0000fq\u0000~\u0000\fx"));
			}
			return new com.sun.msv.verifier.regexp.REDocumentDeclaration(
					schemaFragment);
		}

		@Override
		public mila.generated.impl.runtime.UnmarshallingEventHandler createUnmarshaller(
				mila.generated.impl.runtime.UnmarshallingContext context) {
			return new mila.generated.impl.AcronymLexiconTypeImpl.RemoveImpl.Unmarshaller(
					context);
		}

		@Override
		public java.lang.Class getPrimaryInterface() {
			return (mila.generated.AcronymLexiconType.Remove.class);
		}

		@Override
		public void serializeAttributes(
				mila.generated.impl.runtime.XMLSerializer context)
				throws org.xml.sax.SAXException {
		}

		@Override
		public void serializeBody(mila.generated.impl.runtime.XMLSerializer context)
				throws org.xml.sax.SAXException {
			context.startElement("", "remove");
			super.serializeURIs(context);
			context.endNamespaceDecls();
			super.serializeAttributes(context);
			context.endAttributes();
			super.serializeBody(context);
			context.endElement();
		}

		@Override
		public void serializeURIs(mila.generated.impl.runtime.XMLSerializer context)
				throws org.xml.sax.SAXException {
		}

	}

	public static class ReplaceImpl extends
			mila.generated.impl.AcronymExceptionTypeImpl implements
			mila.generated.AcronymLexiconType.Replace, com.sun.xml.bind.RIElement,
			com.sun.xml.bind.JAXBObject,
			mila.generated.impl.runtime.UnmarshallableObject,
			mila.generated.impl.runtime.XMLSerializable,
			mila.generated.impl.runtime.ValidatableObject {

		public class Unmarshaller extends
				mila.generated.impl.runtime.AbstractUnmarshallingEventHandlerImpl {

			public Unmarshaller(
					mila.generated.impl.runtime.UnmarshallingContext context) {
				super(context, "----");
			}

			protected Unmarshaller(
					mila.generated.impl.runtime.UnmarshallingContext context,
					int startState) {
				this(context);
				state = startState;
			}

			@Override
			public void enterAttribute(java.lang.String ___uri,
					java.lang.String ___local, java.lang.String ___qname)
					throws org.xml.sax.SAXException {
				int attIdx;
				outer: while (true) {
					switch (state) {
					case 1:
						if (("conjunctionType" == ___local) && ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((mila.generated.impl.AcronymExceptionTypeImpl) mila.generated.impl.AcronymLexiconTypeImpl.ReplaceImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						if (("dotted" == ___local) && ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((mila.generated.impl.AcronymExceptionTypeImpl) mila.generated.impl.AcronymLexiconTypeImpl.ReplaceImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						if (("gender" == ___local) && ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((mila.generated.impl.AcronymExceptionTypeImpl) mila.generated.impl.AcronymLexiconTypeImpl.ReplaceImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						if (("number" == ___local) && ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((mila.generated.impl.AcronymExceptionTypeImpl) mila.generated.impl.AcronymLexiconTypeImpl.ReplaceImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						if (("properNameType" == ___local) && ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((mila.generated.impl.AcronymExceptionTypeImpl) mila.generated.impl.AcronymLexiconTypeImpl.ReplaceImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						if (("script" == ___local) && ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((mila.generated.impl.AcronymExceptionTypeImpl) mila.generated.impl.AcronymLexiconTypeImpl.ReplaceImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						if (("transliterated" == ___local) && ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((mila.generated.impl.AcronymExceptionTypeImpl) mila.generated.impl.AcronymLexiconTypeImpl.ReplaceImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						break;
					case 3:
						revertToParentFromEnterAttribute(___uri, ___local,
								___qname);
						return;
					}
					super.enterAttribute(___uri, ___local, ___qname);
					break;
				}
			}

			@Override
			public void enterElement(java.lang.String ___uri,
					java.lang.String ___local, java.lang.String ___qname,
					org.xml.sax.Attributes __atts)
					throws org.xml.sax.SAXException {
				int attIdx;
				outer: while (true) {
					switch (state) {
					case 1:
						attIdx = context.getAttribute("", "conjunctionType");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						attIdx = context.getAttribute("", "dotted");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						attIdx = context.getAttribute("", "gender");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						attIdx = context.getAttribute("", "number");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						attIdx = context.getAttribute("", "properNameType");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						attIdx = context.getAttribute("", "script");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						attIdx = context.getAttribute("", "transliterated");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						break;
					case 3:
						revertToParentFromEnterElement(___uri, ___local,
								___qname, __atts);
						return;
					case 0:
						if (("replace" == ___local) && ("" == ___uri)) {
							context.pushAttributes(__atts, true);
							state = 1;
							return;
						}
						break;
					}
					super.enterElement(___uri, ___local, ___qname, __atts);
					break;
				}
			}

			@Override
			public void handleText(final java.lang.String value)
					throws org.xml.sax.SAXException {
				int attIdx;
				outer: while (true) {
					try {
						switch (state) {
						case 1:
							attIdx = context
									.getAttribute("", "conjunctionType");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							attIdx = context.getAttribute("", "dotted");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							attIdx = context.getAttribute("", "gender");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							attIdx = context.getAttribute("", "number");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							attIdx = context.getAttribute("", "properNameType");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							attIdx = context.getAttribute("", "script");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							attIdx = context.getAttribute("", "transliterated");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							break;
						case 3:
							revertToParentFromText(value);
							return;
						}
					} catch (java.lang.RuntimeException e) {
						handleUnexpectedTextException(value, e);
					}
					break;
				}
			}

			@Override
			public void leaveAttribute(java.lang.String ___uri,
					java.lang.String ___local, java.lang.String ___qname)
					throws org.xml.sax.SAXException {
				int attIdx;
				outer: while (true) {
					switch (state) {
					case 1:
						attIdx = context.getAttribute("", "conjunctionType");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "dotted");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "gender");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "number");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "properNameType");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "script");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "transliterated");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						break;
					case 3:
						revertToParentFromLeaveAttribute(___uri, ___local,
								___qname);
						return;
					}
					super.leaveAttribute(___uri, ___local, ___qname);
					break;
				}
			}

			@Override
			public void leaveElement(java.lang.String ___uri,
					java.lang.String ___local, java.lang.String ___qname)
					throws org.xml.sax.SAXException {
				int attIdx;
				outer: while (true) {
					switch (state) {
					case 1:
						attIdx = context.getAttribute("", "conjunctionType");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "dotted");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "gender");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "number");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "properNameType");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "script");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "transliterated");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						break;
					case 2:
						if (("replace" == ___local) && ("" == ___uri)) {
							context.popAttributes();
							state = 3;
							return;
						}
						break;
					case 3:
						revertToParentFromLeaveElement(___uri, ___local,
								___qname);
						return;
					}
					super.leaveElement(___uri, ___local, ___qname);
					break;
				}
			}

			@Override
			public java.lang.Object owner() {
				return mila.generated.impl.AcronymLexiconTypeImpl.ReplaceImpl.this;
			}

		}

		public final static java.lang.Class<JAXBVersion> version = (mila.generated.impl.JAXBVersion.class);

		private static com.sun.msv.grammar.Grammar schemaFragment;

		private final static java.lang.Class PRIMARY_INTERFACE_CLASS() {
			return (mila.generated.AcronymLexiconType.Replace.class);
		}

		@Override
		public java.lang.String ____jaxb_ri____getLocalName() {
			return "replace";
		}

		@Override
		public java.lang.String ____jaxb_ri____getNamespaceURI() {
			return "";
		}

		@Override
		public com.sun.msv.verifier.DocumentDeclaration createRawValidator() {
			if (schemaFragment == null) {
				schemaFragment = com.sun.xml.bind.validator.SchemaDeserializer
						.deserialize(("\u00ac\u00ed\u0000\u0005sr\u0000\'com.sun.msv.grammar.trex.ElementPattern\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000"
								+ "\tnameClasst\u0000\u001fLcom/sun/msv/grammar/NameClass;xr\u0000\u001ecom.sun.msv."
								+ "grammar.ElementExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002Z\u0000\u001aignoreUndeclaredAttributesL\u0000"
								+ "\fcontentModelt\u0000 Lcom/sun/msv/grammar/Expression;xr\u0000\u001ecom.sun."
								+ "msv.grammar.Expression\u00f8\u0018\u0082\u00e8N5~O\u0002\u0000\u0002L\u0000\u0013epsilonReducibilityt\u0000\u0013Lj"
								+ "ava/lang/Boolean;L\u0000\u000bexpandedExpq\u0000~\u0000\u0003xppp\u0000sr\u0000\u001fcom.sun.msv.gra"
								+ "mmar.SequenceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.sun.msv.grammar.BinaryExp"
								+ "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0004exp1q\u0000~\u0000\u0003L\u0000\u0004exp2q\u0000~\u0000\u0003xq\u0000~\u0000\u0004ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007pps"
								+ "q\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsr\u0000\u001bcom.sun.m"
								+ "sv.grammar.DataExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\u0002dtt\u0000\u001fLorg/relaxng/datatype/D"
								+ "atatype;L\u0000\u0006exceptq\u0000~\u0000\u0003L\u0000\u0004namet\u0000\u001dLcom/sun/msv/util/StringPair"
								+ ";xq\u0000~\u0000\u0004ppsr\u0000\"com.sun.msv.datatype.xsd.TokenType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr"
								+ "\u0000#com.sun.msv.datatype.xsd.StringType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001Z\u0000\risAlwaysV"
								+ "alidxr\u0000*com.sun.msv.datatype.xsd.BuiltinAtomicType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000"
								+ "\u0000xr\u0000%com.sun.msv.datatype.xsd.ConcreteType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\'com"
								+ ".sun.msv.datatype.xsd.XSDatatypeImpl\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\fnamespaceU"
								+ "rit\u0000\u0012Ljava/lang/String;L\u0000\btypeNameq\u0000~\u0000\u001bL\u0000\nwhiteSpacet\u0000.Lcom/"
								+ "sun/msv/datatype/xsd/WhiteSpaceProcessor;xpt\u0000 http://www.w3."
								+ "org/2001/XMLSchemat\u0000\u0005tokensr\u00005com.sun.msv.datatype.xsd.White"
								+ "SpaceProcessor$Collapse\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000,com.sun.msv.datatype.x"
								+ "sd.WhiteSpaceProcessor\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xp\u0001sr\u00000com.sun.msv.grammar."
								+ "Expression$NullSetExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0004ppsr\u0000\u001bcom.sun.m"
								+ "sv.util.StringPair\u00d0t\u001ejB\u008f\u008d\u00a0\u0002\u0000\u0002L\u0000\tlocalNameq\u0000~\u0000\u001bL\u0000\fnamespaceUR"
								+ "Iq\u0000~\u0000\u001bxpq\u0000~\u0000\u001fq\u0000~\u0000\u001esr\u0000\u001dcom.sun.msv.grammar.ChoiceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002"
								+ "\u0000\u0000xq\u0000~\u0000\bppsr\u0000 com.sun.msv.grammar.AttributeExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0003"
								+ "expq\u0000~\u0000\u0003L\u0000\tnameClassq\u0000~\u0000\u0001xq\u0000~\u0000\u0004sr\u0000\u0011java.lang.Boolean\u00cd r\u0080\u00d5\u009c\u00fa\u00ee"
								+ "\u0002\u0000\u0001Z\u0000\u0005valuexp\u0000psq\u0000~\u0000\u0012ppsr\u0000)com.sun.msv.datatype.xsd.Enumerat"
								+ "ionFacet\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\u0006valuest\u0000\u000fLjava/util/Set;xr\u00009com.sun.ms"
								+ "v.datatype.xsd.DataTypeWithValueConstraintFacet\"\u00a7Ro\u00ca\u00c7\u008aT\u0002\u0000\u0000xr"
								+ "\u0000*com.sun.msv.datatype.xsd.DataTypeWithFacet\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0005Z\u0000\fis"
								+ "FacetFixedZ\u0000\u0012needValueCheckFlagL\u0000\bbaseTypet\u0000)Lcom/sun/msv/da"
								+ "tatype/xsd/XSDatatypeImpl;L\u0000\fconcreteTypet\u0000\'Lcom/sun/msv/dat"
								+ "atype/xsd/ConcreteType;L\u0000\tfacetNameq\u0000~\u0000\u001bxq\u0000~\u0000\u001at\u0000\u0000t\u0000\u000fConjunct"
								+ "ionTypeq\u0000~\u0000\"\u0000\u0000q\u0000~\u0000\u001dq\u0000~\u0000\u001dt\u0000\u000benumerationsr\u0000\u0011java.util.HashSet\u00ba"
								+ "D\u0085\u0095\u0096\u00b8\u00b74\u0003\u0000\u0000xpw\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\u0004t\u0000\u000bunspecifiedt\u0000\rsubordinatingt\u0000\fr"
								+ "elativizingt\u0000\fcoordinatingxq\u0000~\u0000$sq\u0000~\u0000%q\u0000~\u00006q\u0000~\u00005sr\u0000#com.sun."
								+ "msv.grammar.SimpleNameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\tlocalNameq\u0000~\u0000\u001bL\u0000\fna"
								+ "mespaceURIq\u0000~\u0000\u001bxr\u0000\u001dcom.sun.msv.grammar.NameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000x"
								+ "pt\u0000\u000fconjunctionTypeq\u0000~\u00005sr\u00000com.sun.msv.grammar.Expression$E"
								+ "psilonExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0004sq\u0000~\u0000+\u0001q\u0000~\u0000Dsq\u0000~\u0000\'ppsq\u0000~\u0000)q"
								+ "\u0000~\u0000,pq\u0000~\u0000\u0015sq\u0000~\u0000?t\u0000\u0006dottedq\u0000~\u00005q\u0000~\u0000Dsq\u0000~\u0000\'ppsq\u0000~\u0000)q\u0000~\u0000,psq\u0000~\u0000"
								+ "\u0012ppsq\u0000~\u0000.q\u0000~\u00005t\u0000\nGenderTypeq\u0000~\u0000\"\u0000\u0000q\u0000~\u0000\u001dq\u0000~\u0000\u001dq\u0000~\u00007sq\u0000~\u00008w\f\u0000\u0000\u0000"
								+ "\u0010?@\u0000\u0000\u0000\u0000\u0000\u0004t\u0000\u000bunspecifiedt\u0000\bfemininet\u0000\u0016masculine and femininet"
								+ "\u0000\tmasculinexq\u0000~\u0000$sq\u0000~\u0000%q\u0000~\u0000Nq\u0000~\u00005sq\u0000~\u0000?t\u0000\u0006genderq\u0000~\u00005q\u0000~\u0000Dsq"
								+ "\u0000~\u0000\'ppsq\u0000~\u0000)q\u0000~\u0000,psq\u0000~\u0000\u0012ppsq\u0000~\u0000.q\u0000~\u00005t\u0000\nNumberTypeq\u0000~\u0000\"\u0000\u0000q\u0000~"
								+ "\u0000\u001dq\u0000~\u0000\u001dq\u0000~\u00007sq\u0000~\u00008w\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\u0006t\u0000\u000bunspecifiedt\u0000\u0013singular an"
								+ "d pluralt\u0000\u0004dualt\u0000\u000fdual and pluralt\u0000\bsingulart\u0000\u0006pluralxq\u0000~\u0000$s"
								+ "q\u0000~\u0000%q\u0000~\u0000[q\u0000~\u00005sq\u0000~\u0000?t\u0000\u0006numberq\u0000~\u00005q\u0000~\u0000Dsq\u0000~\u0000\'ppsq\u0000~\u0000)q\u0000~\u0000,p"
								+ "sq\u0000~\u0000\u0012ppsq\u0000~\u0000.q\u0000~\u00005t\u0000\u000fNamedEntityTypeq\u0000~\u0000\"\u0000\u0000q\u0000~\u0000\u001dq\u0000~\u0000\u001dq\u0000~\u00007s"
								+ "q\u0000~\u00008w\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\u000bt\u0000\u000bunspecifiedt\u0000\u0007productt\u0000\u0005othert\u0000\bdateTi"
								+ "met\u0000\u0007countryt\u0000\u0004coint\u0000\u0006persont\u0000\blocationt\u0000\blanguaget\u0000\u0006symbolt"
								+ "\u0000\forganizationxq\u0000~\u0000$sq\u0000~\u0000%q\u0000~\u0000jq\u0000~\u00005sq\u0000~\u0000?t\u0000\u000eproperNameTypeq"
								+ "\u0000~\u00005q\u0000~\u0000Dsq\u0000~\u0000\'ppsq\u0000~\u0000)q\u0000~\u0000,psq\u0000~\u0000\u0012ppsq\u0000~\u0000.q\u0000~\u00005t\u0000\nScriptTyp"
								+ "eq\u0000~\u0000\"\u0000\u0000q\u0000~\u0000\u001dq\u0000~\u0000\u001dq\u0000~\u00007sq\u0000~\u00008w\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\u0004t\u0000\u0004typot\u0000\u0006formalt"
								+ "\u0000\u0005slangt\u0000\ncolloquialxq\u0000~\u0000$sq\u0000~\u0000%q\u0000~\u0000~q\u0000~\u00005sq\u0000~\u0000?t\u0000\u0006scriptq\u0000~"
								+ "\u00005q\u0000~\u0000Dsq\u0000~\u0000)ppq\u0000~\u0000\u0015sq\u0000~\u0000?t\u0000\u000etransliteratedq\u0000~\u00005sq\u0000~\u0000)ppq\u0000~\u0000"
								+ "\u0015sq\u0000~\u0000?t\u0000\bundottedq\u0000~\u00005sq\u0000~\u0000\'ppsq\u0000~\u0000)q\u0000~\u0000,psq\u0000~\u0000\u0012ppsr\u0000\"com.s"
								+ "un.msv.datatype.xsd.QnameType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0018q\u0000~\u0000\u001et\u0000\u0005QNameq"
								+ "\u0000~\u0000\"q\u0000~\u0000$sq\u0000~\u0000%q\u0000~\u0000\u0092q\u0000~\u0000\u001esq\u0000~\u0000?t\u0000\u0004typet\u0000)http://www.w3.org/2"
								+ "001/XMLSchema-instanceq\u0000~\u0000Dsq\u0000~\u0000?t\u0000\u0007replaceq\u0000~\u00005sr\u0000\"com.sun."
								+ "msv.grammar.ExpressionPool\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\bexpTablet\u0000/Lcom/sun/"
								+ "msv/grammar/ExpressionPool$ClosedHash;xpsr\u0000-com.sun.msv.gram"
								+ "mar.ExpressionPool$ClosedHash\u00d7j\u00d0N\u00ef\u00e8\u00ed\u001c\u0003\u0000\u0003I\u0000\u0005countB\u0000\rstreamVer"
								+ "sionL\u0000\u0006parentt\u0000$Lcom/sun/msv/grammar/ExpressionPool;xp\u0000\u0000\u0000\u0010\u0001p"
								+ "q\u0000~\u0000\u008dq\u0000~\u0000\u000bq\u0000~\u0000\u0010q\u0000~\u0000\nq\u0000~\u0000(q\u0000~\u0000\u000eq\u0000~\u0000Jq\u0000~\u0000zq\u0000~\u0000\tq\u0000~\u0000\u000fq\u0000~\u0000\u0011q\u0000~\u0000\r"
								+ "q\u0000~\u0000Fq\u0000~\u0000Wq\u0000~\u0000fq\u0000~\u0000\fx"));
			}
			return new com.sun.msv.verifier.regexp.REDocumentDeclaration(
					schemaFragment);
		}

		@Override
		public mila.generated.impl.runtime.UnmarshallingEventHandler createUnmarshaller(
				mila.generated.impl.runtime.UnmarshallingContext context) {
			return new mila.generated.impl.AcronymLexiconTypeImpl.ReplaceImpl.Unmarshaller(
					context);
		}

		@Override
		public java.lang.Class getPrimaryInterface() {
			return (mila.generated.AcronymLexiconType.Replace.class);
		}

		@Override
		public void serializeAttributes(
				mila.generated.impl.runtime.XMLSerializer context)
				throws org.xml.sax.SAXException {
		}

		@Override
		public void serializeBody(mila.generated.impl.runtime.XMLSerializer context)
				throws org.xml.sax.SAXException {
			context.startElement("", "replace");
			super.serializeURIs(context);
			context.endNamespaceDecls();
			super.serializeAttributes(context);
			context.endAttributes();
			super.serializeBody(context);
			context.endElement();
		}

		@Override
		public void serializeURIs(mila.generated.impl.runtime.XMLSerializer context)
				throws org.xml.sax.SAXException {
		}

	}

	public class Unmarshaller extends
			mila.generated.impl.runtime.AbstractUnmarshallingEventHandlerImpl {

		public Unmarshaller(mila.generated.impl.runtime.UnmarshallingContext context) {
			super(context, "--------------------------------------------------");
		}

		protected Unmarshaller(
				mila.generated.impl.runtime.UnmarshallingContext context,
				int startState) {
			this(context);
			state = startState;
		}

		private void eatText1(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_Gender = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		private void eatText10(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_GenerateAdjective = javax.xml.bind.DatatypeConverter
						.parseBoolean(com.sun.xml.bind.WhiteSpaceProcessor
								.collapse(value));
				has_GenerateAdjective = true;
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		private void eatText11(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_Number = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		private void eatText12(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_NoInvertedCommas = com.sun.xml.bind.WhiteSpaceProcessor
						.collapse(value);
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		private void eatText13(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_Feminine = com.sun.xml.bind.WhiteSpaceProcessor
						.collapse(value);
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		private void eatText14(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_AdjectiveLexicalLink = com.sun.xml.bind.WhiteSpaceProcessor
						.collapse(value);
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		private void eatText15(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_ProperNameType = com.sun.xml.bind.WhiteSpaceProcessor
						.collapse(value);
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		private void eatText16(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_ConjunctionType = com.sun.xml.bind.WhiteSpaceProcessor
						.collapse(value);
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		private void eatText2(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_InflectConstructS = javax.xml.bind.DatatypeConverter
						.parseBoolean(com.sun.xml.bind.WhiteSpaceProcessor
								.collapse(value));
				has_InflectConstructS = true;
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		private void eatText3(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_Pos = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		private void eatText4(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_IstLexicalLink = com.sun.xml.bind.WhiteSpaceProcessor
						.collapse(value);
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		private void eatText5(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_NiqLexicalLink = com.sun.xml.bind.WhiteSpaceProcessor
						.collapse(value);
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		private void eatText6(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_InflectConstructP = javax.xml.bind.DatatypeConverter
						.parseBoolean(com.sun.xml.bind.WhiteSpaceProcessor
								.collapse(value));
				has_InflectConstructP = true;
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		private void eatText7(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_Meaning = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		private void eatText8(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_Definiteness = com.sun.xml.bind.WhiteSpaceProcessor
						.collapse(value);
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		private void eatText9(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_Plural = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		@Override
		public void enterAttribute(java.lang.String ___uri,
				java.lang.String ___local, java.lang.String ___qname)
				throws org.xml.sax.SAXException {
			int attIdx;
			outer: while (true) {
				switch (state) {
				case 12:
					if (("gender" == ___local) && ("" == ___uri)) {
						state = 13;
						return;
					}
					state = 15;
					continue outer;
				case 21:
					if (("inflectConstructS" == ___local) && ("" == ___uri)) {
						state = 22;
						return;
					}
					state = 24;
					continue outer;
				case 42:
					if (("pos" == ___local) && ("" == ___uri)) {
						state = 43;
						return;
					}
					state = 45;
					continue outer;
				case 49:
					revertToParentFromEnterAttribute(___uri, ___local, ___qname);
					return;
				case 24:
					if (("istLexicalLink" == ___local) && ("" == ___uri)) {
						state = 25;
						return;
					}
					state = 27;
					continue outer;
				case 30:
					if (("niqLexicalLink" == ___local) && ("" == ___uri)) {
						state = 31;
						return;
					}
					state = 33;
					continue outer;
				case 48:
					state = 49;
					continue outer;
				case 18:
					if (("inflectConstructP" == ___local) && ("" == ___uri)) {
						state = 19;
						return;
					}
					state = 21;
					continue outer;
				case 27:
					if (("meaning" == ___local) && ("" == ___uri)) {
						state = 28;
						return;
					}
					state = 30;
					continue outer;
				case 6:
					if (("definiteness" == ___local) && ("" == ___uri)) {
						state = 7;
						return;
					}
					state = 9;
					continue outer;
				case 39:
					if (("plural" == ___local) && ("" == ___uri)) {
						state = 40;
						return;
					}
					state = 42;
					continue outer;
				case 15:
					if (("generateAdjective" == ___local) && ("" == ___uri)) {
						state = 16;
						return;
					}
					state = 18;
					continue outer;
				case 36:
					if (("number" == ___local) && ("" == ___uri)) {
						state = 37;
						return;
					}
					state = 39;
					continue outer;
				case 33:
					if (("noInvertedCommas" == ___local) && ("" == ___uri)) {
						state = 34;
						return;
					}
					state = 36;
					continue outer;
				case 9:
					if (("feminine" == ___local) && ("" == ___uri)) {
						state = 10;
						return;
					}
					state = 12;
					continue outer;
				case 0:
					if (("adjectiveLexicalLink" == ___local) && ("" == ___uri)) {
						state = 1;
						return;
					}
					state = 3;
					continue outer;
				case 45:
					if (("properNameType" == ___local) && ("" == ___uri)) {
						state = 46;
						return;
					}
					state = 48;
					continue outer;
				case 3:
					if (("conjunctionType" == ___local) && ("" == ___uri)) {
						state = 4;
						return;
					}
					state = 6;
					continue outer;
				}
				super.enterAttribute(___uri, ___local, ___qname);
				break;
			}
		}

		@Override
		public void enterElement(java.lang.String ___uri,
				java.lang.String ___local, java.lang.String ___qname,
				org.xml.sax.Attributes __atts) throws org.xml.sax.SAXException {
			int attIdx;
			outer: while (true) {
				switch (state) {
				case 12:
					attIdx = context.getAttribute("", "gender");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 15;
						eatText1(v);
						continue outer;
					}
					state = 15;
					continue outer;
				case 21:
					attIdx = context.getAttribute("", "inflectConstructS");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 24;
						eatText2(v);
						continue outer;
					}
					state = 24;
					continue outer;
				case 42:
					attIdx = context.getAttribute("", "pos");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 45;
						eatText3(v);
						continue outer;
					}
					state = 45;
					continue outer;
				case 49:
					if (("add" == ___local) && ("" == ___uri)) {
						_getAddOrReplaceOrRemove()
								.add(spawnChildFromEnterElement(
										(mila.generated.impl.AcronymLexiconTypeImpl.AddImpl.class),
										49, ___uri, ___local, ___qname, __atts));
						return;
					}
					if (("replace" == ___local) && ("" == ___uri)) {
						_getAddOrReplaceOrRemove()
								.add(spawnChildFromEnterElement(
										(mila.generated.impl.AcronymLexiconTypeImpl.ReplaceImpl.class),
										49, ___uri, ___local, ___qname, __atts));
						return;
					}
					if (("remove" == ___local) && ("" == ___uri)) {
						_getAddOrReplaceOrRemove()
								.add(spawnChildFromEnterElement(
										(mila.generated.impl.AcronymLexiconTypeImpl.RemoveImpl.class),
										49, ___uri, ___local, ___qname, __atts));
						return;
					}
					revertToParentFromEnterElement(___uri, ___local, ___qname,
							__atts);
					return;
				case 24:
					attIdx = context.getAttribute("", "istLexicalLink");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 27;
						eatText4(v);
						continue outer;
					}
					state = 27;
					continue outer;
				case 30:
					attIdx = context.getAttribute("", "niqLexicalLink");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 33;
						eatText5(v);
						continue outer;
					}
					state = 33;
					continue outer;
				case 48:
					if (("add" == ___local) && ("" == ___uri)) {
						_getAddOrReplaceOrRemove()
								.add(spawnChildFromEnterElement(
										(mila.generated.impl.AcronymLexiconTypeImpl.AddImpl.class),
										49, ___uri, ___local, ___qname, __atts));
						return;
					}
					if (("replace" == ___local) && ("" == ___uri)) {
						_getAddOrReplaceOrRemove()
								.add(spawnChildFromEnterElement(
										(mila.generated.impl.AcronymLexiconTypeImpl.ReplaceImpl.class),
										49, ___uri, ___local, ___qname, __atts));
						return;
					}
					if (("remove" == ___local) && ("" == ___uri)) {
						_getAddOrReplaceOrRemove()
								.add(spawnChildFromEnterElement(
										(mila.generated.impl.AcronymLexiconTypeImpl.RemoveImpl.class),
										49, ___uri, ___local, ___qname, __atts));
						return;
					}
					state = 49;
					continue outer;
				case 18:
					attIdx = context.getAttribute("", "inflectConstructP");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 21;
						eatText6(v);
						continue outer;
					}
					state = 21;
					continue outer;
				case 27:
					attIdx = context.getAttribute("", "meaning");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 30;
						eatText7(v);
						continue outer;
					}
					state = 30;
					continue outer;
				case 6:
					attIdx = context.getAttribute("", "definiteness");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 9;
						eatText8(v);
						continue outer;
					}
					state = 9;
					continue outer;
				case 39:
					attIdx = context.getAttribute("", "plural");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 42;
						eatText9(v);
						continue outer;
					}
					state = 42;
					continue outer;
				case 15:
					attIdx = context.getAttribute("", "generateAdjective");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 18;
						eatText10(v);
						continue outer;
					}
					state = 18;
					continue outer;
				case 36:
					attIdx = context.getAttribute("", "number");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 39;
						eatText11(v);
						continue outer;
					}
					state = 39;
					continue outer;
				case 33:
					attIdx = context.getAttribute("", "noInvertedCommas");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 36;
						eatText12(v);
						continue outer;
					}
					state = 36;
					continue outer;
				case 9:
					attIdx = context.getAttribute("", "feminine");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 12;
						eatText13(v);
						continue outer;
					}
					state = 12;
					continue outer;
				case 0:
					attIdx = context.getAttribute("", "adjectiveLexicalLink");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 3;
						eatText14(v);
						continue outer;
					}
					state = 3;
					continue outer;
				case 45:
					attIdx = context.getAttribute("", "properNameType");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 48;
						eatText15(v);
						continue outer;
					}
					state = 48;
					continue outer;
				case 3:
					attIdx = context.getAttribute("", "conjunctionType");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 6;
						eatText16(v);
						continue outer;
					}
					state = 6;
					continue outer;
				}
				super.enterElement(___uri, ___local, ___qname, __atts);
				break;
			}
		}

		@Override
		public void handleText(final java.lang.String value)
				throws org.xml.sax.SAXException {
			int attIdx;
			outer: while (true) {
				try {
					switch (state) {
					case 4:
						state = 5;
						eatText16(value);
						return;
					case 12:
						attIdx = context.getAttribute("", "gender");
						if (attIdx >= 0) {
							final java.lang.String v = context
									.eatAttribute(attIdx);
							state = 15;
							eatText1(v);
							continue outer;
						}
						state = 15;
						continue outer;
					case 21:
						attIdx = context.getAttribute("", "inflectConstructS");
						if (attIdx >= 0) {
							final java.lang.String v = context
									.eatAttribute(attIdx);
							state = 24;
							eatText2(v);
							continue outer;
						}
						state = 24;
						continue outer;
					case 42:
						attIdx = context.getAttribute("", "pos");
						if (attIdx >= 0) {
							final java.lang.String v = context
									.eatAttribute(attIdx);
							state = 45;
							eatText3(v);
							continue outer;
						}
						state = 45;
						continue outer;
					case 49:
						revertToParentFromText(value);
						return;
					case 40:
						state = 41;
						eatText9(value);
						return;
					case 24:
						attIdx = context.getAttribute("", "istLexicalLink");
						if (attIdx >= 0) {
							final java.lang.String v = context
									.eatAttribute(attIdx);
							state = 27;
							eatText4(v);
							continue outer;
						}
						state = 27;
						continue outer;
					case 22:
						state = 23;
						eatText2(value);
						return;
					case 30:
						attIdx = context.getAttribute("", "niqLexicalLink");
						if (attIdx >= 0) {
							final java.lang.String v = context
									.eatAttribute(attIdx);
							state = 33;
							eatText5(v);
							continue outer;
						}
						state = 33;
						continue outer;
					case 46:
						state = 47;
						eatText15(value);
						return;
					case 48:
						state = 49;
						continue outer;
					case 18:
						attIdx = context.getAttribute("", "inflectConstructP");
						if (attIdx >= 0) {
							final java.lang.String v = context
									.eatAttribute(attIdx);
							state = 21;
							eatText6(v);
							continue outer;
						}
						state = 21;
						continue outer;
					case 27:
						attIdx = context.getAttribute("", "meaning");
						if (attIdx >= 0) {
							final java.lang.String v = context
									.eatAttribute(attIdx);
							state = 30;
							eatText7(v);
							continue outer;
						}
						state = 30;
						continue outer;
					case 6:
						attIdx = context.getAttribute("", "definiteness");
						if (attIdx >= 0) {
							final java.lang.String v = context
									.eatAttribute(attIdx);
							state = 9;
							eatText8(v);
							continue outer;
						}
						state = 9;
						continue outer;
					case 43:
						state = 44;
						eatText3(value);
						return;
					case 25:
						state = 26;
						eatText4(value);
						return;
					case 39:
						attIdx = context.getAttribute("", "plural");
						if (attIdx >= 0) {
							final java.lang.String v = context
									.eatAttribute(attIdx);
							state = 42;
							eatText9(v);
							continue outer;
						}
						state = 42;
						continue outer;
					case 15:
						attIdx = context.getAttribute("", "generateAdjective");
						if (attIdx >= 0) {
							final java.lang.String v = context
									.eatAttribute(attIdx);
							state = 18;
							eatText10(v);
							continue outer;
						}
						state = 18;
						continue outer;
					case 16:
						state = 17;
						eatText10(value);
						return;
					case 36:
						attIdx = context.getAttribute("", "number");
						if (attIdx >= 0) {
							final java.lang.String v = context
									.eatAttribute(attIdx);
							state = 39;
							eatText11(v);
							continue outer;
						}
						state = 39;
						continue outer;
					case 13:
						state = 14;
						eatText1(value);
						return;
					case 34:
						state = 35;
						eatText12(value);
						return;
					case 1:
						state = 2;
						eatText14(value);
						return;
					case 33:
						attIdx = context.getAttribute("", "noInvertedCommas");
						if (attIdx >= 0) {
							final java.lang.String v = context
									.eatAttribute(attIdx);
							state = 36;
							eatText12(v);
							continue outer;
						}
						state = 36;
						continue outer;
					case 9:
						attIdx = context.getAttribute("", "feminine");
						if (attIdx >= 0) {
							final java.lang.String v = context
									.eatAttribute(attIdx);
							state = 12;
							eatText13(v);
							continue outer;
						}
						state = 12;
						continue outer;
					case 19:
						state = 20;
						eatText6(value);
						return;
					case 31:
						state = 32;
						eatText5(value);
						return;
					case 0:
						attIdx = context.getAttribute("",
								"adjectiveLexicalLink");
						if (attIdx >= 0) {
							final java.lang.String v = context
									.eatAttribute(attIdx);
							state = 3;
							eatText14(v);
							continue outer;
						}
						state = 3;
						continue outer;
					case 28:
						state = 29;
						eatText7(value);
						return;
					case 10:
						state = 11;
						eatText13(value);
						return;
					case 7:
						state = 8;
						eatText8(value);
						return;
					case 45:
						attIdx = context.getAttribute("", "properNameType");
						if (attIdx >= 0) {
							final java.lang.String v = context
									.eatAttribute(attIdx);
							state = 48;
							eatText15(v);
							continue outer;
						}
						state = 48;
						continue outer;
					case 37:
						state = 38;
						eatText11(value);
						return;
					case 3:
						attIdx = context.getAttribute("", "conjunctionType");
						if (attIdx >= 0) {
							final java.lang.String v = context
									.eatAttribute(attIdx);
							state = 6;
							eatText16(v);
							continue outer;
						}
						state = 6;
						continue outer;
					}
				} catch (java.lang.RuntimeException e) {
					handleUnexpectedTextException(value, e);
				}
				break;
			}
		}

		@Override
		public void leaveAttribute(java.lang.String ___uri,
				java.lang.String ___local, java.lang.String ___qname)
				throws org.xml.sax.SAXException {
			int attIdx;
			outer: while (true) {
				switch (state) {
				case 11:
					if (("feminine" == ___local) && ("" == ___uri)) {
						state = 12;
						return;
					}
					break;
				case 12:
					attIdx = context.getAttribute("", "gender");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 15;
						eatText1(v);
						continue outer;
					}
					state = 15;
					continue outer;
				case 21:
					attIdx = context.getAttribute("", "inflectConstructS");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 24;
						eatText2(v);
						continue outer;
					}
					state = 24;
					continue outer;
				case 42:
					attIdx = context.getAttribute("", "pos");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 45;
						eatText3(v);
						continue outer;
					}
					state = 45;
					continue outer;
				case 44:
					if (("pos" == ___local) && ("" == ___uri)) {
						state = 45;
						return;
					}
					break;
				case 49:
					revertToParentFromLeaveAttribute(___uri, ___local, ___qname);
					return;
				case 29:
					if (("meaning" == ___local) && ("" == ___uri)) {
						state = 30;
						return;
					}
					break;
				case 24:
					attIdx = context.getAttribute("", "istLexicalLink");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 27;
						eatText4(v);
						continue outer;
					}
					state = 27;
					continue outer;
				case 14:
					if (("gender" == ___local) && ("" == ___uri)) {
						state = 15;
						return;
					}
					break;
				case 26:
					if (("istLexicalLink" == ___local) && ("" == ___uri)) {
						state = 27;
						return;
					}
					break;
				case 30:
					attIdx = context.getAttribute("", "niqLexicalLink");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 33;
						eatText5(v);
						continue outer;
					}
					state = 33;
					continue outer;
				case 2:
					if (("adjectiveLexicalLink" == ___local) && ("" == ___uri)) {
						state = 3;
						return;
					}
					break;
				case 48:
					state = 49;
					continue outer;
				case 18:
					attIdx = context.getAttribute("", "inflectConstructP");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 21;
						eatText6(v);
						continue outer;
					}
					state = 21;
					continue outer;
				case 41:
					if (("plural" == ___local) && ("" == ___uri)) {
						state = 42;
						return;
					}
					break;
				case 27:
					attIdx = context.getAttribute("", "meaning");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 30;
						eatText7(v);
						continue outer;
					}
					state = 30;
					continue outer;
				case 6:
					attIdx = context.getAttribute("", "definiteness");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 9;
						eatText8(v);
						continue outer;
					}
					state = 9;
					continue outer;
				case 39:
					attIdx = context.getAttribute("", "plural");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 42;
						eatText9(v);
						continue outer;
					}
					state = 42;
					continue outer;
				case 5:
					if (("conjunctionType" == ___local) && ("" == ___uri)) {
						state = 6;
						return;
					}
					break;
				case 38:
					if (("number" == ___local) && ("" == ___uri)) {
						state = 39;
						return;
					}
					break;
				case 8:
					if (("definiteness" == ___local) && ("" == ___uri)) {
						state = 9;
						return;
					}
					break;
				case 15:
					attIdx = context.getAttribute("", "generateAdjective");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 18;
						eatText10(v);
						continue outer;
					}
					state = 18;
					continue outer;
				case 36:
					attIdx = context.getAttribute("", "number");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 39;
						eatText11(v);
						continue outer;
					}
					state = 39;
					continue outer;
				case 33:
					attIdx = context.getAttribute("", "noInvertedCommas");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 36;
						eatText12(v);
						continue outer;
					}
					state = 36;
					continue outer;
				case 9:
					attIdx = context.getAttribute("", "feminine");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 12;
						eatText13(v);
						continue outer;
					}
					state = 12;
					continue outer;
				case 35:
					if (("noInvertedCommas" == ___local) && ("" == ___uri)) {
						state = 36;
						return;
					}
					break;
				case 0:
					attIdx = context.getAttribute("", "adjectiveLexicalLink");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 3;
						eatText14(v);
						continue outer;
					}
					state = 3;
					continue outer;
				case 20:
					if (("inflectConstructP" == ___local) && ("" == ___uri)) {
						state = 21;
						return;
					}
					break;
				case 45:
					attIdx = context.getAttribute("", "properNameType");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 48;
						eatText15(v);
						continue outer;
					}
					state = 48;
					continue outer;
				case 47:
					if (("properNameType" == ___local) && ("" == ___uri)) {
						state = 48;
						return;
					}
					break;
				case 17:
					if (("generateAdjective" == ___local) && ("" == ___uri)) {
						state = 18;
						return;
					}
					break;
				case 32:
					if (("niqLexicalLink" == ___local) && ("" == ___uri)) {
						state = 33;
						return;
					}
					break;
				case 3:
					attIdx = context.getAttribute("", "conjunctionType");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 6;
						eatText16(v);
						continue outer;
					}
					state = 6;
					continue outer;
				case 23:
					if (("inflectConstructS" == ___local) && ("" == ___uri)) {
						state = 24;
						return;
					}
					break;
				}
				super.leaveAttribute(___uri, ___local, ___qname);
				break;
			}
		}

		@Override
		public void leaveElement(java.lang.String ___uri,
				java.lang.String ___local, java.lang.String ___qname)
				throws org.xml.sax.SAXException {
			int attIdx;
			outer: while (true) {
				switch (state) {
				case 12:
					attIdx = context.getAttribute("", "gender");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 15;
						eatText1(v);
						continue outer;
					}
					state = 15;
					continue outer;
				case 21:
					attIdx = context.getAttribute("", "inflectConstructS");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 24;
						eatText2(v);
						continue outer;
					}
					state = 24;
					continue outer;
				case 42:
					attIdx = context.getAttribute("", "pos");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 45;
						eatText3(v);
						continue outer;
					}
					state = 45;
					continue outer;
				case 49:
					revertToParentFromLeaveElement(___uri, ___local, ___qname);
					return;
				case 24:
					attIdx = context.getAttribute("", "istLexicalLink");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 27;
						eatText4(v);
						continue outer;
					}
					state = 27;
					continue outer;
				case 30:
					attIdx = context.getAttribute("", "niqLexicalLink");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 33;
						eatText5(v);
						continue outer;
					}
					state = 33;
					continue outer;
				case 48:
					state = 49;
					continue outer;
				case 18:
					attIdx = context.getAttribute("", "inflectConstructP");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 21;
						eatText6(v);
						continue outer;
					}
					state = 21;
					continue outer;
				case 27:
					attIdx = context.getAttribute("", "meaning");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 30;
						eatText7(v);
						continue outer;
					}
					state = 30;
					continue outer;
				case 6:
					attIdx = context.getAttribute("", "definiteness");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 9;
						eatText8(v);
						continue outer;
					}
					state = 9;
					continue outer;
				case 39:
					attIdx = context.getAttribute("", "plural");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 42;
						eatText9(v);
						continue outer;
					}
					state = 42;
					continue outer;
				case 15:
					attIdx = context.getAttribute("", "generateAdjective");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 18;
						eatText10(v);
						continue outer;
					}
					state = 18;
					continue outer;
				case 36:
					attIdx = context.getAttribute("", "number");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 39;
						eatText11(v);
						continue outer;
					}
					state = 39;
					continue outer;
				case 33:
					attIdx = context.getAttribute("", "noInvertedCommas");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 36;
						eatText12(v);
						continue outer;
					}
					state = 36;
					continue outer;
				case 9:
					attIdx = context.getAttribute("", "feminine");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 12;
						eatText13(v);
						continue outer;
					}
					state = 12;
					continue outer;
				case 0:
					attIdx = context.getAttribute("", "adjectiveLexicalLink");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 3;
						eatText14(v);
						continue outer;
					}
					state = 3;
					continue outer;
				case 45:
					attIdx = context.getAttribute("", "properNameType");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 48;
						eatText15(v);
						continue outer;
					}
					state = 48;
					continue outer;
				case 3:
					attIdx = context.getAttribute("", "conjunctionType");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 6;
						eatText16(v);
						continue outer;
					}
					state = 6;
					continue outer;
				}
				super.leaveElement(___uri, ___local, ___qname);
				break;
			}
		}

		@Override
		public java.lang.Object owner() {
			return mila.generated.impl.AcronymLexiconTypeImpl.this;
		}

	}

	protected java.lang.String _Feminine;
	protected java.lang.String _ProperNameType;
	protected java.lang.String _Gender;
	protected java.lang.String _Pos;
	protected java.lang.String _Plural;
	protected java.lang.String _NoInvertedCommas;
	protected java.lang.String _Definiteness;
	protected java.lang.String _IstLexicalLink;
	protected boolean has_GenerateAdjective;
	protected boolean _GenerateAdjective;
	protected java.lang.String _NiqLexicalLink;
	protected boolean has_InflectConstructS;
	protected boolean _InflectConstructS;
	protected java.lang.String _Meaning;
	protected java.lang.String _Number;
	protected java.lang.String _ConjunctionType;
	protected com.sun.xml.bind.util.ListImpl _AddOrReplaceOrRemove;
	protected boolean has_InflectConstructP;

	protected boolean _InflectConstructP;

	protected java.lang.String _AdjectiveLexicalLink;

	public final static java.lang.Class<JAXBVersion> version = (mila.generated.impl.JAXBVersion.class);

	private static com.sun.msv.grammar.Grammar schemaFragment;

	private final static java.lang.Class PRIMARY_INTERFACE_CLASS() {
		return (mila.generated.AcronymLexiconType.class);
	}

	protected com.sun.xml.bind.util.ListImpl _getAddOrReplaceOrRemove() {
		if (_AddOrReplaceOrRemove == null) {
			_AddOrReplaceOrRemove = new com.sun.xml.bind.util.ListImpl(
					new java.util.ArrayList());
		}
		return _AddOrReplaceOrRemove;
	}

	@Override
	public com.sun.msv.verifier.DocumentDeclaration createRawValidator() {
		if (schemaFragment == null) {
			schemaFragment = com.sun.xml.bind.validator.SchemaDeserializer
					.deserialize(("\u00ac\u00ed\u0000\u0005sr\u0000\u001fcom.sun.msv.grammar.SequenceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.su"
							+ "n.msv.grammar.BinaryExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0004exp1t\u0000 Lcom/sun/msv/gra"
							+ "mmar/Expression;L\u0000\u0004exp2q\u0000~\u0000\u0002xr\u0000\u001ecom.sun.msv.grammar.Expressi"
							+ "on\u00f8\u0018\u0082\u00e8N5~O\u0002\u0000\u0002L\u0000\u0013epsilonReducibilityt\u0000\u0013Ljava/lang/Boolean;L\u0000\u000b"
							+ "expandedExpq\u0000~\u0000\u0002xpppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000pp"
							+ "sq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~"
							+ "\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsr\u0000 com.sun.msv.grammar.OneOrMoreExp\u0000\u0000\u0000\u0000"
							+ "\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001ccom.sun.msv.grammar.UnaryExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\u0003expq\u0000~\u0000"
							+ "\u0002xq\u0000~\u0000\u0003ppsr\u0000\u001dcom.sun.msv.grammar.ChoiceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0001p"
							+ "psq\u0000~\u0000\u0018ppsq\u0000~\u0000\u0018ppsq\u0000~\u0000\u0015sr\u0000\u0011java.lang.Boolean\u00cd r\u0080\u00d5\u009c\u00fa\u00ee\u0002\u0000\u0001Z\u0000\u0005va"
							+ "luexp\u0000psr\u0000\'com.sun.msv.grammar.trex.ElementPattern\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000"
							+ "\u0001L\u0000\tnameClasst\u0000\u001fLcom/sun/msv/grammar/NameClass;xr\u0000\u001ecom.sun.m"
							+ "sv.grammar.ElementExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002Z\u0000\u001aignoreUndeclaredAttribute"
							+ "sL\u0000\fcontentModelq\u0000~\u0000\u0002xq\u0000~\u0000\u0003q\u0000~\u0000\u001ep\u0000sq\u0000~\u0000\u0018ppsq\u0000~\u0000\u0015q\u0000~\u0000\u001epsr\u0000 co"
							+ "m.sun.msv.grammar.AttributeExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0003expq\u0000~\u0000\u0002L\u0000\tnameC"
							+ "lassq\u0000~\u0000 xq\u0000~\u0000\u0003q\u0000~\u0000\u001epsr\u00002com.sun.msv.grammar.Expression$AnyS"
							+ "tringExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003sq\u0000~\u0000\u001d\u0001q\u0000~\u0000(sr\u0000 com.sun.msv."
							+ "grammar.AnyNameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.sun.msv.grammar.NameC"
							+ "lass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xpsr\u00000com.sun.msv.grammar.Expression$EpsilonE"
							+ "xpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003q\u0000~\u0000)q\u0000~\u0000.sr\u0000#com.sun.msv.grammar."
							+ "SimpleNameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\tlocalNamet\u0000\u0012Ljava/lang/String;L"
							+ "\u0000\fnamespaceURIq\u0000~\u00000xq\u0000~\u0000+t\u0000 generated.AcronymLexiconType.Add"
							+ "t\u0000+http://java.sun.com/jaxb/xjc/dummy-elementsq\u0000~\u0000.sq\u0000~\u0000\u0015pps"
							+ "q\u0000~\u0000\u001fpp\u0000sq\u0000~\u0000\u0018ppsq\u0000~\u0000\u0015q\u0000~\u0000\u001epsq\u0000~\u0000%q\u0000~\u0000\u001epq\u0000~\u0000(q\u0000~\u0000,q\u0000~\u0000.sq\u0000~\u0000"
							+ "/t\u0000$generated.AcronymLexiconType.Replaceq\u0000~\u00003sq\u0000~\u0000\u0015ppsq\u0000~\u0000\u001fp"
							+ "p\u0000sq\u0000~\u0000\u0018ppsq\u0000~\u0000\u0015q\u0000~\u0000\u001epsq\u0000~\u0000%q\u0000~\u0000\u001epq\u0000~\u0000(q\u0000~\u0000,q\u0000~\u0000.sq\u0000~\u0000/t\u0000#ge"
							+ "nerated.AcronymLexiconType.Removeq\u0000~\u00003sq\u0000~\u0000\u0018ppsq\u0000~\u0000%q\u0000~\u0000\u001epsr"
							+ "\u0000\u001bcom.sun.msv.grammar.DataExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\u0002dtt\u0000\u001fLorg/relaxng"
							+ "/datatype/Datatype;L\u0000\u0006exceptq\u0000~\u0000\u0002L\u0000\u0004namet\u0000\u001dLcom/sun/msv/util"
							+ "/StringPair;xq\u0000~\u0000\u0003ppsr\u0000\"com.sun.msv.datatype.xsd.TokenType\u0000\u0000"
							+ "\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000#com.sun.msv.datatype.xsd.StringType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001Z"
							+ "\u0000\risAlwaysValidxr\u0000*com.sun.msv.datatype.xsd.BuiltinAtomicTyp"
							+ "e\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000%com.sun.msv.datatype.xsd.ConcreteType\u0000\u0000\u0000\u0000\u0000\u0000\u0000"
							+ "\u0001\u0002\u0000\u0000xr\u0000\'com.sun.msv.datatype.xsd.XSDatatypeImpl\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000"
							+ "\fnamespaceUriq\u0000~\u00000L\u0000\btypeNameq\u0000~\u00000L\u0000\nwhiteSpacet\u0000.Lcom/sun/m"
							+ "sv/datatype/xsd/WhiteSpaceProcessor;xpt\u0000 http://www.w3.org/2"
							+ "001/XMLSchemat\u0000\u0005tokensr\u00005com.sun.msv.datatype.xsd.WhiteSpace"
							+ "Processor$Collapse\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000,com.sun.msv.datatype.xsd.Wh"
							+ "iteSpaceProcessor\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xp\u0001sr\u00000com.sun.msv.grammar.Expre"
							+ "ssion$NullSetExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003ppsr\u0000\u001bcom.sun.msv.ut"
							+ "il.StringPair\u00d0t\u001ejB\u008f\u008d\u00a0\u0002\u0000\u0002L\u0000\tlocalNameq\u0000~\u00000L\u0000\fnamespaceURIq\u0000~\u0000"
							+ "0xpq\u0000~\u0000Pq\u0000~\u0000Osq\u0000~\u0000/t\u0000\u0014adjectiveLexicalLinkt\u0000\u0000q\u0000~\u0000.sq\u0000~\u0000\u0018ppsq"
							+ "\u0000~\u0000%q\u0000~\u0000\u001epsq\u0000~\u0000Dppsr\u0000)com.sun.msv.datatype.xsd.EnumerationFa"
							+ "cet\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\u0006valuest\u0000\u000fLjava/util/Set;xr\u00009com.sun.msv.dat"
							+ "atype.xsd.DataTypeWithValueConstraintFacet\"\u00a7Ro\u00ca\u00c7\u008aT\u0002\u0000\u0000xr\u0000*com"
							+ ".sun.msv.datatype.xsd.DataTypeWithFacet\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0005Z\u0000\fisFacet"
							+ "FixedZ\u0000\u0012needValueCheckFlagL\u0000\bbaseTypet\u0000)Lcom/sun/msv/datatyp"
							+ "e/xsd/XSDatatypeImpl;L\u0000\fconcreteTypet\u0000\'Lcom/sun/msv/datatype"
							+ "/xsd/ConcreteType;L\u0000\tfacetNameq\u0000~\u00000xq\u0000~\u0000Lq\u0000~\u0000Zt\u0000\u000fConjunction"
							+ "Typeq\u0000~\u0000S\u0000\u0000q\u0000~\u0000Nq\u0000~\u0000Nt\u0000\u000benumerationsr\u0000\u0011java.util.HashSet\u00baD\u0085\u0095"
							+ "\u0096\u00b8\u00b74\u0003\u0000\u0000xpw\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\u0004t\u0000\u000bunspecifiedt\u0000\rsubordinatingt\u0000\frela"
							+ "tivizingt\u0000\fcoordinatingxq\u0000~\u0000Usq\u0000~\u0000Vq\u0000~\u0000eq\u0000~\u0000Zsq\u0000~\u0000/t\u0000\u000fconjun"
							+ "ctionTypeq\u0000~\u0000Zq\u0000~\u0000.sq\u0000~\u0000\u0018ppsq\u0000~\u0000%q\u0000~\u0000\u001epsq\u0000~\u0000Dppsq\u0000~\u0000^q\u0000~\u0000Zt\u0000"
							+ "\u0017AcronymDefinitenessTypeq\u0000~\u0000S\u0000\u0000q\u0000~\u0000Nq\u0000~\u0000Nq\u0000~\u0000fsq\u0000~\u0000gw\f\u0000\u0000\u0000\u0010?@"
							+ "\u0000\u0000\u0000\u0000\u0000\u0005t\u0000\u0004nonet\u0000\u0015internal and externalt\u0000\u0013externallyDefinitedt"
							+ "\u0000\bexternalt\u0000\binternalxq\u0000~\u0000Usq\u0000~\u0000Vq\u0000~\u0000tq\u0000~\u0000Zsq\u0000~\u0000/t\u0000\fdefinite"
							+ "nessq\u0000~\u0000Zq\u0000~\u0000.sq\u0000~\u0000\u0018ppsq\u0000~\u0000%q\u0000~\u0000\u001epsq\u0000~\u0000Dppsq\u0000~\u0000^q\u0000~\u0000Zt\u0000\fFemi"
							+ "nineTypeq\u0000~\u0000S\u0000\u0000q\u0000~\u0000Nq\u0000~\u0000Nq\u0000~\u0000fsq\u0000~\u0000gw\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\u0004t\u0000\u000bunspeci"
							+ "fiedt\u0000\u0002itt\u0000\u0001ht\u0000\u0001txq\u0000~\u0000Usq\u0000~\u0000Vq\u0000~\u0000\u0082q\u0000~\u0000Zsq\u0000~\u0000/t\u0000\bfeminineq\u0000~\u0000"
							+ "Zq\u0000~\u0000.sq\u0000~\u0000\u0018ppsq\u0000~\u0000%q\u0000~\u0000\u001epsq\u0000~\u0000Dppsq\u0000~\u0000^q\u0000~\u0000Zt\u0000\nGenderTypeq\u0000"
							+ "~\u0000S\u0000\u0000q\u0000~\u0000Nq\u0000~\u0000Nq\u0000~\u0000fsq\u0000~\u0000gw\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\u0004t\u0000\u000bunspecifiedt\u0000\bfem"
							+ "ininet\u0000\u0016masculine and femininet\u0000\tmasculinexq\u0000~\u0000Usq\u0000~\u0000Vq\u0000~\u0000\u008fq"
							+ "\u0000~\u0000Zsq\u0000~\u0000/t\u0000\u0006genderq\u0000~\u0000Zq\u0000~\u0000.sq\u0000~\u0000\u0018ppsq\u0000~\u0000%q\u0000~\u0000\u001epsq\u0000~\u0000Dppsr\u0000"
							+ "$com.sun.msv.datatype.xsd.BooleanType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000Jq\u0000~\u0000Ot"
							+ "\u0000\u0007booleanq\u0000~\u0000Sq\u0000~\u0000Usq\u0000~\u0000Vq\u0000~\u0000\u009dq\u0000~\u0000Osq\u0000~\u0000/t\u0000\u0011generateAdjectiv"
							+ "eq\u0000~\u0000Zq\u0000~\u0000.sq\u0000~\u0000\u0018ppsq\u0000~\u0000%q\u0000~\u0000\u001epq\u0000~\u0000\u009asq\u0000~\u0000/t\u0000\u0011inflectConstruc"
							+ "tPq\u0000~\u0000Zq\u0000~\u0000.sq\u0000~\u0000\u0018ppsq\u0000~\u0000%q\u0000~\u0000\u001epq\u0000~\u0000\u009asq\u0000~\u0000/t\u0000\u0011inflectConstru"
							+ "ctSq\u0000~\u0000Zq\u0000~\u0000.sq\u0000~\u0000\u0018ppsq\u0000~\u0000%q\u0000~\u0000\u001epq\u0000~\u0000Gsq\u0000~\u0000/t\u0000\u000eistLexicalLin"
							+ "kq\u0000~\u0000Zq\u0000~\u0000.sq\u0000~\u0000\u0018ppsq\u0000~\u0000%q\u0000~\u0000\u001epq\u0000~\u0000Gsq\u0000~\u0000/t\u0000\u0007meaningq\u0000~\u0000Zq\u0000~"
							+ "\u0000.sq\u0000~\u0000\u0018ppsq\u0000~\u0000%q\u0000~\u0000\u001epq\u0000~\u0000Gsq\u0000~\u0000/t\u0000\u000eniqLexicalLinkq\u0000~\u0000Zq\u0000~\u0000."
							+ "sq\u0000~\u0000\u0018ppsq\u0000~\u0000%q\u0000~\u0000\u001epsq\u0000~\u0000Dppsq\u0000~\u0000^q\u0000~\u0000Zt\u0000\u0014noInvertedCommasTy"
							+ "peq\u0000~\u0000S\u0000\u0000q\u0000~\u0000Nq\u0000~\u0000Nq\u0000~\u0000fsq\u0000~\u0000gw\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\bt\u0000\u000ball plurallt\u0000"
							+ "\u0004nonet\u0000\u0012masculine singulart\u0000\fall singulart\u0000\u0011feminine singula"
							+ "rt\u0000\u0003allt\u0000\u000ffeminine pluralt\u0000\u0010masculine pluralxq\u0000~\u0000Usq\u0000~\u0000Vq\u0000~\u0000"
							+ "\u00b9q\u0000~\u0000Zsq\u0000~\u0000/t\u0000\u0010noInvertedCommasq\u0000~\u0000Zq\u0000~\u0000.sq\u0000~\u0000\u0018ppsq\u0000~\u0000%q\u0000~\u0000\u001e"
							+ "psq\u0000~\u0000Dppsq\u0000~\u0000^q\u0000~\u0000Zt\u0000\nNumberTypeq\u0000~\u0000S\u0000\u0000q\u0000~\u0000Nq\u0000~\u0000Nq\u0000~\u0000fsq\u0000~\u0000"
							+ "gw\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\u0006t\u0000\u000bunspecifiedt\u0000\u0013singular and pluralt\u0000\u0004dualt\u0000"
							+ "\u000fdual and pluralt\u0000\bsingulart\u0000\u0006pluralxq\u0000~\u0000Usq\u0000~\u0000Vq\u0000~\u0000\u00caq\u0000~\u0000Zsq"
							+ "\u0000~\u0000/t\u0000\u0006numberq\u0000~\u0000Zq\u0000~\u0000.sq\u0000~\u0000\u0018ppsq\u0000~\u0000%q\u0000~\u0000\u001epsq\u0000~\u0000Dppsq\u0000~\u0000^q\u0000~"
							+ "\u0000Zt\u0000\nPluralTypeq\u0000~\u0000S\u0000\u0000q\u0000~\u0000Nq\u0000~\u0000Nq\u0000~\u0000fsq\u0000~\u0000gw\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\bt\u0000\u000b"
							+ "unspecifiedt\u0000\u0003awtt\u0000\u0002wtt\u0000\u0002imt\u0000\u0003iimt\u0000\u0001mt\u0000\tim and wtt\u0000\u0003iwtxq\u0000~\u0000"
							+ "Usq\u0000~\u0000Vq\u0000~\u0000\u00d9q\u0000~\u0000Zsq\u0000~\u0000/t\u0000\u0006pluralq\u0000~\u0000Zq\u0000~\u0000.sq\u0000~\u0000\u0018ppsq\u0000~\u0000%q\u0000~\u0000"
							+ "\u001epsq\u0000~\u0000Dppsq\u0000~\u0000^q\u0000~\u0000Zt\u0000\u0007PosTypeq\u0000~\u0000S\u0000\u0000q\u0000~\u0000Nq\u0000~\u0000Nq\u0000~\u0000fsq\u0000~\u0000gw"
							+ "\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\tt\u0000\u000bunspecifiedt\u0000\u000bprepositiont\u0000\finterjectiont\u0000\u0005t"
							+ "itlet\u0000\tadjectivet\u0000\u0004verbt\u0000\npropernamet\u0000\u0006adverbt\u0000\u0004nounxq\u0000~\u0000Usq"
							+ "\u0000~\u0000Vq\u0000~\u0000\u00eaq\u0000~\u0000Zsq\u0000~\u0000/t\u0000\u0003posq\u0000~\u0000Zq\u0000~\u0000.sq\u0000~\u0000\u0018ppsq\u0000~\u0000%q\u0000~\u0000\u001epsq\u0000~"
							+ "\u0000Dppsq\u0000~\u0000^q\u0000~\u0000Zt\u0000\u000fNamedEntityTypeq\u0000~\u0000S\u0000\u0000q\u0000~\u0000Nq\u0000~\u0000Nq\u0000~\u0000fsq\u0000~\u0000"
							+ "gw\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\u000bt\u0000\u000bunspecifiedt\u0000\u0007productt\u0000\u0005othert\u0000\bdateTimet\u0000"
							+ "\u0007countryt\u0000\u0004coint\u0000\u0006persont\u0000\blocationt\u0000\blanguaget\u0000\u0006symbolt\u0000\for"
							+ "ganizationxq\u0000~\u0000Usq\u0000~\u0000Vq\u0000~\u0000\u00fcq\u0000~\u0000Zsq\u0000~\u0000/t\u0000\u000eproperNameTypeq\u0000~\u0000Z"
							+ "q\u0000~\u0000.sr\u0000\"com.sun.msv.grammar.ExpressionPool\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\bexp"
							+ "Tablet\u0000/Lcom/sun/msv/grammar/ExpressionPool$ClosedHash;xpsr\u0000"
							+ "-com.sun.msv.grammar.ExpressionPool$ClosedHash\u00d7j\u00d0N\u00ef\u00e8\u00ed\u001c\u0003\u0000\u0003I\u0000\u0005"
							+ "countB\u0000\rstreamVersionL\u0000\u0006parentt\u0000$Lcom/sun/msv/grammar/Expres"
							+ "sionPool;xp\u0000\u0000\u0000-\u0001pq\u0000~\u0000\u00adq\u0000~\u0000[q\u0000~\u0000\u008bq\u0000~\u0000\rq\u0000~\u0000\u00a1q\u0000~\u0000\u0005q\u0000~\u0000$q\u0000~\u00007q\u0000~"
							+ "\u0000>q\u0000~\u0000pq\u0000~\u0000\u001aq\u0000~\u0000\u0011q\u0000~\u0000\u00d5q\u0000~\u0000\u00e6q\u0000~\u0000\u0013q\u0000~\u0000\u0019q\u0000~\u0000\u00b5q\u0000~\u0000#q\u0000~\u00006q\u0000~\u0000=q\u0000~"
							+ "\u0000\u000eq\u0000~\u0000\u00b1q\u0000~\u0000\fq\u0000~\u0000\tq\u0000~\u0000\u0012q\u0000~\u0000\nq\u0000~\u0000\u0007q\u0000~\u0000\bq\u0000~\u0000\u001cq\u0000~\u00004q\u0000~\u0000;q\u0000~\u0000\u000bq\u0000~"
							+ "\u0000\u00a5q\u0000~\u0000\u00a9q\u0000~\u0000\u0017q\u0000~\u0000\u0010q\u0000~\u0000\u0006q\u0000~\u0000~q\u0000~\u0000\u000fq\u0000~\u0000\u00f8q\u0000~\u0000\u0098q\u0000~\u0000\u0014q\u0000~\u0000\u001bq\u0000~\u0000Bq\u0000~"
							+ "\u0000\u00c6x"));
		}
		return new com.sun.msv.verifier.regexp.REDocumentDeclaration(
				schemaFragment);
	}

	@Override
	public mila.generated.impl.runtime.UnmarshallingEventHandler createUnmarshaller(
			mila.generated.impl.runtime.UnmarshallingContext context) {
		return new mila.generated.impl.AcronymLexiconTypeImpl.Unmarshaller(context);
	}

	@Override
	public java.util.List getAddOrReplaceOrRemove() {
		return _getAddOrReplaceOrRemove();
	}

	@Override
	public java.lang.String getAdjectiveLexicalLink() {
		if (_AdjectiveLexicalLink == null) {
			return "";
		} else {
			return _AdjectiveLexicalLink;
		}
	}

	@Override
	public java.lang.String getConjunctionType() {
		if (_ConjunctionType == null) {
			return "unspecified";
		} else {
			return _ConjunctionType;
		}
	}

	@Override
	public java.lang.String getDefiniteness() {
		if (_Definiteness == null) {
			return "external";
		} else {
			return _Definiteness;
		}
	}

	@Override
	public java.lang.String getFeminine() {
		if (_Feminine == null) {
			return "unspecified";
		} else {
			return _Feminine;
		}
	}

	@Override
	public java.lang.String getGender() {
		if (_Gender == null) {
			return "masculine";
		} else {
			return _Gender;
		}
	}

	@Override
	public java.lang.String getIstLexicalLink() {
		if (_IstLexicalLink == null) {
			return "";
		} else {
			return _IstLexicalLink;
		}
	}

	@Override
	public java.lang.String getMeaning() {
		if (_Meaning == null) {
			return "";
		} else {
			return _Meaning;
		}
	}

	@Override
	public java.lang.String getNiqLexicalLink() {
		if (_NiqLexicalLink == null) {
			return "";
		} else {
			return _NiqLexicalLink;
		}
	}

	@Override
	public java.lang.String getNoInvertedCommas() {
		if (_NoInvertedCommas == null) {
			return "none";
		} else {
			return _NoInvertedCommas;
		}
	}

	@Override
	public java.lang.String getNumber() {
		if (_Number == null) {
			return "singular";
		} else {
			return _Number;
		}
	}

	@Override
	public java.lang.String getPlural() {
		if (_Plural == null) {
			return "unspecified";
		} else {
			return _Plural;
		}
	}

	@Override
	public java.lang.String getPos() {
		if (_Pos == null) {
			return "noun";
		} else {
			return _Pos;
		}
	}

	@Override
	public java.lang.Class getPrimaryInterface() {
		return (mila.generated.AcronymLexiconType.class);
	}

	@Override
	public java.lang.String getProperNameType() {
		if (_ProperNameType == null) {
			return "unspecified";
		} else {
			return _ProperNameType;
		}
	}

	@Override
	public boolean isGenerateAdjective() {
		if (!has_GenerateAdjective) {
			return javax.xml.bind.DatatypeConverter
					.parseBoolean(com.sun.xml.bind.DatatypeConverterImpl
							.installHook("false"));
		} else {
			return _GenerateAdjective;
		}
	}

	@Override
	public boolean isInflectConstructP() {
		if (!has_InflectConstructP) {
			return javax.xml.bind.DatatypeConverter
					.parseBoolean(com.sun.xml.bind.DatatypeConverterImpl
							.installHook("true"));
		} else {
			return _InflectConstructP;
		}
	}

	@Override
	public boolean isInflectConstructS() {
		if (!has_InflectConstructS) {
			return javax.xml.bind.DatatypeConverter
					.parseBoolean(com.sun.xml.bind.DatatypeConverterImpl
							.installHook("true"));
		} else {
			return _InflectConstructS;
		}
	}

	@Override
	public void serializeAttributes(mila.generated.impl.runtime.XMLSerializer context)
			throws org.xml.sax.SAXException {
		int idx15 = 0;
		final int len15 = ((_AddOrReplaceOrRemove == null) ? 0
				: _AddOrReplaceOrRemove.size());
		if (_AdjectiveLexicalLink != null) {
			context.startAttribute("", "adjectiveLexicalLink");
			try {
				context.text(_AdjectiveLexicalLink, "AdjectiveLexicalLink");
			} catch (java.lang.Exception e) {
				mila.generated.impl.runtime.Util.handlePrintConversionException(
						this, e, context);
			}
			context.endAttribute();
		}
		if (_ConjunctionType != null) {
			context.startAttribute("", "conjunctionType");
			try {
				context.text(_ConjunctionType, "ConjunctionType");
			} catch (java.lang.Exception e) {
				mila.generated.impl.runtime.Util.handlePrintConversionException(
						this, e, context);
			}
			context.endAttribute();
		}
		if (_Definiteness != null) {
			context.startAttribute("", "definiteness");
			try {
				context.text(_Definiteness, "Definiteness");
			} catch (java.lang.Exception e) {
				mila.generated.impl.runtime.Util.handlePrintConversionException(
						this, e, context);
			}
			context.endAttribute();
		}
		if (_Feminine != null) {
			context.startAttribute("", "feminine");
			try {
				context.text(_Feminine, "Feminine");
			} catch (java.lang.Exception e) {
				mila.generated.impl.runtime.Util.handlePrintConversionException(
						this, e, context);
			}
			context.endAttribute();
		}
		if (_Gender != null) {
			context.startAttribute("", "gender");
			try {
				context.text(_Gender, "Gender");
			} catch (java.lang.Exception e) {
				mila.generated.impl.runtime.Util.handlePrintConversionException(
						this, e, context);
			}
			context.endAttribute();
		}
		if (has_GenerateAdjective) {
			context.startAttribute("", "generateAdjective");
			try {
				context.text(javax.xml.bind.DatatypeConverter
						.printBoolean(_GenerateAdjective), "GenerateAdjective");
			} catch (java.lang.Exception e) {
				mila.generated.impl.runtime.Util.handlePrintConversionException(
						this, e, context);
			}
			context.endAttribute();
		}
		if (has_InflectConstructP) {
			context.startAttribute("", "inflectConstructP");
			try {
				context.text(javax.xml.bind.DatatypeConverter
						.printBoolean(_InflectConstructP), "InflectConstructP");
			} catch (java.lang.Exception e) {
				mila.generated.impl.runtime.Util.handlePrintConversionException(
						this, e, context);
			}
			context.endAttribute();
		}
		if (has_InflectConstructS) {
			context.startAttribute("", "inflectConstructS");
			try {
				context.text(javax.xml.bind.DatatypeConverter
						.printBoolean(_InflectConstructS), "InflectConstructS");
			} catch (java.lang.Exception e) {
				mila.generated.impl.runtime.Util.handlePrintConversionException(
						this, e, context);
			}
			context.endAttribute();
		}
		if (_IstLexicalLink != null) {
			context.startAttribute("", "istLexicalLink");
			try {
				context.text(_IstLexicalLink, "IstLexicalLink");
			} catch (java.lang.Exception e) {
				mila.generated.impl.runtime.Util.handlePrintConversionException(
						this, e, context);
			}
			context.endAttribute();
		}
		if (_Meaning != null) {
			context.startAttribute("", "meaning");
			try {
				context.text(_Meaning, "Meaning");
			} catch (java.lang.Exception e) {
				mila.generated.impl.runtime.Util.handlePrintConversionException(
						this, e, context);
			}
			context.endAttribute();
		}
		if (_NiqLexicalLink != null) {
			context.startAttribute("", "niqLexicalLink");
			try {
				context.text(_NiqLexicalLink, "NiqLexicalLink");
			} catch (java.lang.Exception e) {
				mila.generated.impl.runtime.Util.handlePrintConversionException(
						this, e, context);
			}
			context.endAttribute();
		}
		if (_NoInvertedCommas != null) {
			context.startAttribute("", "noInvertedCommas");
			try {
				context.text(_NoInvertedCommas, "NoInvertedCommas");
			} catch (java.lang.Exception e) {
				mila.generated.impl.runtime.Util.handlePrintConversionException(
						this, e, context);
			}
			context.endAttribute();
		}
		if (_Number != null) {
			context.startAttribute("", "number");
			try {
				context.text(_Number, "Number");
			} catch (java.lang.Exception e) {
				mila.generated.impl.runtime.Util.handlePrintConversionException(
						this, e, context);
			}
			context.endAttribute();
		}
		if (_Plural != null) {
			context.startAttribute("", "plural");
			try {
				context.text(_Plural, "Plural");
			} catch (java.lang.Exception e) {
				mila.generated.impl.runtime.Util.handlePrintConversionException(
						this, e, context);
			}
			context.endAttribute();
		}
		if (_Pos != null) {
			context.startAttribute("", "pos");
			try {
				context.text(_Pos, "Pos");
			} catch (java.lang.Exception e) {
				mila.generated.impl.runtime.Util.handlePrintConversionException(
						this, e, context);
			}
			context.endAttribute();
		}
		if (_ProperNameType != null) {
			context.startAttribute("", "properNameType");
			try {
				context.text(_ProperNameType, "ProperNameType");
			} catch (java.lang.Exception e) {
				mila.generated.impl.runtime.Util.handlePrintConversionException(
						this, e, context);
			}
			context.endAttribute();
		}
		while (idx15 != len15) {
			while (idx15 != len15) {
				context.childAsAttributes(
						((com.sun.xml.bind.JAXBObject) _AddOrReplaceOrRemove
								.get(idx15++)), "AddOrReplaceOrRemove");
			}
		}
	}

	@Override
	public void serializeBody(mila.generated.impl.runtime.XMLSerializer context)
			throws org.xml.sax.SAXException {
		int idx15 = 0;
		final int len15 = ((_AddOrReplaceOrRemove == null) ? 0
				: _AddOrReplaceOrRemove.size());
		while (idx15 != len15) {
			while (idx15 != len15) {
				context.childAsBody(
						((com.sun.xml.bind.JAXBObject) _AddOrReplaceOrRemove
								.get(idx15++)), "AddOrReplaceOrRemove");
			}
		}
	}

	@Override
	public void serializeURIs(mila.generated.impl.runtime.XMLSerializer context)
			throws org.xml.sax.SAXException {
		int idx15 = 0;
		final int len15 = ((_AddOrReplaceOrRemove == null) ? 0
				: _AddOrReplaceOrRemove.size());
		while (idx15 != len15) {
			while (idx15 != len15) {
				context.childAsURIs(
						((com.sun.xml.bind.JAXBObject) _AddOrReplaceOrRemove
								.get(idx15++)), "AddOrReplaceOrRemove");
			}
		}
	}

	@Override
	public void setAdjectiveLexicalLink(java.lang.String value) {
		_AdjectiveLexicalLink = value;
	}

	@Override
	public void setConjunctionType(java.lang.String value) {
		_ConjunctionType = value;
	}

	@Override
	public void setDefiniteness(java.lang.String value) {
		_Definiteness = value;
	}

	@Override
	public void setFeminine(java.lang.String value) {
		_Feminine = value;
	}

	@Override
	public void setGender(java.lang.String value) {
		_Gender = value;
	}

	@Override
	public void setGenerateAdjective(boolean value) {
		_GenerateAdjective = value;
		has_GenerateAdjective = true;
	}

	@Override
	public void setInflectConstructP(boolean value) {
		_InflectConstructP = value;
		has_InflectConstructP = true;
	}

	@Override
	public void setInflectConstructS(boolean value) {
		_InflectConstructS = value;
		has_InflectConstructS = true;
	}

	@Override
	public void setIstLexicalLink(java.lang.String value) {
		_IstLexicalLink = value;
	}

	@Override
	public void setMeaning(java.lang.String value) {
		_Meaning = value;
	}

	@Override
	public void setNiqLexicalLink(java.lang.String value) {
		_NiqLexicalLink = value;
	}

	@Override
	public void setNoInvertedCommas(java.lang.String value) {
		_NoInvertedCommas = value;
	}

	@Override
	public void setNumber(java.lang.String value) {
		_Number = value;
	}

	@Override
	public void setPlural(java.lang.String value) {
		_Plural = value;
	}

	@Override
	public void setPos(java.lang.String value) {
		_Pos = value;
	}

	@Override
	public void setProperNameType(java.lang.String value) {
		_ProperNameType = value;
	}

}
