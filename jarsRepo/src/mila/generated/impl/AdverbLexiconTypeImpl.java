//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v1.0.5-b16-fcs 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2008.12.01 at 02:23:12 PM IST 
//

package mila.generated.impl;

public class AdverbLexiconTypeImpl implements mila.generated.AdverbLexiconType,
		com.sun.xml.bind.JAXBObject,
		mila.generated.impl.runtime.UnmarshallableObject,
		mila.generated.impl.runtime.XMLSerializable,
		mila.generated.impl.runtime.ValidatableObject {

	public static class AddImpl extends mila.generated.impl.AdverbExceptionTypeImpl
			implements mila.generated.AdverbLexiconType.Add,
			com.sun.xml.bind.RIElement, com.sun.xml.bind.JAXBObject,
			mila.generated.impl.runtime.UnmarshallableObject,
			mila.generated.impl.runtime.XMLSerializable,
			mila.generated.impl.runtime.ValidatableObject {

		public class Unmarshaller extends
				mila.generated.impl.runtime.AbstractUnmarshallingEventHandlerImpl {

			public Unmarshaller(
					mila.generated.impl.runtime.UnmarshallingContext context) {
				super(context, "----");
			}

			protected Unmarshaller(
					mila.generated.impl.runtime.UnmarshallingContext context,
					int startState) {
				this(context);
				state = startState;
			}

			@Override
			public void enterAttribute(java.lang.String ___uri,
					java.lang.String ___local, java.lang.String ___qname)
					throws org.xml.sax.SAXException {
				int attIdx;
				outer: while (true) {
					switch (state) {
					case 3:
						revertToParentFromEnterAttribute(___uri, ___local,
								___qname);
						return;
					case 1:
						if (("dotted" == ___local) && ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((mila.generated.impl.AdverbExceptionTypeImpl) mila.generated.impl.AdverbLexiconTypeImpl.AddImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						if (("possessiveSuffix" == ___local) && ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((mila.generated.impl.AdverbExceptionTypeImpl) mila.generated.impl.AdverbLexiconTypeImpl.AddImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						if (("script" == ___local) && ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((mila.generated.impl.AdverbExceptionTypeImpl) mila.generated.impl.AdverbLexiconTypeImpl.AddImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						if (("transliterated" == ___local) && ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((mila.generated.impl.AdverbExceptionTypeImpl) mila.generated.impl.AdverbLexiconTypeImpl.AddImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						break;
					}
					super.enterAttribute(___uri, ___local, ___qname);
					break;
				}
			}

			@Override
			public void enterElement(java.lang.String ___uri,
					java.lang.String ___local, java.lang.String ___qname,
					org.xml.sax.Attributes __atts)
					throws org.xml.sax.SAXException {
				int attIdx;
				outer: while (true) {
					switch (state) {
					case 3:
						revertToParentFromEnterElement(___uri, ___local,
								___qname, __atts);
						return;
					case 0:
						if (("add" == ___local) && ("" == ___uri)) {
							context.pushAttributes(__atts, true);
							state = 1;
							return;
						}
						break;
					case 1:
						attIdx = context.getAttribute("", "dotted");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						attIdx = context.getAttribute("", "possessiveSuffix");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						attIdx = context.getAttribute("", "script");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						attIdx = context.getAttribute("", "transliterated");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						break;
					}
					super.enterElement(___uri, ___local, ___qname, __atts);
					break;
				}
			}

			@Override
			public void handleText(final java.lang.String value)
					throws org.xml.sax.SAXException {
				int attIdx;
				outer: while (true) {
					try {
						switch (state) {
						case 3:
							revertToParentFromText(value);
							return;
						case 1:
							attIdx = context.getAttribute("", "dotted");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							attIdx = context.getAttribute("",
									"possessiveSuffix");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							attIdx = context.getAttribute("", "script");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							attIdx = context.getAttribute("", "transliterated");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							break;
						}
					} catch (java.lang.RuntimeException e) {
						handleUnexpectedTextException(value, e);
					}
					break;
				}
			}

			@Override
			public void leaveAttribute(java.lang.String ___uri,
					java.lang.String ___local, java.lang.String ___qname)
					throws org.xml.sax.SAXException {
				int attIdx;
				outer: while (true) {
					switch (state) {
					case 3:
						revertToParentFromLeaveAttribute(___uri, ___local,
								___qname);
						return;
					case 1:
						attIdx = context.getAttribute("", "dotted");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "possessiveSuffix");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "script");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "transliterated");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						break;
					}
					super.leaveAttribute(___uri, ___local, ___qname);
					break;
				}
			}

			@Override
			public void leaveElement(java.lang.String ___uri,
					java.lang.String ___local, java.lang.String ___qname)
					throws org.xml.sax.SAXException {
				int attIdx;
				outer: while (true) {
					switch (state) {
					case 2:
						if (("add" == ___local) && ("" == ___uri)) {
							context.popAttributes();
							state = 3;
							return;
						}
						break;
					case 3:
						revertToParentFromLeaveElement(___uri, ___local,
								___qname);
						return;
					case 1:
						attIdx = context.getAttribute("", "dotted");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "possessiveSuffix");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "script");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "transliterated");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						break;
					}
					super.leaveElement(___uri, ___local, ___qname);
					break;
				}
			}

			@Override
			public java.lang.Object owner() {
				return mila.generated.impl.AdverbLexiconTypeImpl.AddImpl.this;
			}

		}

		public final static java.lang.Class version = (mila.generated.impl.JAXBVersion.class);

		private static com.sun.msv.grammar.Grammar schemaFragment;

		private final static java.lang.Class PRIMARY_INTERFACE_CLASS() {
			return (mila.generated.AdverbLexiconType.Add.class);
		}

		@Override
		public java.lang.String ____jaxb_ri____getLocalName() {
			return "add";
		}

		@Override
		public java.lang.String ____jaxb_ri____getNamespaceURI() {
			return "";
		}

		@Override
		public com.sun.msv.verifier.DocumentDeclaration createRawValidator() {
			if (schemaFragment == null) {
				schemaFragment = com.sun.xml.bind.validator.SchemaDeserializer
						.deserialize(("\u00ac\u00ed\u0000\u0005sr\u0000\'com.sun.msv.grammar.trex.ElementPattern\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000"
								+ "\tnameClasst\u0000\u001fLcom/sun/msv/grammar/NameClass;xr\u0000\u001ecom.sun.msv."
								+ "grammar.ElementExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002Z\u0000\u001aignoreUndeclaredAttributesL\u0000"
								+ "\fcontentModelt\u0000 Lcom/sun/msv/grammar/Expression;xr\u0000\u001ecom.sun."
								+ "msv.grammar.Expression\u00f8\u0018\u0082\u00e8N5~O\u0002\u0000\u0002L\u0000\u0013epsilonReducibilityt\u0000\u0013Lj"
								+ "ava/lang/Boolean;L\u0000\u000bexpandedExpq\u0000~\u0000\u0003xppp\u0000sr\u0000\u001fcom.sun.msv.gra"
								+ "mmar.SequenceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.sun.msv.grammar.BinaryExp"
								+ "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0004exp1q\u0000~\u0000\u0003L\u0000\u0004exp2q\u0000~\u0000\u0003xq\u0000~\u0000\u0004ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007pps"
								+ "q\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsr\u0000\u001bcom.sun.msv.grammar.DataExp\u0000\u0000\u0000\u0000\u0000\u0000"
								+ "\u0000\u0001\u0002\u0000\u0003L\u0000\u0002dtt\u0000\u001fLorg/relaxng/datatype/Datatype;L\u0000\u0006exceptq\u0000~\u0000\u0003L\u0000"
								+ "\u0004namet\u0000\u001dLcom/sun/msv/util/StringPair;xq\u0000~\u0000\u0004ppsr\u0000\"com.sun.msv"
								+ ".datatype.xsd.TokenType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000#com.sun.msv.datatype.x"
								+ "sd.StringType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001Z\u0000\risAlwaysValidxr\u0000*com.sun.msv.data"
								+ "type.xsd.BuiltinAtomicType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000%com.sun.msv.datatyp"
								+ "e.xsd.ConcreteType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\'com.sun.msv.datatype.xsd.XS"
								+ "DatatypeImpl\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\fnamespaceUrit\u0000\u0012Ljava/lang/String;L"
								+ "\u0000\btypeNameq\u0000~\u0000\u0018L\u0000\nwhiteSpacet\u0000.Lcom/sun/msv/datatype/xsd/Whi"
								+ "teSpaceProcessor;xpt\u0000 http://www.w3.org/2001/XMLSchemat\u0000\u0005tok"
								+ "ensr\u00005com.sun.msv.datatype.xsd.WhiteSpaceProcessor$Collapse\u0000"
								+ "\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000,com.sun.msv.datatype.xsd.WhiteSpaceProcessor\u0000\u0000"
								+ "\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xp\u0001sr\u00000com.sun.msv.grammar.Expression$NullSetExpres"
								+ "sion\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0004ppsr\u0000\u001bcom.sun.msv.util.StringPair\u00d0t\u001ejB\u008f"
								+ "\u008d\u00a0\u0002\u0000\u0002L\u0000\tlocalNameq\u0000~\u0000\u0018L\u0000\fnamespaceURIq\u0000~\u0000\u0018xpq\u0000~\u0000\u001cq\u0000~\u0000\u001bsr\u0000\u001dco"
								+ "m.sun.msv.grammar.ChoiceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\bppsr\u0000 com.sun.ms"
								+ "v.grammar.AttributeExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0003expq\u0000~\u0000\u0003L\u0000\tnameClassq\u0000~\u0000"
								+ "\u0001xq\u0000~\u0000\u0004sr\u0000\u0011java.lang.Boolean\u00cd r\u0080\u00d5\u009c\u00fa\u00ee\u0002\u0000\u0001Z\u0000\u0005valuexp\u0000pq\u0000~\u0000\u0012sr\u0000#"
								+ "com.sun.msv.grammar.SimpleNameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\tlocalNameq\u0000"
								+ "~\u0000\u0018L\u0000\fnamespaceURIq\u0000~\u0000\u0018xr\u0000\u001dcom.sun.msv.grammar.NameClass\u0000\u0000\u0000\u0000"
								+ "\u0000\u0000\u0000\u0001\u0002\u0000\u0000xpt\u0000\u0006dottedt\u0000\u0000sr\u00000com.sun.msv.grammar.Expression$Epsi"
								+ "lonExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0004sq\u0000~\u0000(\u0001q\u0000~\u00000sq\u0000~\u0000$ppsq\u0000~\u0000&q\u0000~\u0000"
								+ ")psq\u0000~\u0000\u000fppsr\u0000)com.sun.msv.datatype.xsd.EnumerationFacet\u0000\u0000\u0000\u0000\u0000"
								+ "\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\u0006valuest\u0000\u000fLjava/util/Set;xr\u00009com.sun.msv.datatype.xs"
								+ "d.DataTypeWithValueConstraintFacet\"\u00a7Ro\u00ca\u00c7\u008aT\u0002\u0000\u0000xr\u0000*com.sun.msv"
								+ ".datatype.xsd.DataTypeWithFacet\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0005Z\u0000\fisFacetFixedZ\u0000\u0012"
								+ "needValueCheckFlagL\u0000\bbaseTypet\u0000)Lcom/sun/msv/datatype/xsd/XS"
								+ "DatatypeImpl;L\u0000\fconcreteTypet\u0000\'Lcom/sun/msv/datatype/xsd/Con"
								+ "creteType;L\u0000\tfacetNameq\u0000~\u0000\u0018xq\u0000~\u0000\u0017q\u0000~\u0000.t\u0000\u0007PGNTypeq\u0000~\u0000\u001f\u0000\u0000q\u0000~\u0000\u001a"
								+ "q\u0000~\u0000\u001at\u0000\u000benumerationsr\u0000\u0011java.util.HashSet\u00baD\u0085\u0095\u0096\u00b8\u00b74\u0003\u0000\u0000xpw\f\u0000\u0000\u0000 ?"
								+ "@\u0000\u0000\u0000\u0000\u0000\u0013t\u0000\t123p/M/Sgt\u0000\u00072p/M/Plt\u0000\u00073p/M/Sgt\u0000\b1p/MF/Sgt\u0000\t123p/M/"
								+ "Plt\u0000\b2p/MF/Plt\u0000\u00072p/M/Sgt\u0000\u00071p/F/Sgt\u0000\b3p/MF/Plt\u0000\u00073p/F/Plt\u0000\u00071p/"
								+ "M/Sgt\u0000\u000bunspecifiedt\u0000\u00072p/F/Plt\u0000\t123p/F/Plt\u0000\u00073p/M/Plt\u0000\u00073p/F/Sg"
								+ "t\u0000\t123p/F/Sgt\u0000\b1p/MF/Plt\u0000\u00072p/F/Sgxq\u0000~\u0000!sq\u0000~\u0000\"q\u0000~\u0000<q\u0000~\u0000.sq\u0000~\u0000"
								+ "*t\u0000\u0010possessiveSuffixq\u0000~\u0000.q\u0000~\u00000sq\u0000~\u0000$ppsq\u0000~\u0000&q\u0000~\u0000)psq\u0000~\u0000\u000fppsq"
								+ "\u0000~\u00005q\u0000~\u0000.t\u0000\nScriptTypeq\u0000~\u0000\u001f\u0000\u0000q\u0000~\u0000\u001aq\u0000~\u0000\u001aq\u0000~\u0000=sq\u0000~\u0000>w\f\u0000\u0000\u0000\u0010?@\u0000\u0000"
								+ "\u0000\u0000\u0000\u0004t\u0000\u0004typot\u0000\u0006formalt\u0000\u0005slangt\u0000\ncolloquialxq\u0000~\u0000!sq\u0000~\u0000\"q\u0000~\u0000Zq\u0000"
								+ "~\u0000.sq\u0000~\u0000*t\u0000\u0006scriptq\u0000~\u0000.q\u0000~\u00000sq\u0000~\u0000&ppq\u0000~\u0000\u0012sq\u0000~\u0000*t\u0000\u000etransliter"
								+ "atedq\u0000~\u0000.sq\u0000~\u0000&ppq\u0000~\u0000\u0012sq\u0000~\u0000*t\u0000\bundottedq\u0000~\u0000.sq\u0000~\u0000$ppsq\u0000~\u0000&q\u0000"
								+ "~\u0000)psq\u0000~\u0000\u000fppsr\u0000\"com.sun.msv.datatype.xsd.QnameType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000"
								+ "\u0000xq\u0000~\u0000\u0015q\u0000~\u0000\u001bt\u0000\u0005QNameq\u0000~\u0000\u001fq\u0000~\u0000!sq\u0000~\u0000\"q\u0000~\u0000nq\u0000~\u0000\u001bsq\u0000~\u0000*t\u0000\u0004typet"
								+ "\u0000)http://www.w3.org/2001/XMLSchema-instanceq\u0000~\u00000sq\u0000~\u0000*t\u0000\u0003add"
								+ "q\u0000~\u0000.sr\u0000\"com.sun.msv.grammar.ExpressionPool\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\bexp"
								+ "Tablet\u0000/Lcom/sun/msv/grammar/ExpressionPool$ClosedHash;xpsr\u0000"
								+ "-com.sun.msv.grammar.ExpressionPool$ClosedHash\u00d7j\u00d0N\u00ef\u00e8\u00ed\u001c\u0003\u0000\u0003I\u0000\u0005"
								+ "countB\u0000\rstreamVersionL\u0000\u0006parentt\u0000$Lcom/sun/msv/grammar/Expres"
								+ "sionPool;xp\u0000\u0000\u0000\n\u0001pq\u0000~\u0000iq\u0000~\u0000\u000eq\u0000~\u0000Vq\u0000~\u0000\u000bq\u0000~\u0000\rq\u0000~\u0000%q\u0000~\u0000\tq\u0000~\u0000\nq\u0000~"
								+ "\u0000\fq\u0000~\u00002x"));
			}
			return new com.sun.msv.verifier.regexp.REDocumentDeclaration(
					schemaFragment);
		}

		@Override
		public mila.generated.impl.runtime.UnmarshallingEventHandler createUnmarshaller(
				mila.generated.impl.runtime.UnmarshallingContext context) {
			return new mila.generated.impl.AdverbLexiconTypeImpl.AddImpl.Unmarshaller(
					context);
		}

		@Override
		public java.lang.Class getPrimaryInterface() {
			return (mila.generated.AdverbLexiconType.Add.class);
		}

		@Override
		public void serializeAttributes(
				mila.generated.impl.runtime.XMLSerializer context)
				throws org.xml.sax.SAXException {
		}

		@Override
		public void serializeBody(mila.generated.impl.runtime.XMLSerializer context)
				throws org.xml.sax.SAXException {
			context.startElement("", "add");
			super.serializeURIs(context);
			context.endNamespaceDecls();
			super.serializeAttributes(context);
			context.endAttributes();
			super.serializeBody(context);
			context.endElement();
		}

		@Override
		public void serializeURIs(mila.generated.impl.runtime.XMLSerializer context)
				throws org.xml.sax.SAXException {
		}

	}

	public static class RemoveImpl extends
			mila.generated.impl.AdverbExceptionTypeImpl implements
			mila.generated.AdverbLexiconType.Remove, com.sun.xml.bind.RIElement,
			com.sun.xml.bind.JAXBObject,
			mila.generated.impl.runtime.UnmarshallableObject,
			mila.generated.impl.runtime.XMLSerializable,
			mila.generated.impl.runtime.ValidatableObject {

		public class Unmarshaller extends
				mila.generated.impl.runtime.AbstractUnmarshallingEventHandlerImpl {

			public Unmarshaller(
					mila.generated.impl.runtime.UnmarshallingContext context) {
				super(context, "----");
			}

			protected Unmarshaller(
					mila.generated.impl.runtime.UnmarshallingContext context,
					int startState) {
				this(context);
				state = startState;
			}

			@Override
			public void enterAttribute(java.lang.String ___uri,
					java.lang.String ___local, java.lang.String ___qname)
					throws org.xml.sax.SAXException {
				int attIdx;
				outer: while (true) {
					switch (state) {
					case 1:
						if (("dotted" == ___local) && ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((mila.generated.impl.AdverbExceptionTypeImpl) mila.generated.impl.AdverbLexiconTypeImpl.RemoveImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						if (("possessiveSuffix" == ___local) && ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((mila.generated.impl.AdverbExceptionTypeImpl) mila.generated.impl.AdverbLexiconTypeImpl.RemoveImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						if (("script" == ___local) && ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((mila.generated.impl.AdverbExceptionTypeImpl) mila.generated.impl.AdverbLexiconTypeImpl.RemoveImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						if (("transliterated" == ___local) && ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((mila.generated.impl.AdverbExceptionTypeImpl) mila.generated.impl.AdverbLexiconTypeImpl.RemoveImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						break;
					case 3:
						revertToParentFromEnterAttribute(___uri, ___local,
								___qname);
						return;
					}
					super.enterAttribute(___uri, ___local, ___qname);
					break;
				}
			}

			@Override
			public void enterElement(java.lang.String ___uri,
					java.lang.String ___local, java.lang.String ___qname,
					org.xml.sax.Attributes __atts)
					throws org.xml.sax.SAXException {
				int attIdx;
				outer: while (true) {
					switch (state) {
					case 0:
						if (("remove" == ___local) && ("" == ___uri)) {
							context.pushAttributes(__atts, true);
							state = 1;
							return;
						}
						break;
					case 1:
						attIdx = context.getAttribute("", "dotted");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						attIdx = context.getAttribute("", "possessiveSuffix");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						attIdx = context.getAttribute("", "script");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						attIdx = context.getAttribute("", "transliterated");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						break;
					case 3:
						revertToParentFromEnterElement(___uri, ___local,
								___qname, __atts);
						return;
					}
					super.enterElement(___uri, ___local, ___qname, __atts);
					break;
				}
			}

			@Override
			public void handleText(final java.lang.String value)
					throws org.xml.sax.SAXException {
				int attIdx;
				outer: while (true) {
					try {
						switch (state) {
						case 1:
							attIdx = context.getAttribute("", "dotted");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							attIdx = context.getAttribute("",
									"possessiveSuffix");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							attIdx = context.getAttribute("", "script");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							attIdx = context.getAttribute("", "transliterated");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							break;
						case 3:
							revertToParentFromText(value);
							return;
						}
					} catch (java.lang.RuntimeException e) {
						handleUnexpectedTextException(value, e);
					}
					break;
				}
			}

			@Override
			public void leaveAttribute(java.lang.String ___uri,
					java.lang.String ___local, java.lang.String ___qname)
					throws org.xml.sax.SAXException {
				int attIdx;
				outer: while (true) {
					switch (state) {
					case 1:
						attIdx = context.getAttribute("", "dotted");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "possessiveSuffix");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "script");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "transliterated");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						break;
					case 3:
						revertToParentFromLeaveAttribute(___uri, ___local,
								___qname);
						return;
					}
					super.leaveAttribute(___uri, ___local, ___qname);
					break;
				}
			}

			@Override
			public void leaveElement(java.lang.String ___uri,
					java.lang.String ___local, java.lang.String ___qname)
					throws org.xml.sax.SAXException {
				int attIdx;
				outer: while (true) {
					switch (state) {
					case 2:
						if (("remove" == ___local) && ("" == ___uri)) {
							context.popAttributes();
							state = 3;
							return;
						}
						break;
					case 1:
						attIdx = context.getAttribute("", "dotted");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "possessiveSuffix");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "script");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "transliterated");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						break;
					case 3:
						revertToParentFromLeaveElement(___uri, ___local,
								___qname);
						return;
					}
					super.leaveElement(___uri, ___local, ___qname);
					break;
				}
			}

			@Override
			public java.lang.Object owner() {
				return mila.generated.impl.AdverbLexiconTypeImpl.RemoveImpl.this;
			}

		}

		public final static java.lang.Class version = (mila.generated.impl.JAXBVersion.class);

		private static com.sun.msv.grammar.Grammar schemaFragment;

		private final static java.lang.Class PRIMARY_INTERFACE_CLASS() {
			return (mila.generated.AdverbLexiconType.Remove.class);
		}

		@Override
		public java.lang.String ____jaxb_ri____getLocalName() {
			return "remove";
		}

		@Override
		public java.lang.String ____jaxb_ri____getNamespaceURI() {
			return "";
		}

		@Override
		public com.sun.msv.verifier.DocumentDeclaration createRawValidator() {
			if (schemaFragment == null) {
				schemaFragment = com.sun.xml.bind.validator.SchemaDeserializer
						.deserialize(("\u00ac\u00ed\u0000\u0005sr\u0000\'com.sun.msv.grammar.trex.ElementPattern\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000"
								+ "\tnameClasst\u0000\u001fLcom/sun/msv/grammar/NameClass;xr\u0000\u001ecom.sun.msv."
								+ "grammar.ElementExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002Z\u0000\u001aignoreUndeclaredAttributesL\u0000"
								+ "\fcontentModelt\u0000 Lcom/sun/msv/grammar/Expression;xr\u0000\u001ecom.sun."
								+ "msv.grammar.Expression\u00f8\u0018\u0082\u00e8N5~O\u0002\u0000\u0002L\u0000\u0013epsilonReducibilityt\u0000\u0013Lj"
								+ "ava/lang/Boolean;L\u0000\u000bexpandedExpq\u0000~\u0000\u0003xppp\u0000sr\u0000\u001fcom.sun.msv.gra"
								+ "mmar.SequenceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.sun.msv.grammar.BinaryExp"
								+ "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0004exp1q\u0000~\u0000\u0003L\u0000\u0004exp2q\u0000~\u0000\u0003xq\u0000~\u0000\u0004ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007pps"
								+ "q\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsr\u0000\u001bcom.sun.msv.grammar.DataExp\u0000\u0000\u0000\u0000\u0000\u0000"
								+ "\u0000\u0001\u0002\u0000\u0003L\u0000\u0002dtt\u0000\u001fLorg/relaxng/datatype/Datatype;L\u0000\u0006exceptq\u0000~\u0000\u0003L\u0000"
								+ "\u0004namet\u0000\u001dLcom/sun/msv/util/StringPair;xq\u0000~\u0000\u0004ppsr\u0000\"com.sun.msv"
								+ ".datatype.xsd.TokenType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000#com.sun.msv.datatype.x"
								+ "sd.StringType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001Z\u0000\risAlwaysValidxr\u0000*com.sun.msv.data"
								+ "type.xsd.BuiltinAtomicType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000%com.sun.msv.datatyp"
								+ "e.xsd.ConcreteType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\'com.sun.msv.datatype.xsd.XS"
								+ "DatatypeImpl\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\fnamespaceUrit\u0000\u0012Ljava/lang/String;L"
								+ "\u0000\btypeNameq\u0000~\u0000\u0018L\u0000\nwhiteSpacet\u0000.Lcom/sun/msv/datatype/xsd/Whi"
								+ "teSpaceProcessor;xpt\u0000 http://www.w3.org/2001/XMLSchemat\u0000\u0005tok"
								+ "ensr\u00005com.sun.msv.datatype.xsd.WhiteSpaceProcessor$Collapse\u0000"
								+ "\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000,com.sun.msv.datatype.xsd.WhiteSpaceProcessor\u0000\u0000"
								+ "\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xp\u0001sr\u00000com.sun.msv.grammar.Expression$NullSetExpres"
								+ "sion\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0004ppsr\u0000\u001bcom.sun.msv.util.StringPair\u00d0t\u001ejB\u008f"
								+ "\u008d\u00a0\u0002\u0000\u0002L\u0000\tlocalNameq\u0000~\u0000\u0018L\u0000\fnamespaceURIq\u0000~\u0000\u0018xpq\u0000~\u0000\u001cq\u0000~\u0000\u001bsr\u0000\u001dco"
								+ "m.sun.msv.grammar.ChoiceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\bppsr\u0000 com.sun.ms"
								+ "v.grammar.AttributeExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0003expq\u0000~\u0000\u0003L\u0000\tnameClassq\u0000~\u0000"
								+ "\u0001xq\u0000~\u0000\u0004sr\u0000\u0011java.lang.Boolean\u00cd r\u0080\u00d5\u009c\u00fa\u00ee\u0002\u0000\u0001Z\u0000\u0005valuexp\u0000pq\u0000~\u0000\u0012sr\u0000#"
								+ "com.sun.msv.grammar.SimpleNameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\tlocalNameq\u0000"
								+ "~\u0000\u0018L\u0000\fnamespaceURIq\u0000~\u0000\u0018xr\u0000\u001dcom.sun.msv.grammar.NameClass\u0000\u0000\u0000\u0000"
								+ "\u0000\u0000\u0000\u0001\u0002\u0000\u0000xpt\u0000\u0006dottedt\u0000\u0000sr\u00000com.sun.msv.grammar.Expression$Epsi"
								+ "lonExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0004sq\u0000~\u0000(\u0001q\u0000~\u00000sq\u0000~\u0000$ppsq\u0000~\u0000&q\u0000~\u0000"
								+ ")psq\u0000~\u0000\u000fppsr\u0000)com.sun.msv.datatype.xsd.EnumerationFacet\u0000\u0000\u0000\u0000\u0000"
								+ "\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\u0006valuest\u0000\u000fLjava/util/Set;xr\u00009com.sun.msv.datatype.xs"
								+ "d.DataTypeWithValueConstraintFacet\"\u00a7Ro\u00ca\u00c7\u008aT\u0002\u0000\u0000xr\u0000*com.sun.msv"
								+ ".datatype.xsd.DataTypeWithFacet\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0005Z\u0000\fisFacetFixedZ\u0000\u0012"
								+ "needValueCheckFlagL\u0000\bbaseTypet\u0000)Lcom/sun/msv/datatype/xsd/XS"
								+ "DatatypeImpl;L\u0000\fconcreteTypet\u0000\'Lcom/sun/msv/datatype/xsd/Con"
								+ "creteType;L\u0000\tfacetNameq\u0000~\u0000\u0018xq\u0000~\u0000\u0017q\u0000~\u0000.t\u0000\u0007PGNTypeq\u0000~\u0000\u001f\u0000\u0000q\u0000~\u0000\u001a"
								+ "q\u0000~\u0000\u001at\u0000\u000benumerationsr\u0000\u0011java.util.HashSet\u00baD\u0085\u0095\u0096\u00b8\u00b74\u0003\u0000\u0000xpw\f\u0000\u0000\u0000 ?"
								+ "@\u0000\u0000\u0000\u0000\u0000\u0013t\u0000\t123p/M/Sgt\u0000\u00072p/M/Plt\u0000\u00073p/M/Sgt\u0000\b1p/MF/Sgt\u0000\t123p/M/"
								+ "Plt\u0000\b2p/MF/Plt\u0000\u00072p/M/Sgt\u0000\u00071p/F/Sgt\u0000\b3p/MF/Plt\u0000\u00073p/F/Plt\u0000\u00071p/"
								+ "M/Sgt\u0000\u000bunspecifiedt\u0000\u00072p/F/Plt\u0000\t123p/F/Plt\u0000\u00073p/M/Plt\u0000\u00073p/F/Sg"
								+ "t\u0000\t123p/F/Sgt\u0000\b1p/MF/Plt\u0000\u00072p/F/Sgxq\u0000~\u0000!sq\u0000~\u0000\"q\u0000~\u0000<q\u0000~\u0000.sq\u0000~\u0000"
								+ "*t\u0000\u0010possessiveSuffixq\u0000~\u0000.q\u0000~\u00000sq\u0000~\u0000$ppsq\u0000~\u0000&q\u0000~\u0000)psq\u0000~\u0000\u000fppsq"
								+ "\u0000~\u00005q\u0000~\u0000.t\u0000\nScriptTypeq\u0000~\u0000\u001f\u0000\u0000q\u0000~\u0000\u001aq\u0000~\u0000\u001aq\u0000~\u0000=sq\u0000~\u0000>w\f\u0000\u0000\u0000\u0010?@\u0000\u0000"
								+ "\u0000\u0000\u0000\u0004t\u0000\u0004typot\u0000\u0006formalt\u0000\u0005slangt\u0000\ncolloquialxq\u0000~\u0000!sq\u0000~\u0000\"q\u0000~\u0000Zq\u0000"
								+ "~\u0000.sq\u0000~\u0000*t\u0000\u0006scriptq\u0000~\u0000.q\u0000~\u00000sq\u0000~\u0000&ppq\u0000~\u0000\u0012sq\u0000~\u0000*t\u0000\u000etransliter"
								+ "atedq\u0000~\u0000.sq\u0000~\u0000&ppq\u0000~\u0000\u0012sq\u0000~\u0000*t\u0000\bundottedq\u0000~\u0000.sq\u0000~\u0000$ppsq\u0000~\u0000&q\u0000"
								+ "~\u0000)psq\u0000~\u0000\u000fppsr\u0000\"com.sun.msv.datatype.xsd.QnameType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000"
								+ "\u0000xq\u0000~\u0000\u0015q\u0000~\u0000\u001bt\u0000\u0005QNameq\u0000~\u0000\u001fq\u0000~\u0000!sq\u0000~\u0000\"q\u0000~\u0000nq\u0000~\u0000\u001bsq\u0000~\u0000*t\u0000\u0004typet"
								+ "\u0000)http://www.w3.org/2001/XMLSchema-instanceq\u0000~\u00000sq\u0000~\u0000*t\u0000\u0006rem"
								+ "oveq\u0000~\u0000.sr\u0000\"com.sun.msv.grammar.ExpressionPool\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\b"
								+ "expTablet\u0000/Lcom/sun/msv/grammar/ExpressionPool$ClosedHash;xp"
								+ "sr\u0000-com.sun.msv.grammar.ExpressionPool$ClosedHash\u00d7j\u00d0N\u00ef\u00e8\u00ed\u001c\u0003\u0000\u0003"
								+ "I\u0000\u0005countB\u0000\rstreamVersionL\u0000\u0006parentt\u0000$Lcom/sun/msv/grammar/Exp"
								+ "ressionPool;xp\u0000\u0000\u0000\n\u0001pq\u0000~\u0000iq\u0000~\u0000\u000eq\u0000~\u0000Vq\u0000~\u0000\u000bq\u0000~\u0000\rq\u0000~\u0000%q\u0000~\u0000\tq\u0000~\u0000\n"
								+ "q\u0000~\u0000\fq\u0000~\u00002x"));
			}
			return new com.sun.msv.verifier.regexp.REDocumentDeclaration(
					schemaFragment);
		}

		@Override
		public mila.generated.impl.runtime.UnmarshallingEventHandler createUnmarshaller(
				mila.generated.impl.runtime.UnmarshallingContext context) {
			return new mila.generated.impl.AdverbLexiconTypeImpl.RemoveImpl.Unmarshaller(
					context);
		}

		@Override
		public java.lang.Class getPrimaryInterface() {
			return (mila.generated.AdverbLexiconType.Remove.class);
		}

		@Override
		public void serializeAttributes(
				mila.generated.impl.runtime.XMLSerializer context)
				throws org.xml.sax.SAXException {
		}

		@Override
		public void serializeBody(mila.generated.impl.runtime.XMLSerializer context)
				throws org.xml.sax.SAXException {
			context.startElement("", "remove");
			super.serializeURIs(context);
			context.endNamespaceDecls();
			super.serializeAttributes(context);
			context.endAttributes();
			super.serializeBody(context);
			context.endElement();
		}

		@Override
		public void serializeURIs(mila.generated.impl.runtime.XMLSerializer context)
				throws org.xml.sax.SAXException {
		}

	}

	public static class ReplaceImpl extends
			mila.generated.impl.AdverbExceptionTypeImpl implements
			mila.generated.AdverbLexiconType.Replace, com.sun.xml.bind.RIElement,
			com.sun.xml.bind.JAXBObject,
			mila.generated.impl.runtime.UnmarshallableObject,
			mila.generated.impl.runtime.XMLSerializable,
			mila.generated.impl.runtime.ValidatableObject {

		public class Unmarshaller extends
				mila.generated.impl.runtime.AbstractUnmarshallingEventHandlerImpl {

			public Unmarshaller(
					mila.generated.impl.runtime.UnmarshallingContext context) {
				super(context, "----");
			}

			protected Unmarshaller(
					mila.generated.impl.runtime.UnmarshallingContext context,
					int startState) {
				this(context);
				state = startState;
			}

			@Override
			public void enterAttribute(java.lang.String ___uri,
					java.lang.String ___local, java.lang.String ___qname)
					throws org.xml.sax.SAXException {
				int attIdx;
				outer: while (true) {
					switch (state) {
					case 3:
						revertToParentFromEnterAttribute(___uri, ___local,
								___qname);
						return;
					case 1:
						if (("dotted" == ___local) && ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((mila.generated.impl.AdverbExceptionTypeImpl) mila.generated.impl.AdverbLexiconTypeImpl.ReplaceImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						if (("possessiveSuffix" == ___local) && ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((mila.generated.impl.AdverbExceptionTypeImpl) mila.generated.impl.AdverbLexiconTypeImpl.ReplaceImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						if (("script" == ___local) && ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((mila.generated.impl.AdverbExceptionTypeImpl) mila.generated.impl.AdverbLexiconTypeImpl.ReplaceImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						if (("transliterated" == ___local) && ("" == ___uri)) {
							spawnHandlerFromEnterAttribute(
									(((mila.generated.impl.AdverbExceptionTypeImpl) mila.generated.impl.AdverbLexiconTypeImpl.ReplaceImpl.this).new Unmarshaller(
											context)), 2, ___uri, ___local,
									___qname);
							return;
						}
						break;
					}
					super.enterAttribute(___uri, ___local, ___qname);
					break;
				}
			}

			@Override
			public void enterElement(java.lang.String ___uri,
					java.lang.String ___local, java.lang.String ___qname,
					org.xml.sax.Attributes __atts)
					throws org.xml.sax.SAXException {
				int attIdx;
				outer: while (true) {
					switch (state) {
					case 3:
						revertToParentFromEnterElement(___uri, ___local,
								___qname, __atts);
						return;
					case 1:
						attIdx = context.getAttribute("", "dotted");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						attIdx = context.getAttribute("", "possessiveSuffix");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						attIdx = context.getAttribute("", "script");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						attIdx = context.getAttribute("", "transliterated");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().enterElement(___uri,
									___local, ___qname, __atts);
							return;
						}
						break;
					case 0:
						if (("replace" == ___local) && ("" == ___uri)) {
							context.pushAttributes(__atts, true);
							state = 1;
							return;
						}
						break;
					}
					super.enterElement(___uri, ___local, ___qname, __atts);
					break;
				}
			}

			@Override
			public void handleText(final java.lang.String value)
					throws org.xml.sax.SAXException {
				int attIdx;
				outer: while (true) {
					try {
						switch (state) {
						case 3:
							revertToParentFromText(value);
							return;
						case 1:
							attIdx = context.getAttribute("", "dotted");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							attIdx = context.getAttribute("",
									"possessiveSuffix");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							attIdx = context.getAttribute("", "script");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							attIdx = context.getAttribute("", "transliterated");
							if (attIdx >= 0) {
								context.consumeAttribute(attIdx);
								context.getCurrentHandler().text(value);
								return;
							}
							break;
						}
					} catch (java.lang.RuntimeException e) {
						handleUnexpectedTextException(value, e);
					}
					break;
				}
			}

			@Override
			public void leaveAttribute(java.lang.String ___uri,
					java.lang.String ___local, java.lang.String ___qname)
					throws org.xml.sax.SAXException {
				int attIdx;
				outer: while (true) {
					switch (state) {
					case 3:
						revertToParentFromLeaveAttribute(___uri, ___local,
								___qname);
						return;
					case 1:
						attIdx = context.getAttribute("", "dotted");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "possessiveSuffix");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "script");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "transliterated");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveAttribute(___uri,
									___local, ___qname);
							return;
						}
						break;
					}
					super.leaveAttribute(___uri, ___local, ___qname);
					break;
				}
			}

			@Override
			public void leaveElement(java.lang.String ___uri,
					java.lang.String ___local, java.lang.String ___qname)
					throws org.xml.sax.SAXException {
				int attIdx;
				outer: while (true) {
					switch (state) {
					case 3:
						revertToParentFromLeaveElement(___uri, ___local,
								___qname);
						return;
					case 2:
						if (("replace" == ___local) && ("" == ___uri)) {
							context.popAttributes();
							state = 3;
							return;
						}
						break;
					case 1:
						attIdx = context.getAttribute("", "dotted");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "possessiveSuffix");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "script");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						attIdx = context.getAttribute("", "transliterated");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().leaveElement(___uri,
									___local, ___qname);
							return;
						}
						break;
					}
					super.leaveElement(___uri, ___local, ___qname);
					break;
				}
			}

			@Override
			public java.lang.Object owner() {
				return mila.generated.impl.AdverbLexiconTypeImpl.ReplaceImpl.this;
			}

		}

		public final static java.lang.Class version = (mila.generated.impl.JAXBVersion.class);

		private static com.sun.msv.grammar.Grammar schemaFragment;

		private final static java.lang.Class PRIMARY_INTERFACE_CLASS() {
			return (mila.generated.AdverbLexiconType.Replace.class);
		}

		@Override
		public java.lang.String ____jaxb_ri____getLocalName() {
			return "replace";
		}

		@Override
		public java.lang.String ____jaxb_ri____getNamespaceURI() {
			return "";
		}

		@Override
		public com.sun.msv.verifier.DocumentDeclaration createRawValidator() {
			if (schemaFragment == null) {
				schemaFragment = com.sun.xml.bind.validator.SchemaDeserializer
						.deserialize(("\u00ac\u00ed\u0000\u0005sr\u0000\'com.sun.msv.grammar.trex.ElementPattern\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000"
								+ "\tnameClasst\u0000\u001fLcom/sun/msv/grammar/NameClass;xr\u0000\u001ecom.sun.msv."
								+ "grammar.ElementExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002Z\u0000\u001aignoreUndeclaredAttributesL\u0000"
								+ "\fcontentModelt\u0000 Lcom/sun/msv/grammar/Expression;xr\u0000\u001ecom.sun."
								+ "msv.grammar.Expression\u00f8\u0018\u0082\u00e8N5~O\u0002\u0000\u0002L\u0000\u0013epsilonReducibilityt\u0000\u0013Lj"
								+ "ava/lang/Boolean;L\u0000\u000bexpandedExpq\u0000~\u0000\u0003xppp\u0000sr\u0000\u001fcom.sun.msv.gra"
								+ "mmar.SequenceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.sun.msv.grammar.BinaryExp"
								+ "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0004exp1q\u0000~\u0000\u0003L\u0000\u0004exp2q\u0000~\u0000\u0003xq\u0000~\u0000\u0004ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007pps"
								+ "q\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsr\u0000\u001bcom.sun.msv.grammar.DataExp\u0000\u0000\u0000\u0000\u0000\u0000"
								+ "\u0000\u0001\u0002\u0000\u0003L\u0000\u0002dtt\u0000\u001fLorg/relaxng/datatype/Datatype;L\u0000\u0006exceptq\u0000~\u0000\u0003L\u0000"
								+ "\u0004namet\u0000\u001dLcom/sun/msv/util/StringPair;xq\u0000~\u0000\u0004ppsr\u0000\"com.sun.msv"
								+ ".datatype.xsd.TokenType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000#com.sun.msv.datatype.x"
								+ "sd.StringType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001Z\u0000\risAlwaysValidxr\u0000*com.sun.msv.data"
								+ "type.xsd.BuiltinAtomicType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000%com.sun.msv.datatyp"
								+ "e.xsd.ConcreteType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\'com.sun.msv.datatype.xsd.XS"
								+ "DatatypeImpl\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\fnamespaceUrit\u0000\u0012Ljava/lang/String;L"
								+ "\u0000\btypeNameq\u0000~\u0000\u0018L\u0000\nwhiteSpacet\u0000.Lcom/sun/msv/datatype/xsd/Whi"
								+ "teSpaceProcessor;xpt\u0000 http://www.w3.org/2001/XMLSchemat\u0000\u0005tok"
								+ "ensr\u00005com.sun.msv.datatype.xsd.WhiteSpaceProcessor$Collapse\u0000"
								+ "\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000,com.sun.msv.datatype.xsd.WhiteSpaceProcessor\u0000\u0000"
								+ "\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xp\u0001sr\u00000com.sun.msv.grammar.Expression$NullSetExpres"
								+ "sion\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0004ppsr\u0000\u001bcom.sun.msv.util.StringPair\u00d0t\u001ejB\u008f"
								+ "\u008d\u00a0\u0002\u0000\u0002L\u0000\tlocalNameq\u0000~\u0000\u0018L\u0000\fnamespaceURIq\u0000~\u0000\u0018xpq\u0000~\u0000\u001cq\u0000~\u0000\u001bsr\u0000\u001dco"
								+ "m.sun.msv.grammar.ChoiceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\bppsr\u0000 com.sun.ms"
								+ "v.grammar.AttributeExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0003expq\u0000~\u0000\u0003L\u0000\tnameClassq\u0000~\u0000"
								+ "\u0001xq\u0000~\u0000\u0004sr\u0000\u0011java.lang.Boolean\u00cd r\u0080\u00d5\u009c\u00fa\u00ee\u0002\u0000\u0001Z\u0000\u0005valuexp\u0000pq\u0000~\u0000\u0012sr\u0000#"
								+ "com.sun.msv.grammar.SimpleNameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\tlocalNameq\u0000"
								+ "~\u0000\u0018L\u0000\fnamespaceURIq\u0000~\u0000\u0018xr\u0000\u001dcom.sun.msv.grammar.NameClass\u0000\u0000\u0000\u0000"
								+ "\u0000\u0000\u0000\u0001\u0002\u0000\u0000xpt\u0000\u0006dottedt\u0000\u0000sr\u00000com.sun.msv.grammar.Expression$Epsi"
								+ "lonExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0004sq\u0000~\u0000(\u0001q\u0000~\u00000sq\u0000~\u0000$ppsq\u0000~\u0000&q\u0000~\u0000"
								+ ")psq\u0000~\u0000\u000fppsr\u0000)com.sun.msv.datatype.xsd.EnumerationFacet\u0000\u0000\u0000\u0000\u0000"
								+ "\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\u0006valuest\u0000\u000fLjava/util/Set;xr\u00009com.sun.msv.datatype.xs"
								+ "d.DataTypeWithValueConstraintFacet\"\u00a7Ro\u00ca\u00c7\u008aT\u0002\u0000\u0000xr\u0000*com.sun.msv"
								+ ".datatype.xsd.DataTypeWithFacet\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0005Z\u0000\fisFacetFixedZ\u0000\u0012"
								+ "needValueCheckFlagL\u0000\bbaseTypet\u0000)Lcom/sun/msv/datatype/xsd/XS"
								+ "DatatypeImpl;L\u0000\fconcreteTypet\u0000\'Lcom/sun/msv/datatype/xsd/Con"
								+ "creteType;L\u0000\tfacetNameq\u0000~\u0000\u0018xq\u0000~\u0000\u0017q\u0000~\u0000.t\u0000\u0007PGNTypeq\u0000~\u0000\u001f\u0000\u0000q\u0000~\u0000\u001a"
								+ "q\u0000~\u0000\u001at\u0000\u000benumerationsr\u0000\u0011java.util.HashSet\u00baD\u0085\u0095\u0096\u00b8\u00b74\u0003\u0000\u0000xpw\f\u0000\u0000\u0000 ?"
								+ "@\u0000\u0000\u0000\u0000\u0000\u0013t\u0000\t123p/M/Sgt\u0000\u00072p/M/Plt\u0000\u00073p/M/Sgt\u0000\b1p/MF/Sgt\u0000\t123p/M/"
								+ "Plt\u0000\b2p/MF/Plt\u0000\u00072p/M/Sgt\u0000\u00071p/F/Sgt\u0000\b3p/MF/Plt\u0000\u00073p/F/Plt\u0000\u00071p/"
								+ "M/Sgt\u0000\u000bunspecifiedt\u0000\u00072p/F/Plt\u0000\t123p/F/Plt\u0000\u00073p/M/Plt\u0000\u00073p/F/Sg"
								+ "t\u0000\t123p/F/Sgt\u0000\b1p/MF/Plt\u0000\u00072p/F/Sgxq\u0000~\u0000!sq\u0000~\u0000\"q\u0000~\u0000<q\u0000~\u0000.sq\u0000~\u0000"
								+ "*t\u0000\u0010possessiveSuffixq\u0000~\u0000.q\u0000~\u00000sq\u0000~\u0000$ppsq\u0000~\u0000&q\u0000~\u0000)psq\u0000~\u0000\u000fppsq"
								+ "\u0000~\u00005q\u0000~\u0000.t\u0000\nScriptTypeq\u0000~\u0000\u001f\u0000\u0000q\u0000~\u0000\u001aq\u0000~\u0000\u001aq\u0000~\u0000=sq\u0000~\u0000>w\f\u0000\u0000\u0000\u0010?@\u0000\u0000"
								+ "\u0000\u0000\u0000\u0004t\u0000\u0004typot\u0000\u0006formalt\u0000\u0005slangt\u0000\ncolloquialxq\u0000~\u0000!sq\u0000~\u0000\"q\u0000~\u0000Zq\u0000"
								+ "~\u0000.sq\u0000~\u0000*t\u0000\u0006scriptq\u0000~\u0000.q\u0000~\u00000sq\u0000~\u0000&ppq\u0000~\u0000\u0012sq\u0000~\u0000*t\u0000\u000etransliter"
								+ "atedq\u0000~\u0000.sq\u0000~\u0000&ppq\u0000~\u0000\u0012sq\u0000~\u0000*t\u0000\bundottedq\u0000~\u0000.sq\u0000~\u0000$ppsq\u0000~\u0000&q\u0000"
								+ "~\u0000)psq\u0000~\u0000\u000fppsr\u0000\"com.sun.msv.datatype.xsd.QnameType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000"
								+ "\u0000xq\u0000~\u0000\u0015q\u0000~\u0000\u001bt\u0000\u0005QNameq\u0000~\u0000\u001fq\u0000~\u0000!sq\u0000~\u0000\"q\u0000~\u0000nq\u0000~\u0000\u001bsq\u0000~\u0000*t\u0000\u0004typet"
								+ "\u0000)http://www.w3.org/2001/XMLSchema-instanceq\u0000~\u00000sq\u0000~\u0000*t\u0000\u0007rep"
								+ "laceq\u0000~\u0000.sr\u0000\"com.sun.msv.grammar.ExpressionPool\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000"
								+ "\bexpTablet\u0000/Lcom/sun/msv/grammar/ExpressionPool$ClosedHash;x"
								+ "psr\u0000-com.sun.msv.grammar.ExpressionPool$ClosedHash\u00d7j\u00d0N\u00ef\u00e8\u00ed\u001c\u0003\u0000"
								+ "\u0003I\u0000\u0005countB\u0000\rstreamVersionL\u0000\u0006parentt\u0000$Lcom/sun/msv/grammar/Ex"
								+ "pressionPool;xp\u0000\u0000\u0000\n\u0001pq\u0000~\u0000iq\u0000~\u0000\u000eq\u0000~\u0000Vq\u0000~\u0000\u000bq\u0000~\u0000\rq\u0000~\u0000%q\u0000~\u0000\tq\u0000~\u0000"
								+ "\nq\u0000~\u0000\fq\u0000~\u00002x"));
			}
			return new com.sun.msv.verifier.regexp.REDocumentDeclaration(
					schemaFragment);
		}

		@Override
		public mila.generated.impl.runtime.UnmarshallingEventHandler createUnmarshaller(
				mila.generated.impl.runtime.UnmarshallingContext context) {
			return new mila.generated.impl.AdverbLexiconTypeImpl.ReplaceImpl.Unmarshaller(
					context);
		}

		@Override
		public java.lang.Class getPrimaryInterface() {
			return (mila.generated.AdverbLexiconType.Replace.class);
		}

		@Override
		public void serializeAttributes(
				mila.generated.impl.runtime.XMLSerializer context)
				throws org.xml.sax.SAXException {
		}

		@Override
		public void serializeBody(mila.generated.impl.runtime.XMLSerializer context)
				throws org.xml.sax.SAXException {
			context.startElement("", "replace");
			super.serializeURIs(context);
			context.endNamespaceDecls();
			super.serializeAttributes(context);
			context.endAttributes();
			super.serializeBody(context);
			context.endElement();
		}

		@Override
		public void serializeURIs(mila.generated.impl.runtime.XMLSerializer context)
				throws org.xml.sax.SAXException {
		}

	}

	public class Unmarshaller extends
			mila.generated.impl.runtime.AbstractUnmarshallingEventHandlerImpl {

		public Unmarshaller(mila.generated.impl.runtime.UnmarshallingContext context) {
			super(context, "--------------------------");
		}

		protected Unmarshaller(
				mila.generated.impl.runtime.UnmarshallingContext context,
				int startState) {
			this(context);
			state = startState;
		}

		private void eatText1(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_ModifiesAdjective = com.sun.xml.bind.WhiteSpaceProcessor
						.collapse(value);
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		private void eatText2(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_Position = com.sun.xml.bind.WhiteSpaceProcessor
						.collapse(value);
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		private void eatText3(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_InflectionBase = com.sun.xml.bind.WhiteSpaceProcessor
						.collapse(value);
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		private void eatText4(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_ModifiesVerb = com.sun.xml.bind.WhiteSpaceProcessor
						.collapse(value);
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		private void eatText5(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_ModifiesAdverb = com.sun.xml.bind.WhiteSpaceProcessor
						.collapse(value);
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		private void eatText6(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_Interrogative = javax.xml.bind.DatatypeConverter
						.parseBoolean(com.sun.xml.bind.WhiteSpaceProcessor
								.collapse(value));
				has_Interrogative = true;
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		private void eatText7(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_Type = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		private void eatText8(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_Inflect = javax.xml.bind.DatatypeConverter
						.parseBoolean(com.sun.xml.bind.WhiteSpaceProcessor
								.collapse(value));
				has_Inflect = true;
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		@Override
		public void enterAttribute(java.lang.String ___uri,
				java.lang.String ___local, java.lang.String ___qname)
				throws org.xml.sax.SAXException {
			int attIdx;
			outer: while (true) {
				switch (state) {
				case 9:
					if (("modifiesAdjective" == ___local) && ("" == ___uri)) {
						state = 10;
						return;
					}
					state = 12;
					continue outer;
				case 18:
					if (("position" == ___local) && ("" == ___uri)) {
						state = 19;
						return;
					}
					state = 21;
					continue outer;
				case 25:
					revertToParentFromEnterAttribute(___uri, ___local, ___qname);
					return;
				case 3:
					if (("inflectionBase" == ___local) && ("" == ___uri)) {
						state = 4;
						return;
					}
					state = 6;
					continue outer;
				case 15:
					if (("modifiesVerb" == ___local) && ("" == ___uri)) {
						state = 16;
						return;
					}
					state = 18;
					continue outer;
				case 12:
					if (("modifiesAdverb" == ___local) && ("" == ___uri)) {
						state = 13;
						return;
					}
					state = 15;
					continue outer;
				case 6:
					if (("interrogative" == ___local) && ("" == ___uri)) {
						state = 7;
						return;
					}
					state = 9;
					continue outer;
				case 21:
					if (("type" == ___local) && ("" == ___uri)) {
						state = 22;
						return;
					}
					state = 24;
					continue outer;
				case 24:
					state = 25;
					continue outer;
				case 0:
					if (("inflect" == ___local) && ("" == ___uri)) {
						state = 1;
						return;
					}
					state = 3;
					continue outer;
				}
				super.enterAttribute(___uri, ___local, ___qname);
				break;
			}
		}

		@Override
		public void enterElement(java.lang.String ___uri,
				java.lang.String ___local, java.lang.String ___qname,
				org.xml.sax.Attributes __atts) throws org.xml.sax.SAXException {
			int attIdx;
			outer: while (true) {
				switch (state) {
				case 9:
					attIdx = context.getAttribute("", "modifiesAdjective");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 12;
						eatText1(v);
						continue outer;
					}
					state = 12;
					continue outer;
				case 18:
					attIdx = context.getAttribute("", "position");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 21;
						eatText2(v);
						continue outer;
					}
					state = 21;
					continue outer;
				case 25:
					if (("add" == ___local) && ("" == ___uri)) {
						_getAddOrReplaceOrRemove()
								.add(spawnChildFromEnterElement(
										(mila.generated.impl.AdverbLexiconTypeImpl.AddImpl.class),
										25, ___uri, ___local, ___qname, __atts));
						return;
					}
					if (("replace" == ___local) && ("" == ___uri)) {
						_getAddOrReplaceOrRemove()
								.add(spawnChildFromEnterElement(
										(mila.generated.impl.AdverbLexiconTypeImpl.ReplaceImpl.class),
										25, ___uri, ___local, ___qname, __atts));
						return;
					}
					if (("remove" == ___local) && ("" == ___uri)) {
						_getAddOrReplaceOrRemove()
								.add(spawnChildFromEnterElement(
										(mila.generated.impl.AdverbLexiconTypeImpl.RemoveImpl.class),
										25, ___uri, ___local, ___qname, __atts));
						return;
					}
					revertToParentFromEnterElement(___uri, ___local, ___qname,
							__atts);
					return;
				case 3:
					attIdx = context.getAttribute("", "inflectionBase");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 6;
						eatText3(v);
						continue outer;
					}
					state = 6;
					continue outer;
				case 15:
					attIdx = context.getAttribute("", "modifiesVerb");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 18;
						eatText4(v);
						continue outer;
					}
					state = 18;
					continue outer;
				case 12:
					attIdx = context.getAttribute("", "modifiesAdverb");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 15;
						eatText5(v);
						continue outer;
					}
					state = 15;
					continue outer;
				case 6:
					attIdx = context.getAttribute("", "interrogative");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 9;
						eatText6(v);
						continue outer;
					}
					state = 9;
					continue outer;
				case 21:
					attIdx = context.getAttribute("", "type");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 24;
						eatText7(v);
						continue outer;
					}
					state = 24;
					continue outer;
				case 24:
					if (("add" == ___local) && ("" == ___uri)) {
						_getAddOrReplaceOrRemove()
								.add(spawnChildFromEnterElement(
										(mila.generated.impl.AdverbLexiconTypeImpl.AddImpl.class),
										25, ___uri, ___local, ___qname, __atts));
						return;
					}
					if (("replace" == ___local) && ("" == ___uri)) {
						_getAddOrReplaceOrRemove()
								.add(spawnChildFromEnterElement(
										(mila.generated.impl.AdverbLexiconTypeImpl.ReplaceImpl.class),
										25, ___uri, ___local, ___qname, __atts));
						return;
					}
					if (("remove" == ___local) && ("" == ___uri)) {
						_getAddOrReplaceOrRemove()
								.add(spawnChildFromEnterElement(
										(mila.generated.impl.AdverbLexiconTypeImpl.RemoveImpl.class),
										25, ___uri, ___local, ___qname, __atts));
						return;
					}
					state = 25;
					continue outer;
				case 0:
					attIdx = context.getAttribute("", "inflect");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 3;
						eatText8(v);
						continue outer;
					}
					state = 3;
					continue outer;
				}
				super.enterElement(___uri, ___local, ___qname, __atts);
				break;
			}
		}

		@Override
		public void handleText(final java.lang.String value)
				throws org.xml.sax.SAXException {
			int attIdx;
			outer: while (true) {
				try {
					switch (state) {
					case 22:
						state = 23;
						eatText7(value);
						return;
					case 9:
						attIdx = context.getAttribute("", "modifiesAdjective");
						if (attIdx >= 0) {
							final java.lang.String v = context
									.eatAttribute(attIdx);
							state = 12;
							eatText1(v);
							continue outer;
						}
						state = 12;
						continue outer;
					case 18:
						attIdx = context.getAttribute("", "position");
						if (attIdx >= 0) {
							final java.lang.String v = context
									.eatAttribute(attIdx);
							state = 21;
							eatText2(v);
							continue outer;
						}
						state = 21;
						continue outer;
					case 16:
						state = 17;
						eatText4(value);
						return;
					case 4:
						state = 5;
						eatText3(value);
						return;
					case 25:
						revertToParentFromText(value);
						return;
					case 3:
						attIdx = context.getAttribute("", "inflectionBase");
						if (attIdx >= 0) {
							final java.lang.String v = context
									.eatAttribute(attIdx);
							state = 6;
							eatText3(v);
							continue outer;
						}
						state = 6;
						continue outer;
					case 15:
						attIdx = context.getAttribute("", "modifiesVerb");
						if (attIdx >= 0) {
							final java.lang.String v = context
									.eatAttribute(attIdx);
							state = 18;
							eatText4(v);
							continue outer;
						}
						state = 18;
						continue outer;
					case 7:
						state = 8;
						eatText6(value);
						return;
					case 12:
						attIdx = context.getAttribute("", "modifiesAdverb");
						if (attIdx >= 0) {
							final java.lang.String v = context
									.eatAttribute(attIdx);
							state = 15;
							eatText5(v);
							continue outer;
						}
						state = 15;
						continue outer;
					case 6:
						attIdx = context.getAttribute("", "interrogative");
						if (attIdx >= 0) {
							final java.lang.String v = context
									.eatAttribute(attIdx);
							state = 9;
							eatText6(v);
							continue outer;
						}
						state = 9;
						continue outer;
					case 1:
						state = 2;
						eatText8(value);
						return;
					case 10:
						state = 11;
						eatText1(value);
						return;
					case 13:
						state = 14;
						eatText5(value);
						return;
					case 21:
						attIdx = context.getAttribute("", "type");
						if (attIdx >= 0) {
							final java.lang.String v = context
									.eatAttribute(attIdx);
							state = 24;
							eatText7(v);
							continue outer;
						}
						state = 24;
						continue outer;
					case 24:
						state = 25;
						continue outer;
					case 0:
						attIdx = context.getAttribute("", "inflect");
						if (attIdx >= 0) {
							final java.lang.String v = context
									.eatAttribute(attIdx);
							state = 3;
							eatText8(v);
							continue outer;
						}
						state = 3;
						continue outer;
					case 19:
						state = 20;
						eatText2(value);
						return;
					}
				} catch (java.lang.RuntimeException e) {
					handleUnexpectedTextException(value, e);
				}
				break;
			}
		}

		@Override
		public void leaveAttribute(java.lang.String ___uri,
				java.lang.String ___local, java.lang.String ___qname)
				throws org.xml.sax.SAXException {
			int attIdx;
			outer: while (true) {
				switch (state) {
				case 9:
					attIdx = context.getAttribute("", "modifiesAdjective");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 12;
						eatText1(v);
						continue outer;
					}
					state = 12;
					continue outer;
				case 18:
					attIdx = context.getAttribute("", "position");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 21;
						eatText2(v);
						continue outer;
					}
					state = 21;
					continue outer;
				case 17:
					if (("modifiesVerb" == ___local) && ("" == ___uri)) {
						state = 18;
						return;
					}
					break;
				case 23:
					if (("type" == ___local) && ("" == ___uri)) {
						state = 24;
						return;
					}
					break;
				case 25:
					revertToParentFromLeaveAttribute(___uri, ___local, ___qname);
					return;
				case 3:
					attIdx = context.getAttribute("", "inflectionBase");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 6;
						eatText3(v);
						continue outer;
					}
					state = 6;
					continue outer;
				case 15:
					attIdx = context.getAttribute("", "modifiesVerb");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 18;
						eatText4(v);
						continue outer;
					}
					state = 18;
					continue outer;
				case 5:
					if (("inflectionBase" == ___local) && ("" == ___uri)) {
						state = 6;
						return;
					}
					break;
				case 11:
					if (("modifiesAdjective" == ___local) && ("" == ___uri)) {
						state = 12;
						return;
					}
					break;
				case 12:
					attIdx = context.getAttribute("", "modifiesAdverb");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 15;
						eatText5(v);
						continue outer;
					}
					state = 15;
					continue outer;
				case 6:
					attIdx = context.getAttribute("", "interrogative");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 9;
						eatText6(v);
						continue outer;
					}
					state = 9;
					continue outer;
				case 8:
					if (("interrogative" == ___local) && ("" == ___uri)) {
						state = 9;
						return;
					}
					break;
				case 14:
					if (("modifiesAdverb" == ___local) && ("" == ___uri)) {
						state = 15;
						return;
					}
					break;
				case 2:
					if (("inflect" == ___local) && ("" == ___uri)) {
						state = 3;
						return;
					}
					break;
				case 21:
					attIdx = context.getAttribute("", "type");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 24;
						eatText7(v);
						continue outer;
					}
					state = 24;
					continue outer;
				case 24:
					state = 25;
					continue outer;
				case 0:
					attIdx = context.getAttribute("", "inflect");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 3;
						eatText8(v);
						continue outer;
					}
					state = 3;
					continue outer;
				case 20:
					if (("position" == ___local) && ("" == ___uri)) {
						state = 21;
						return;
					}
					break;
				}
				super.leaveAttribute(___uri, ___local, ___qname);
				break;
			}
		}

		@Override
		public void leaveElement(java.lang.String ___uri,
				java.lang.String ___local, java.lang.String ___qname)
				throws org.xml.sax.SAXException {
			int attIdx;
			outer: while (true) {
				switch (state) {
				case 9:
					attIdx = context.getAttribute("", "modifiesAdjective");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 12;
						eatText1(v);
						continue outer;
					}
					state = 12;
					continue outer;
				case 18:
					attIdx = context.getAttribute("", "position");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 21;
						eatText2(v);
						continue outer;
					}
					state = 21;
					continue outer;
				case 25:
					revertToParentFromLeaveElement(___uri, ___local, ___qname);
					return;
				case 3:
					attIdx = context.getAttribute("", "inflectionBase");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 6;
						eatText3(v);
						continue outer;
					}
					state = 6;
					continue outer;
				case 15:
					attIdx = context.getAttribute("", "modifiesVerb");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 18;
						eatText4(v);
						continue outer;
					}
					state = 18;
					continue outer;
				case 12:
					attIdx = context.getAttribute("", "modifiesAdverb");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 15;
						eatText5(v);
						continue outer;
					}
					state = 15;
					continue outer;
				case 6:
					attIdx = context.getAttribute("", "interrogative");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 9;
						eatText6(v);
						continue outer;
					}
					state = 9;
					continue outer;
				case 21:
					attIdx = context.getAttribute("", "type");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 24;
						eatText7(v);
						continue outer;
					}
					state = 24;
					continue outer;
				case 24:
					state = 25;
					continue outer;
				case 0:
					attIdx = context.getAttribute("", "inflect");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 3;
						eatText8(v);
						continue outer;
					}
					state = 3;
					continue outer;
				}
				super.leaveElement(___uri, ___local, ___qname);
				break;
			}
		}

		@Override
		public java.lang.Object owner() {
			return mila.generated.impl.AdverbLexiconTypeImpl.this;
		}

	}

	protected java.lang.String _Type;
	protected java.lang.String _ModifiesAdverb;
	protected java.lang.String _ModifiesVerb;
	protected java.lang.String _Position;
	protected boolean has_Interrogative;
	protected boolean _Interrogative;
	protected boolean has_Inflect;
	protected boolean _Inflect;
	protected java.lang.String _InflectionBase;

	protected com.sun.xml.bind.util.ListImpl _AddOrReplaceOrRemove;

	protected java.lang.String _ModifiesAdjective;

	public final static java.lang.Class version = (mila.generated.impl.JAXBVersion.class);

	private static com.sun.msv.grammar.Grammar schemaFragment;

	private final static java.lang.Class PRIMARY_INTERFACE_CLASS() {
		return (mila.generated.AdverbLexiconType.class);
	}

	protected com.sun.xml.bind.util.ListImpl _getAddOrReplaceOrRemove() {
		if (_AddOrReplaceOrRemove == null) {
			_AddOrReplaceOrRemove = new com.sun.xml.bind.util.ListImpl(
					new java.util.ArrayList());
		}
		return _AddOrReplaceOrRemove;
	}

	@Override
	public com.sun.msv.verifier.DocumentDeclaration createRawValidator() {
		if (schemaFragment == null) {
			schemaFragment = com.sun.xml.bind.validator.SchemaDeserializer
					.deserialize(("\u00ac\u00ed\u0000\u0005sr\u0000\u001fcom.sun.msv.grammar.SequenceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.su"
							+ "n.msv.grammar.BinaryExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0004exp1t\u0000 Lcom/sun/msv/gra"
							+ "mmar/Expression;L\u0000\u0004exp2q\u0000~\u0000\u0002xr\u0000\u001ecom.sun.msv.grammar.Expressi"
							+ "on\u00f8\u0018\u0082\u00e8N5~O\u0002\u0000\u0002L\u0000\u0013epsilonReducibilityt\u0000\u0013Ljava/lang/Boolean;L\u0000\u000b"
							+ "expandedExpq\u0000~\u0000\u0002xpppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000pp"
							+ "sq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsr\u0000 com.sun.msv.grammar.OneOrMoreExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001"
							+ "\u0002\u0000\u0000xr\u0000\u001ccom.sun.msv.grammar.UnaryExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\u0003expq\u0000~\u0000\u0002xq\u0000"
							+ "~\u0000\u0003ppsr\u0000\u001dcom.sun.msv.grammar.ChoiceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0001ppsq\u0000"
							+ "~\u0000\u0010ppsq\u0000~\u0000\u0010ppsq\u0000~\u0000\rsr\u0000\u0011java.lang.Boolean\u00cd r\u0080\u00d5\u009c\u00fa\u00ee\u0002\u0000\u0001Z\u0000\u0005valuex"
							+ "p\u0000psr\u0000\'com.sun.msv.grammar.trex.ElementPattern\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\t"
							+ "nameClasst\u0000\u001fLcom/sun/msv/grammar/NameClass;xr\u0000\u001ecom.sun.msv.g"
							+ "rammar.ElementExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002Z\u0000\u001aignoreUndeclaredAttributesL\u0000\f"
							+ "contentModelq\u0000~\u0000\u0002xq\u0000~\u0000\u0003q\u0000~\u0000\u0016p\u0000sq\u0000~\u0000\u0010ppsq\u0000~\u0000\rq\u0000~\u0000\u0016psr\u0000 com.su"
							+ "n.msv.grammar.AttributeExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0003expq\u0000~\u0000\u0002L\u0000\tnameClass"
							+ "q\u0000~\u0000\u0018xq\u0000~\u0000\u0003q\u0000~\u0000\u0016psr\u00002com.sun.msv.grammar.Expression$AnyStrin"
							+ "gExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003sq\u0000~\u0000\u0015\u0001q\u0000~\u0000 sr\u0000 com.sun.msv.gram"
							+ "mar.AnyNameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.sun.msv.grammar.NameClass"
							+ "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xpsr\u00000com.sun.msv.grammar.Expression$EpsilonExpre"
							+ "ssion\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003q\u0000~\u0000!q\u0000~\u0000&sr\u0000#com.sun.msv.grammar.Simp"
							+ "leNameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\tlocalNamet\u0000\u0012Ljava/lang/String;L\u0000\fna"
							+ "mespaceURIq\u0000~\u0000(xq\u0000~\u0000#t\u0000\u001fgenerated.AdverbLexiconType.Addt\u0000+ht"
							+ "tp://java.sun.com/jaxb/xjc/dummy-elementsq\u0000~\u0000&sq\u0000~\u0000\rppsq\u0000~\u0000\u0017"
							+ "pp\u0000sq\u0000~\u0000\u0010ppsq\u0000~\u0000\rq\u0000~\u0000\u0016psq\u0000~\u0000\u001dq\u0000~\u0000\u0016pq\u0000~\u0000 q\u0000~\u0000$q\u0000~\u0000&sq\u0000~\u0000\'t\u0000#g"
							+ "enerated.AdverbLexiconType.Replaceq\u0000~\u0000+sq\u0000~\u0000\rppsq\u0000~\u0000\u0017pp\u0000sq\u0000~"
							+ "\u0000\u0010ppsq\u0000~\u0000\rq\u0000~\u0000\u0016psq\u0000~\u0000\u001dq\u0000~\u0000\u0016pq\u0000~\u0000 q\u0000~\u0000$q\u0000~\u0000&sq\u0000~\u0000\'t\u0000\"generate"
							+ "d.AdverbLexiconType.Removeq\u0000~\u0000+sq\u0000~\u0000\u0010ppsq\u0000~\u0000\u001dq\u0000~\u0000\u0016psr\u0000\u001bcom.s"
							+ "un.msv.grammar.DataExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\u0002dtt\u0000\u001fLorg/relaxng/dataty"
							+ "pe/Datatype;L\u0000\u0006exceptq\u0000~\u0000\u0002L\u0000\u0004namet\u0000\u001dLcom/sun/msv/util/String"
							+ "Pair;xq\u0000~\u0000\u0003ppsr\u0000$com.sun.msv.datatype.xsd.BooleanType\u0000\u0000\u0000\u0000\u0000\u0000\u0000"
							+ "\u0001\u0002\u0000\u0000xr\u0000*com.sun.msv.datatype.xsd.BuiltinAtomicType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000"
							+ "\u0000xr\u0000%com.sun.msv.datatype.xsd.ConcreteType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\'com"
							+ ".sun.msv.datatype.xsd.XSDatatypeImpl\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\fnamespaceU"
							+ "riq\u0000~\u0000(L\u0000\btypeNameq\u0000~\u0000(L\u0000\nwhiteSpacet\u0000.Lcom/sun/msv/datatype"
							+ "/xsd/WhiteSpaceProcessor;xpt\u0000 http://www.w3.org/2001/XMLSche"
							+ "mat\u0000\u0007booleansr\u00005com.sun.msv.datatype.xsd.WhiteSpaceProcessor"
							+ "$Collapse\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000,com.sun.msv.datatype.xsd.WhiteSpaceP"
							+ "rocessor\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xpsr\u00000com.sun.msv.grammar.Expression$Null"
							+ "SetExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003ppsr\u0000\u001bcom.sun.msv.util.StringP"
							+ "air\u00d0t\u001ejB\u008f\u008d\u00a0\u0002\u0000\u0002L\u0000\tlocalNameq\u0000~\u0000(L\u0000\fnamespaceURIq\u0000~\u0000(xpq\u0000~\u0000Gq\u0000"
							+ "~\u0000Fsq\u0000~\u0000\'t\u0000\u0007inflectt\u0000\u0000q\u0000~\u0000&sq\u0000~\u0000\u0010ppsq\u0000~\u0000\u001dq\u0000~\u0000\u0016psq\u0000~\u0000<ppsr\u0000\"c"
							+ "om.sun.msv.datatype.xsd.TokenType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000#com.sun.msv."
							+ "datatype.xsd.StringType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001Z\u0000\risAlwaysValidxq\u0000~\u0000Aq\u0000~\u0000"
							+ "Ft\u0000\u0005tokenq\u0000~\u0000J\u0001q\u0000~\u0000Lsq\u0000~\u0000Mq\u0000~\u0000Xq\u0000~\u0000Fsq\u0000~\u0000\'t\u0000\u000einflectionBaseq"
							+ "\u0000~\u0000Qq\u0000~\u0000&sq\u0000~\u0000\u0010ppsq\u0000~\u0000\u001dq\u0000~\u0000\u0016pq\u0000~\u0000?sq\u0000~\u0000\'t\u0000\rinterrogativeq\u0000~\u0000"
							+ "Qq\u0000~\u0000&sq\u0000~\u0000\u0010ppsq\u0000~\u0000\u001dq\u0000~\u0000\u0016psq\u0000~\u0000<ppsr\u0000)com.sun.msv.datatype.x"
							+ "sd.EnumerationFacet\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\u0006valuest\u0000\u000fLjava/util/Set;xr\u0000"
							+ "9com.sun.msv.datatype.xsd.DataTypeWithValueConstraintFacet\"\u00a7"
							+ "Ro\u00ca\u00c7\u008aT\u0002\u0000\u0000xr\u0000*com.sun.msv.datatype.xsd.DataTypeWithFacet\u0000\u0000\u0000\u0000\u0000"
							+ "\u0000\u0000\u0001\u0002\u0000\u0005Z\u0000\fisFacetFixedZ\u0000\u0012needValueCheckFlagL\u0000\bbaseTypet\u0000)Lcom"
							+ "/sun/msv/datatype/xsd/XSDatatypeImpl;L\u0000\fconcreteTypet\u0000\'Lcom/"
							+ "sun/msv/datatype/xsd/ConcreteType;L\u0000\tfacetNameq\u0000~\u0000(xq\u0000~\u0000Cq\u0000~"
							+ "\u0000Qt\u0000\u000eThreeStateTypeq\u0000~\u0000J\u0000\u0000q\u0000~\u0000Wq\u0000~\u0000Wt\u0000\u000benumerationsr\u0000\u0011java.u"
							+ "til.HashSet\u00baD\u0085\u0095\u0096\u00b8\u00b74\u0003\u0000\u0000xpw\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\u0003t\u0000\u000bunspecifiedt\u0000\u0004truet"
							+ "\u0000\u0005falsexq\u0000~\u0000Lsq\u0000~\u0000Mq\u0000~\u0000jq\u0000~\u0000Qsq\u0000~\u0000\'t\u0000\u0011modifiesAdjectiveq\u0000~\u0000Q"
							+ "q\u0000~\u0000&sq\u0000~\u0000\u0010ppsq\u0000~\u0000\u001dq\u0000~\u0000\u0016pq\u0000~\u0000bsq\u0000~\u0000\'t\u0000\u000emodifiesAdverbq\u0000~\u0000Qq\u0000"
							+ "~\u0000&sq\u0000~\u0000\u0010ppsq\u0000~\u0000\u001dq\u0000~\u0000\u0016pq\u0000~\u0000bsq\u0000~\u0000\'t\u0000\fmodifiesVerbq\u0000~\u0000Qq\u0000~\u0000&s"
							+ "q\u0000~\u0000\u0010ppsq\u0000~\u0000\u001dq\u0000~\u0000\u0016psq\u0000~\u0000<ppsq\u0000~\u0000cq\u0000~\u0000Qt\u0000\fPositionTypeq\u0000~\u0000J\u0000\u0000"
							+ "q\u0000~\u0000Wq\u0000~\u0000Wq\u0000~\u0000ksq\u0000~\u0000lw\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\u0004t\u0000\u000bunspecifiedt\u0000\fpre and "
							+ "postt\u0000\u0004postt\u0000\u0003prexq\u0000~\u0000Lsq\u0000~\u0000Mq\u0000~\u0000\u0080q\u0000~\u0000Qsq\u0000~\u0000\'t\u0000\bpositionq\u0000~\u0000"
							+ "Qq\u0000~\u0000&sq\u0000~\u0000\u0010ppsq\u0000~\u0000\u001dq\u0000~\u0000\u0016psq\u0000~\u0000<ppsq\u0000~\u0000cq\u0000~\u0000Qt\u0000\nAdverbTypeq\u0000"
							+ "~\u0000J\u0000\u0000q\u0000~\u0000Wq\u0000~\u0000Wq\u0000~\u0000ksq\u0000~\u0000lw\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\u0002t\u0000\u000bunspecifiedt\u0000\u0005foc"
							+ "usxq\u0000~\u0000Lsq\u0000~\u0000Mq\u0000~\u0000\u008dq\u0000~\u0000Qsq\u0000~\u0000\'t\u0000\u0004typeq\u0000~\u0000Qq\u0000~\u0000&sr\u0000\"com.sun.m"
							+ "sv.grammar.ExpressionPool\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\bexpTablet\u0000/Lcom/sun/m"
							+ "sv/grammar/ExpressionPool$ClosedHash;xpsr\u0000-com.sun.msv.gramm"
							+ "ar.ExpressionPool$ClosedHash\u00d7j\u00d0N\u00ef\u00e8\u00ed\u001c\u0003\u0000\u0003I\u0000\u0005countB\u0000\rstreamVers"
							+ "ionL\u0000\u0006parentt\u0000$Lcom/sun/msv/grammar/ExpressionPool;xp\u0000\u0000\u0000\u001d\u0001pq"
							+ "\u0000~\u0000\tq\u0000~\u0000\u001cq\u0000~\u0000/q\u0000~\u00006q\u0000~\u0000\u0089q\u0000~\u0000\u0012q\u0000~\u0000\u0006q\u0000~\u0000|q\u0000~\u0000\u0011q\u0000~\u0000xq\u0000~\u0000\u001bq\u0000~\u0000.q"
							+ "\u0000~\u00005q\u0000~\u0000tq\u0000~\u0000\fq\u0000~\u0000\bq\u0000~\u0000`q\u0000~\u0000\nq\u0000~\u0000Rq\u0000~\u0000\u000bq\u0000~\u0000\u0014q\u0000~\u0000,q\u0000~\u00003q\u0000~\u0000\\q"
							+ "\u0000~\u0000:q\u0000~\u0000\u000fq\u0000~\u0000\u0007q\u0000~\u0000\u0005q\u0000~\u0000\u0013x"));
		}
		return new com.sun.msv.verifier.regexp.REDocumentDeclaration(
				schemaFragment);
	}

	@Override
	public mila.generated.impl.runtime.UnmarshallingEventHandler createUnmarshaller(
			mila.generated.impl.runtime.UnmarshallingContext context) {
		return new mila.generated.impl.AdverbLexiconTypeImpl.Unmarshaller(context);
	}

	@Override
	public java.util.List getAddOrReplaceOrRemove() {
		return _getAddOrReplaceOrRemove();
	}

	@Override
	public java.lang.String getInflectionBase() {
		if (_InflectionBase == null) {
			return "";
		} else {
			return _InflectionBase;
		}
	}

	@Override
	public java.lang.String getModifiesAdjective() {
		if (_ModifiesAdjective == null) {
			return "unspecified";
		} else {
			return _ModifiesAdjective;
		}
	}

	@Override
	public java.lang.String getModifiesAdverb() {
		if (_ModifiesAdverb == null) {
			return "unspecified";
		} else {
			return _ModifiesAdverb;
		}
	}

	@Override
	public java.lang.String getModifiesVerb() {
		if (_ModifiesVerb == null) {
			return "unspecified";
		} else {
			return _ModifiesVerb;
		}
	}

	@Override
	public java.lang.String getPosition() {
		if (_Position == null) {
			return "unspecified";
		} else {
			return _Position;
		}
	}

	@Override
	public java.lang.Class getPrimaryInterface() {
		return (mila.generated.AdverbLexiconType.class);
	}

	@Override
	public java.lang.String getType() {
		if (_Type == null) {
			return "unspecified";
		} else {
			return _Type;
		}
	}

	@Override
	public boolean isInflect() {
		if (!has_Inflect) {
			return javax.xml.bind.DatatypeConverter
					.parseBoolean(com.sun.xml.bind.DatatypeConverterImpl
							.installHook("false"));
		} else {
			return _Inflect;
		}
	}

	@Override
	public boolean isInterrogative() {
		if (!has_Interrogative) {
			return javax.xml.bind.DatatypeConverter
					.parseBoolean(com.sun.xml.bind.DatatypeConverterImpl
							.installHook("false"));
		} else {
			return _Interrogative;
		}
	}

	@Override
	public void serializeAttributes(mila.generated.impl.runtime.XMLSerializer context)
			throws org.xml.sax.SAXException {
		int idx8 = 0;
		final int len8 = ((_AddOrReplaceOrRemove == null) ? 0
				: _AddOrReplaceOrRemove.size());
		if (has_Inflect) {
			context.startAttribute("", "inflect");
			try {
				context.text(
						javax.xml.bind.DatatypeConverter.printBoolean(_Inflect),
						"Inflect");
			} catch (java.lang.Exception e) {
				mila.generated.impl.runtime.Util.handlePrintConversionException(
						this, e, context);
			}
			context.endAttribute();
		}
		if (_InflectionBase != null) {
			context.startAttribute("", "inflectionBase");
			try {
				context.text(_InflectionBase, "InflectionBase");
			} catch (java.lang.Exception e) {
				mila.generated.impl.runtime.Util.handlePrintConversionException(
						this, e, context);
			}
			context.endAttribute();
		}
		if (has_Interrogative) {
			context.startAttribute("", "interrogative");
			try {
				context.text(javax.xml.bind.DatatypeConverter
						.printBoolean(_Interrogative), "Interrogative");
			} catch (java.lang.Exception e) {
				mila.generated.impl.runtime.Util.handlePrintConversionException(
						this, e, context);
			}
			context.endAttribute();
		}
		if (_ModifiesAdjective != null) {
			context.startAttribute("", "modifiesAdjective");
			try {
				context.text(_ModifiesAdjective, "ModifiesAdjective");
			} catch (java.lang.Exception e) {
				mila.generated.impl.runtime.Util.handlePrintConversionException(
						this, e, context);
			}
			context.endAttribute();
		}
		if (_ModifiesAdverb != null) {
			context.startAttribute("", "modifiesAdverb");
			try {
				context.text(_ModifiesAdverb, "ModifiesAdverb");
			} catch (java.lang.Exception e) {
				mila.generated.impl.runtime.Util.handlePrintConversionException(
						this, e, context);
			}
			context.endAttribute();
		}
		if (_ModifiesVerb != null) {
			context.startAttribute("", "modifiesVerb");
			try {
				context.text(_ModifiesVerb, "ModifiesVerb");
			} catch (java.lang.Exception e) {
				mila.generated.impl.runtime.Util.handlePrintConversionException(
						this, e, context);
			}
			context.endAttribute();
		}
		if (_Position != null) {
			context.startAttribute("", "position");
			try {
				context.text(_Position, "Position");
			} catch (java.lang.Exception e) {
				mila.generated.impl.runtime.Util.handlePrintConversionException(
						this, e, context);
			}
			context.endAttribute();
		}
		if (_Type != null) {
			context.startAttribute("", "type");
			try {
				context.text(_Type, "Type");
			} catch (java.lang.Exception e) {
				mila.generated.impl.runtime.Util.handlePrintConversionException(
						this, e, context);
			}
			context.endAttribute();
		}
		while (idx8 != len8) {
			while (idx8 != len8) {
				context.childAsAttributes(
						((com.sun.xml.bind.JAXBObject) _AddOrReplaceOrRemove
								.get(idx8++)), "AddOrReplaceOrRemove");
			}
		}
	}

	@Override
	public void serializeBody(mila.generated.impl.runtime.XMLSerializer context)
			throws org.xml.sax.SAXException {
		int idx8 = 0;
		final int len8 = ((_AddOrReplaceOrRemove == null) ? 0
				: _AddOrReplaceOrRemove.size());
		while (idx8 != len8) {
			while (idx8 != len8) {
				context.childAsBody(
						((com.sun.xml.bind.JAXBObject) _AddOrReplaceOrRemove
								.get(idx8++)), "AddOrReplaceOrRemove");
			}
		}
	}

	@Override
	public void serializeURIs(mila.generated.impl.runtime.XMLSerializer context)
			throws org.xml.sax.SAXException {
		int idx8 = 0;
		final int len8 = ((_AddOrReplaceOrRemove == null) ? 0
				: _AddOrReplaceOrRemove.size());
		while (idx8 != len8) {
			while (idx8 != len8) {
				context.childAsURIs(
						((com.sun.xml.bind.JAXBObject) _AddOrReplaceOrRemove
								.get(idx8++)), "AddOrReplaceOrRemove");
			}
		}
	}

	@Override
	public void setInflect(boolean value) {
		_Inflect = value;
		has_Inflect = true;
	}

	@Override
	public void setInflectionBase(java.lang.String value) {
		_InflectionBase = value;
	}

	@Override
	public void setInterrogative(boolean value) {
		_Interrogative = value;
		has_Interrogative = true;
	}

	@Override
	public void setModifiesAdjective(java.lang.String value) {
		_ModifiesAdjective = value;
	}

	@Override
	public void setModifiesAdverb(java.lang.String value) {
		_ModifiesAdverb = value;
	}

	@Override
	public void setModifiesVerb(java.lang.String value) {
		_ModifiesVerb = value;
	}

	@Override
	public void setPosition(java.lang.String value) {
		_Position = value;
	}

	@Override
	public void setType(java.lang.String value) {
		_Type = value;
	}

}
