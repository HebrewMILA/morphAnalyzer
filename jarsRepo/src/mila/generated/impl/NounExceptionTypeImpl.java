//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v1.0.5-b16-fcs 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2008.12.01 at 02:23:12 PM IST 
//

package mila.generated.impl;

public class NounExceptionTypeImpl implements mila.generated.NounExceptionType,
		com.sun.xml.bind.JAXBObject,
		mila.generated.impl.runtime.UnmarshallableObject,
		mila.generated.impl.runtime.XMLSerializable,
		mila.generated.impl.runtime.ValidatableObject {

	public class Unmarshaller extends
			mila.generated.impl.runtime.AbstractUnmarshallingEventHandlerImpl {

		public Unmarshaller(mila.generated.impl.runtime.UnmarshallingContext context) {
			super(context, "-----------------------------------------------");
		}

		protected Unmarshaller(
				mila.generated.impl.runtime.UnmarshallingContext context,
				int startState) {
			this(context);
			state = startState;
		}

		private void eatText1(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_Script = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		private void eatText10(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_InflectConstructS = javax.xml.bind.DatatypeConverter
						.parseBoolean(com.sun.xml.bind.WhiteSpaceProcessor
								.collapse(value));
				has_InflectConstructS = true;
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		private void eatText11(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_Undotted = com.sun.xml.bind.WhiteSpaceProcessor
						.collapse(value);
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		private void eatText12(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_Dual = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		private void eatText13(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_InflectPossessiveS = javax.xml.bind.DatatypeConverter
						.parseBoolean(com.sun.xml.bind.WhiteSpaceProcessor
								.collapse(value));
				has_InflectPossessiveS = true;
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		private void eatText14(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_Dotted = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		private void eatText15(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_InflectPossessiveP = javax.xml.bind.DatatypeConverter
						.parseBoolean(com.sun.xml.bind.WhiteSpaceProcessor
								.collapse(value));
				has_InflectPossessiveP = true;
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		private void eatText16(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_Value = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		private void eatText2(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_Plural = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		private void eatText3(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_Feminine = com.sun.xml.bind.WhiteSpaceProcessor
						.collapse(value);
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		private void eatText4(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_Construct = com.sun.xml.bind.WhiteSpaceProcessor
						.collapse(value);
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		private void eatText5(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_Number = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		private void eatText6(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_InflectConstructP = javax.xml.bind.DatatypeConverter
						.parseBoolean(com.sun.xml.bind.WhiteSpaceProcessor
								.collapse(value));
				has_InflectConstructP = true;
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		private void eatText7(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_Gender = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		private void eatText8(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_Possessive = com.sun.xml.bind.WhiteSpaceProcessor
						.collapse(value);
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		private void eatText9(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_Transliterated = com.sun.xml.bind.WhiteSpaceProcessor
						.collapse(value);
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		@Override
		public void enterAttribute(java.lang.String ___uri,
				java.lang.String ___local, java.lang.String ___qname)
				throws org.xml.sax.SAXException {
			int attIdx;
			outer: while (true) {
				switch (state) {
				case 36:
					if (("script" == ___local) && ("" == ___uri)) {
						state = 37;
						return;
					}
					state = 39;
					continue outer;
				case 30:
					if (("plural" == ___local) && ("" == ___uri)) {
						state = 31;
						return;
					}
					state = 33;
					continue outer;
				case 9:
					if (("feminine" == ___local) && ("" == ___uri)) {
						state = 10;
						return;
					}
					state = 12;
					continue outer;
				case 0:
					if (("construct" == ___local) && ("" == ___uri)) {
						state = 1;
						return;
					}
					state = 3;
					continue outer;
				case 27:
					if (("number" == ___local) && ("" == ___uri)) {
						state = 28;
						return;
					}
					state = 30;
					continue outer;
				case 15:
					if (("inflectConstructP" == ___local) && ("" == ___uri)) {
						state = 16;
						return;
					}
					state = 18;
					continue outer;
				case 12:
					if (("gender" == ___local) && ("" == ___uri)) {
						state = 13;
						return;
					}
					state = 15;
					continue outer;
				case 33:
					if (("possessive" == ___local) && ("" == ___uri)) {
						state = 34;
						return;
					}
					state = 36;
					continue outer;
				case 39:
					if (("transliterated" == ___local) && ("" == ___uri)) {
						state = 40;
						return;
					}
					break;
				case 18:
					if (("inflectConstructS" == ___local) && ("" == ___uri)) {
						state = 19;
						return;
					}
					state = 21;
					continue outer;
				case 42:
					if (("undotted" == ___local) && ("" == ___uri)) {
						state = 43;
						return;
					}
					break;
				case 46:
					revertToParentFromEnterAttribute(___uri, ___local, ___qname);
					return;
				case 6:
					if (("dual" == ___local) && ("" == ___uri)) {
						state = 7;
						return;
					}
					state = 9;
					continue outer;
				case 24:
					if (("inflectPossessiveS" == ___local) && ("" == ___uri)) {
						state = 25;
						return;
					}
					state = 27;
					continue outer;
				case 3:
					if (("dotted" == ___local) && ("" == ___uri)) {
						state = 4;
						return;
					}
					state = 6;
					continue outer;
				case 21:
					if (("inflectPossessiveP" == ___local) && ("" == ___uri)) {
						state = 22;
						return;
					}
					state = 24;
					continue outer;
				}
				super.enterAttribute(___uri, ___local, ___qname);
				break;
			}
		}

		@Override
		public void enterElement(java.lang.String ___uri,
				java.lang.String ___local, java.lang.String ___qname,
				org.xml.sax.Attributes __atts) throws org.xml.sax.SAXException {
			int attIdx;
			outer: while (true) {
				switch (state) {
				case 36:
					attIdx = context.getAttribute("", "script");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 39;
						eatText1(v);
						continue outer;
					}
					state = 39;
					continue outer;
				case 30:
					attIdx = context.getAttribute("", "plural");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 33;
						eatText2(v);
						continue outer;
					}
					state = 33;
					continue outer;
				case 9:
					attIdx = context.getAttribute("", "feminine");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 12;
						eatText3(v);
						continue outer;
					}
					state = 12;
					continue outer;
				case 0:
					attIdx = context.getAttribute("", "construct");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 3;
						eatText4(v);
						continue outer;
					}
					state = 3;
					continue outer;
				case 27:
					attIdx = context.getAttribute("", "number");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 30;
						eatText5(v);
						continue outer;
					}
					state = 30;
					continue outer;
				case 15:
					attIdx = context.getAttribute("", "inflectConstructP");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 18;
						eatText6(v);
						continue outer;
					}
					state = 18;
					continue outer;
				case 12:
					attIdx = context.getAttribute("", "gender");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 15;
						eatText7(v);
						continue outer;
					}
					state = 15;
					continue outer;
				case 33:
					attIdx = context.getAttribute("", "possessive");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 36;
						eatText8(v);
						continue outer;
					}
					state = 36;
					continue outer;
				case 39:
					attIdx = context.getAttribute("", "transliterated");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 42;
						eatText9(v);
						continue outer;
					}
					break;
				case 18:
					attIdx = context.getAttribute("", "inflectConstructS");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 21;
						eatText10(v);
						continue outer;
					}
					state = 21;
					continue outer;
				case 42:
					attIdx = context.getAttribute("", "undotted");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 45;
						eatText11(v);
						continue outer;
					}
					break;
				case 46:
					revertToParentFromEnterElement(___uri, ___local, ___qname,
							__atts);
					return;
				case 6:
					attIdx = context.getAttribute("", "dual");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 9;
						eatText12(v);
						continue outer;
					}
					state = 9;
					continue outer;
				case 24:
					attIdx = context.getAttribute("", "inflectPossessiveS");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 27;
						eatText13(v);
						continue outer;
					}
					state = 27;
					continue outer;
				case 3:
					attIdx = context.getAttribute("", "dotted");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 6;
						eatText14(v);
						continue outer;
					}
					state = 6;
					continue outer;
				case 21:
					attIdx = context.getAttribute("", "inflectPossessiveP");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 24;
						eatText15(v);
						continue outer;
					}
					state = 24;
					continue outer;
				}
				super.enterElement(___uri, ___local, ___qname, __atts);
				break;
			}
		}

		@Override
		public void handleText(final java.lang.String value)
				throws org.xml.sax.SAXException {
			int attIdx;
			outer: while (true) {
				try {
					switch (state) {
					case 34:
						state = 35;
						eatText8(value);
						return;
					case 1:
						state = 2;
						eatText4(value);
						return;
					case 36:
						attIdx = context.getAttribute("", "script");
						if (attIdx >= 0) {
							final java.lang.String v = context
									.eatAttribute(attIdx);
							state = 39;
							eatText1(v);
							continue outer;
						}
						state = 39;
						continue outer;
					case 28:
						state = 29;
						eatText5(value);
						return;
					case 40:
						state = 41;
						eatText9(value);
						return;
					case 30:
						attIdx = context.getAttribute("", "plural");
						if (attIdx >= 0) {
							final java.lang.String v = context
									.eatAttribute(attIdx);
							state = 33;
							eatText2(v);
							continue outer;
						}
						state = 33;
						continue outer;
					case 9:
						attIdx = context.getAttribute("", "feminine");
						if (attIdx >= 0) {
							final java.lang.String v = context
									.eatAttribute(attIdx);
							state = 12;
							eatText3(v);
							continue outer;
						}
						state = 12;
						continue outer;
					case 0:
						attIdx = context.getAttribute("", "construct");
						if (attIdx >= 0) {
							final java.lang.String v = context
									.eatAttribute(attIdx);
							state = 3;
							eatText4(v);
							continue outer;
						}
						state = 3;
						continue outer;
					case 27:
						attIdx = context.getAttribute("", "number");
						if (attIdx >= 0) {
							final java.lang.String v = context
									.eatAttribute(attIdx);
							state = 30;
							eatText5(v);
							continue outer;
						}
						state = 30;
						continue outer;
					case 15:
						attIdx = context.getAttribute("", "inflectConstructP");
						if (attIdx >= 0) {
							final java.lang.String v = context
									.eatAttribute(attIdx);
							state = 18;
							eatText6(v);
							continue outer;
						}
						state = 18;
						continue outer;
					case 12:
						attIdx = context.getAttribute("", "gender");
						if (attIdx >= 0) {
							final java.lang.String v = context
									.eatAttribute(attIdx);
							state = 15;
							eatText7(v);
							continue outer;
						}
						state = 15;
						continue outer;
					case 37:
						state = 38;
						eatText1(value);
						return;
					case 4:
						state = 5;
						eatText14(value);
						return;
					case 33:
						attIdx = context.getAttribute("", "possessive");
						if (attIdx >= 0) {
							final java.lang.String v = context
									.eatAttribute(attIdx);
							state = 36;
							eatText8(v);
							continue outer;
						}
						state = 36;
						continue outer;
					case 39:
						attIdx = context.getAttribute("", "transliterated");
						if (attIdx >= 0) {
							final java.lang.String v = context
									.eatAttribute(attIdx);
							state = 42;
							eatText9(v);
							continue outer;
						}
						break;
					case 7:
						state = 8;
						eatText12(value);
						return;
					case 10:
						state = 11;
						eatText3(value);
						return;
					case 18:
						attIdx = context.getAttribute("", "inflectConstructS");
						if (attIdx >= 0) {
							final java.lang.String v = context
									.eatAttribute(attIdx);
							state = 21;
							eatText10(v);
							continue outer;
						}
						state = 21;
						continue outer;
					case 16:
						state = 17;
						eatText6(value);
						return;
					case 19:
						state = 20;
						eatText10(value);
						return;
					case 42:
						attIdx = context.getAttribute("", "undotted");
						if (attIdx >= 0) {
							final java.lang.String v = context
									.eatAttribute(attIdx);
							state = 45;
							eatText11(v);
							continue outer;
						}
						break;
					case 25:
						state = 26;
						eatText13(value);
						return;
					case 31:
						state = 32;
						eatText2(value);
						return;
					case 46:
						revertToParentFromText(value);
						return;
					case 45:
						state = 46;
						eatText16(value);
						return;
					case 43:
						state = 44;
						eatText11(value);
						return;
					case 22:
						state = 23;
						eatText15(value);
						return;
					case 6:
						attIdx = context.getAttribute("", "dual");
						if (attIdx >= 0) {
							final java.lang.String v = context
									.eatAttribute(attIdx);
							state = 9;
							eatText12(v);
							continue outer;
						}
						state = 9;
						continue outer;
					case 13:
						state = 14;
						eatText7(value);
						return;
					case 24:
						attIdx = context.getAttribute("", "inflectPossessiveS");
						if (attIdx >= 0) {
							final java.lang.String v = context
									.eatAttribute(attIdx);
							state = 27;
							eatText13(v);
							continue outer;
						}
						state = 27;
						continue outer;
					case 3:
						attIdx = context.getAttribute("", "dotted");
						if (attIdx >= 0) {
							final java.lang.String v = context
									.eatAttribute(attIdx);
							state = 6;
							eatText14(v);
							continue outer;
						}
						state = 6;
						continue outer;
					case 21:
						attIdx = context.getAttribute("", "inflectPossessiveP");
						if (attIdx >= 0) {
							final java.lang.String v = context
									.eatAttribute(attIdx);
							state = 24;
							eatText15(v);
							continue outer;
						}
						state = 24;
						continue outer;
					}
				} catch (java.lang.RuntimeException e) {
					handleUnexpectedTextException(value, e);
				}
				break;
			}
		}

		@Override
		public void leaveAttribute(java.lang.String ___uri,
				java.lang.String ___local, java.lang.String ___qname)
				throws org.xml.sax.SAXException {
			int attIdx;
			outer: while (true) {
				switch (state) {
				case 35:
					if (("possessive" == ___local) && ("" == ___uri)) {
						state = 36;
						return;
					}
					break;
				case 26:
					if (("inflectPossessiveS" == ___local) && ("" == ___uri)) {
						state = 27;
						return;
					}
					break;
				case 2:
					if (("construct" == ___local) && ("" == ___uri)) {
						state = 3;
						return;
					}
					break;
				case 36:
					attIdx = context.getAttribute("", "script");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 39;
						eatText1(v);
						continue outer;
					}
					state = 39;
					continue outer;
				case 29:
					if (("number" == ___local) && ("" == ___uri)) {
						state = 30;
						return;
					}
					break;
				case 30:
					attIdx = context.getAttribute("", "plural");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 33;
						eatText2(v);
						continue outer;
					}
					state = 33;
					continue outer;
				case 9:
					attIdx = context.getAttribute("", "feminine");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 12;
						eatText3(v);
						continue outer;
					}
					state = 12;
					continue outer;
				case 8:
					if (("dual" == ___local) && ("" == ___uri)) {
						state = 9;
						return;
					}
					break;
				case 41:
					if (("transliterated" == ___local) && ("" == ___uri)) {
						state = 42;
						return;
					}
					break;
				case 0:
					attIdx = context.getAttribute("", "construct");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 3;
						eatText4(v);
						continue outer;
					}
					state = 3;
					continue outer;
				case 27:
					attIdx = context.getAttribute("", "number");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 30;
						eatText5(v);
						continue outer;
					}
					state = 30;
					continue outer;
				case 15:
					attIdx = context.getAttribute("", "inflectConstructP");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 18;
						eatText6(v);
						continue outer;
					}
					state = 18;
					continue outer;
				case 12:
					attIdx = context.getAttribute("", "gender");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 15;
						eatText7(v);
						continue outer;
					}
					state = 15;
					continue outer;
				case 17:
					if (("inflectConstructP" == ___local) && ("" == ___uri)) {
						state = 18;
						return;
					}
					break;
				case 38:
					if (("script" == ___local) && ("" == ___uri)) {
						state = 39;
						return;
					}
					break;
				case 33:
					attIdx = context.getAttribute("", "possessive");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 36;
						eatText8(v);
						continue outer;
					}
					state = 36;
					continue outer;
				case 20:
					if (("inflectConstructS" == ___local) && ("" == ___uri)) {
						state = 21;
						return;
					}
					break;
				case 39:
					attIdx = context.getAttribute("", "transliterated");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 42;
						eatText9(v);
						continue outer;
					}
					break;
				case 18:
					attIdx = context.getAttribute("", "inflectConstructS");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 21;
						eatText10(v);
						continue outer;
					}
					state = 21;
					continue outer;
				case 42:
					attIdx = context.getAttribute("", "undotted");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 45;
						eatText11(v);
						continue outer;
					}
					break;
				case 14:
					if (("gender" == ___local) && ("" == ___uri)) {
						state = 15;
						return;
					}
					break;
				case 46:
					revertToParentFromLeaveAttribute(___uri, ___local, ___qname);
					return;
				case 6:
					attIdx = context.getAttribute("", "dual");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 9;
						eatText12(v);
						continue outer;
					}
					state = 9;
					continue outer;
				case 11:
					if (("feminine" == ___local) && ("" == ___uri)) {
						state = 12;
						return;
					}
					break;
				case 23:
					if (("inflectPossessiveP" == ___local) && ("" == ___uri)) {
						state = 24;
						return;
					}
					break;
				case 24:
					attIdx = context.getAttribute("", "inflectPossessiveS");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 27;
						eatText13(v);
						continue outer;
					}
					state = 27;
					continue outer;
				case 32:
					if (("plural" == ___local) && ("" == ___uri)) {
						state = 33;
						return;
					}
					break;
				case 5:
					if (("dotted" == ___local) && ("" == ___uri)) {
						state = 6;
						return;
					}
					break;
				case 44:
					if (("undotted" == ___local) && ("" == ___uri)) {
						state = 45;
						return;
					}
					break;
				case 3:
					attIdx = context.getAttribute("", "dotted");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 6;
						eatText14(v);
						continue outer;
					}
					state = 6;
					continue outer;
				case 21:
					attIdx = context.getAttribute("", "inflectPossessiveP");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 24;
						eatText15(v);
						continue outer;
					}
					state = 24;
					continue outer;
				}
				super.leaveAttribute(___uri, ___local, ___qname);
				break;
			}
		}

		@Override
		public void leaveElement(java.lang.String ___uri,
				java.lang.String ___local, java.lang.String ___qname)
				throws org.xml.sax.SAXException {
			int attIdx;
			outer: while (true) {
				switch (state) {
				case 36:
					attIdx = context.getAttribute("", "script");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 39;
						eatText1(v);
						continue outer;
					}
					state = 39;
					continue outer;
				case 30:
					attIdx = context.getAttribute("", "plural");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 33;
						eatText2(v);
						continue outer;
					}
					state = 33;
					continue outer;
				case 9:
					attIdx = context.getAttribute("", "feminine");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 12;
						eatText3(v);
						continue outer;
					}
					state = 12;
					continue outer;
				case 0:
					attIdx = context.getAttribute("", "construct");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 3;
						eatText4(v);
						continue outer;
					}
					state = 3;
					continue outer;
				case 27:
					attIdx = context.getAttribute("", "number");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 30;
						eatText5(v);
						continue outer;
					}
					state = 30;
					continue outer;
				case 15:
					attIdx = context.getAttribute("", "inflectConstructP");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 18;
						eatText6(v);
						continue outer;
					}
					state = 18;
					continue outer;
				case 12:
					attIdx = context.getAttribute("", "gender");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 15;
						eatText7(v);
						continue outer;
					}
					state = 15;
					continue outer;
				case 33:
					attIdx = context.getAttribute("", "possessive");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 36;
						eatText8(v);
						continue outer;
					}
					state = 36;
					continue outer;
				case 39:
					attIdx = context.getAttribute("", "transliterated");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 42;
						eatText9(v);
						continue outer;
					}
					break;
				case 18:
					attIdx = context.getAttribute("", "inflectConstructS");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 21;
						eatText10(v);
						continue outer;
					}
					state = 21;
					continue outer;
				case 42:
					attIdx = context.getAttribute("", "undotted");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 45;
						eatText11(v);
						continue outer;
					}
					break;
				case 46:
					revertToParentFromLeaveElement(___uri, ___local, ___qname);
					return;
				case 6:
					attIdx = context.getAttribute("", "dual");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 9;
						eatText12(v);
						continue outer;
					}
					state = 9;
					continue outer;
				case 24:
					attIdx = context.getAttribute("", "inflectPossessiveS");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 27;
						eatText13(v);
						continue outer;
					}
					state = 27;
					continue outer;
				case 3:
					attIdx = context.getAttribute("", "dotted");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 6;
						eatText14(v);
						continue outer;
					}
					state = 6;
					continue outer;
				case 21:
					attIdx = context.getAttribute("", "inflectPossessiveP");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 24;
						eatText15(v);
						continue outer;
					}
					state = 24;
					continue outer;
				}
				super.leaveElement(___uri, ___local, ___qname);
				break;
			}
		}

		@Override
		public java.lang.Object owner() {
			return mila.generated.impl.NounExceptionTypeImpl.this;
		}

	}

	protected java.lang.String _Feminine;
	protected boolean has_InflectPossessiveS;
	protected boolean _InflectPossessiveS;
	protected java.lang.String _Possessive;
	protected java.lang.String _Gender;
	protected java.lang.String _Plural;
	protected java.lang.String _Script;
	protected java.lang.String _Transliterated;
	protected java.lang.String _Value;
	protected java.lang.String _Construct;
	protected boolean has_InflectConstructS;
	protected boolean _InflectConstructS;
	protected java.lang.String _Dual;
	protected java.lang.String _Number;
	protected java.lang.String _Undotted;
	protected java.lang.String _Dotted;
	protected boolean has_InflectPossessiveP;
	protected boolean _InflectPossessiveP;
	protected boolean has_InflectConstructP;
	protected boolean _InflectConstructP;
	public final static java.lang.Class version = (mila.generated.impl.JAXBVersion.class);

	private static com.sun.msv.grammar.Grammar schemaFragment;

	private final static java.lang.Class PRIMARY_INTERFACE_CLASS() {
		return (mila.generated.NounExceptionType.class);
	}

	@Override
	public com.sun.msv.verifier.DocumentDeclaration createRawValidator() {
		if (schemaFragment == null) {
			schemaFragment = com.sun.xml.bind.validator.SchemaDeserializer
					.deserialize(("\u00ac\u00ed\u0000\u0005sr\u0000\u001fcom.sun.msv.grammar.SequenceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.su"
							+ "n.msv.grammar.BinaryExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0004exp1t\u0000 Lcom/sun/msv/gra"
							+ "mmar/Expression;L\u0000\u0004exp2q\u0000~\u0000\u0002xr\u0000\u001ecom.sun.msv.grammar.Expressi"
							+ "on\u00f8\u0018\u0082\u00e8N5~O\u0002\u0000\u0002L\u0000\u0013epsilonReducibilityt\u0000\u0013Ljava/lang/Boolean;L\u0000\u000b"
							+ "expandedExpq\u0000~\u0000\u0002xpppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000pp"
							+ "sq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~"
							+ "\u0000\u0000ppsq\u0000~\u0000\u0000ppsr\u0000\u001bcom.sun.msv.grammar.DataExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\u0002dtt"
							+ "\u0000\u001fLorg/relaxng/datatype/Datatype;L\u0000\u0006exceptq\u0000~\u0000\u0002L\u0000\u0004namet\u0000\u001dLco"
							+ "m/sun/msv/util/StringPair;xq\u0000~\u0000\u0003ppsr\u0000\"com.sun.msv.datatype.x"
							+ "sd.TokenType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000#com.sun.msv.datatype.xsd.StringTy"
							+ "pe\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001Z\u0000\risAlwaysValidxr\u0000*com.sun.msv.datatype.xsd.Bu"
							+ "iltinAtomicType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000%com.sun.msv.datatype.xsd.Concr"
							+ "eteType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\'com.sun.msv.datatype.xsd.XSDatatypeImp"
							+ "l\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\fnamespaceUrit\u0000\u0012Ljava/lang/String;L\u0000\btypeNameq"
							+ "\u0000~\u0000\u001dL\u0000\nwhiteSpacet\u0000.Lcom/sun/msv/datatype/xsd/WhiteSpaceProc"
							+ "essor;xpt\u0000 http://www.w3.org/2001/XMLSchemat\u0000\u0005tokensr\u00005com.s"
							+ "un.msv.datatype.xsd.WhiteSpaceProcessor$Collapse\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000x"
							+ "r\u0000,com.sun.msv.datatype.xsd.WhiteSpaceProcessor\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xp"
							+ "\u0001sr\u00000com.sun.msv.grammar.Expression$NullSetExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000"
							+ "\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003ppsr\u0000\u001bcom.sun.msv.util.StringPair\u00d0t\u001ejB\u008f\u008d\u00a0\u0002\u0000\u0002L\u0000\tloc"
							+ "alNameq\u0000~\u0000\u001dL\u0000\fnamespaceURIq\u0000~\u0000\u001dxpq\u0000~\u0000!q\u0000~\u0000 sr\u0000\u001dcom.sun.msv.g"
							+ "rammar.ChoiceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0001ppsr\u0000 com.sun.msv.grammar.A"
							+ "ttributeExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0003expq\u0000~\u0000\u0002L\u0000\tnameClasst\u0000\u001fLcom/sun/msv"
							+ "/grammar/NameClass;xq\u0000~\u0000\u0003sr\u0000\u0011java.lang.Boolean\u00cd r\u0080\u00d5\u009c\u00fa\u00ee\u0002\u0000\u0001Z\u0000\u0005"
							+ "valuexp\u0000psq\u0000~\u0000\u0014ppsr\u0000)com.sun.msv.datatype.xsd.EnumerationFac"
							+ "et\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\u0006valuest\u0000\u000fLjava/util/Set;xr\u00009com.sun.msv.data"
							+ "type.xsd.DataTypeWithValueConstraintFacet\"\u00a7Ro\u00ca\u00c7\u008aT\u0002\u0000\u0000xr\u0000*com."
							+ "sun.msv.datatype.xsd.DataTypeWithFacet\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0005Z\u0000\fisFacetF"
							+ "ixedZ\u0000\u0012needValueCheckFlagL\u0000\bbaseTypet\u0000)Lcom/sun/msv/datatype"
							+ "/xsd/XSDatatypeImpl;L\u0000\fconcreteTypet\u0000\'Lcom/sun/msv/datatype/"
							+ "xsd/ConcreteType;L\u0000\tfacetNameq\u0000~\u0000\u001dxq\u0000~\u0000\u001ct\u0000\u0000t\u0000\u000eThreeStateType"
							+ "q\u0000~\u0000$\u0000\u0000q\u0000~\u0000\u001fq\u0000~\u0000\u001ft\u0000\u000benumerationsr\u0000\u0011java.util.HashSet\u00baD\u0085\u0095\u0096\u00b8\u00b74"
							+ "\u0003\u0000\u0000xpw\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\u0003t\u0000\u000bunspecifiedt\u0000\u0004truet\u0000\u0005falsexq\u0000~\u0000&sq\u0000~\u0000\'"
							+ "q\u0000~\u00009q\u0000~\u00008sr\u0000#com.sun.msv.grammar.SimpleNameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002"
							+ "L\u0000\tlocalNameq\u0000~\u0000\u001dL\u0000\fnamespaceURIq\u0000~\u0000\u001dxr\u0000\u001dcom.sun.msv.grammar"
							+ ".NameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xpt\u0000\tconstructq\u0000~\u00008sr\u00000com.sun.msv.gram"
							+ "mar.Expression$EpsilonExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003sq\u0000~\u0000.\u0001q\u0000~\u0000"
							+ "Fsq\u0000~\u0000)ppsq\u0000~\u0000+q\u0000~\u0000/pq\u0000~\u0000\u0017sq\u0000~\u0000At\u0000\u0006dottedq\u0000~\u00008q\u0000~\u0000Fsq\u0000~\u0000)pps"
							+ "q\u0000~\u0000+q\u0000~\u0000/pq\u0000~\u00000sq\u0000~\u0000At\u0000\u0004dualq\u0000~\u00008q\u0000~\u0000Fsq\u0000~\u0000)ppsq\u0000~\u0000+q\u0000~\u0000/ps"
							+ "q\u0000~\u0000\u0014ppsq\u0000~\u00001q\u0000~\u00008t\u0000\fFeminineTypeq\u0000~\u0000$\u0000\u0000q\u0000~\u0000\u001fq\u0000~\u0000\u001fq\u0000~\u0000:sq\u0000~\u0000"
							+ ";w\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\u0004t\u0000\u000bunspecifiedt\u0000\u0002itt\u0000\u0001ht\u0000\u0001txq\u0000~\u0000&sq\u0000~\u0000\'q\u0000~\u0000Tq"
							+ "\u0000~\u00008sq\u0000~\u0000At\u0000\bfeminineq\u0000~\u00008q\u0000~\u0000Fsq\u0000~\u0000)ppsq\u0000~\u0000+q\u0000~\u0000/psq\u0000~\u0000\u0014pps"
							+ "q\u0000~\u00001q\u0000~\u00008t\u0000\nGenderTypeq\u0000~\u0000$\u0000\u0000q\u0000~\u0000\u001fq\u0000~\u0000\u001fq\u0000~\u0000:sq\u0000~\u0000;w\f\u0000\u0000\u0000\u0010?@\u0000"
							+ "\u0000\u0000\u0000\u0000\u0004t\u0000\u000bunspecifiedt\u0000\bfemininet\u0000\u0016masculine and femininet\u0000\tma"
							+ "sculinexq\u0000~\u0000&sq\u0000~\u0000\'q\u0000~\u0000aq\u0000~\u00008sq\u0000~\u0000At\u0000\u0006genderq\u0000~\u00008q\u0000~\u0000Fsq\u0000~\u0000)"
							+ "ppsq\u0000~\u0000+q\u0000~\u0000/psq\u0000~\u0000\u0014ppsr\u0000$com.sun.msv.datatype.xsd.BooleanTy"
							+ "pe\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u001aq\u0000~\u0000 t\u0000\u0007booleanq\u0000~\u0000$q\u0000~\u0000&sq\u0000~\u0000\'q\u0000~\u0000oq\u0000~\u0000 "
							+ "sq\u0000~\u0000At\u0000\u0011inflectConstructPq\u0000~\u00008q\u0000~\u0000Fsq\u0000~\u0000)ppsq\u0000~\u0000+q\u0000~\u0000/pq\u0000~\u0000"
							+ "lsq\u0000~\u0000At\u0000\u0011inflectConstructSq\u0000~\u00008q\u0000~\u0000Fsq\u0000~\u0000)ppsq\u0000~\u0000+q\u0000~\u0000/pq\u0000~"
							+ "\u0000lsq\u0000~\u0000At\u0000\u0012inflectPossessivePq\u0000~\u00008q\u0000~\u0000Fsq\u0000~\u0000)ppsq\u0000~\u0000+q\u0000~\u0000/pq"
							+ "\u0000~\u0000lsq\u0000~\u0000At\u0000\u0012inflectPossessiveSq\u0000~\u00008q\u0000~\u0000Fsq\u0000~\u0000)ppsq\u0000~\u0000+q\u0000~\u0000/"
							+ "psq\u0000~\u0000\u0014ppsq\u0000~\u00001q\u0000~\u00008t\u0000\nNumberTypeq\u0000~\u0000$\u0000\u0000q\u0000~\u0000\u001fq\u0000~\u0000\u001fq\u0000~\u0000:sq\u0000~\u0000"
							+ ";w\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\u0006t\u0000\u000bunspecifiedt\u0000\u0013singular and pluralt\u0000\u0004dualt\u0000"
							+ "\u000fdual and pluralt\u0000\bsingulart\u0000\u0006pluralxq\u0000~\u0000&sq\u0000~\u0000\'q\u0000~\u0000\u0083q\u0000~\u00008sq"
							+ "\u0000~\u0000At\u0000\u0006numberq\u0000~\u00008q\u0000~\u0000Fsq\u0000~\u0000)ppsq\u0000~\u0000+q\u0000~\u0000/psq\u0000~\u0000\u0014ppsq\u0000~\u00001q\u0000~"
							+ "\u00008t\u0000\nPluralTypeq\u0000~\u0000$\u0000\u0000q\u0000~\u0000\u001fq\u0000~\u0000\u001fq\u0000~\u0000:sq\u0000~\u0000;w\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\bt\u0000\u000b"
							+ "unspecifiedt\u0000\u0003awtt\u0000\u0002wtt\u0000\u0002imt\u0000\u0003iimt\u0000\u0001mt\u0000\tim and wtt\u0000\u0003iwtxq\u0000~\u0000"
							+ "&sq\u0000~\u0000\'q\u0000~\u0000\u0092q\u0000~\u00008sq\u0000~\u0000At\u0000\u0006pluralq\u0000~\u00008q\u0000~\u0000Fsq\u0000~\u0000)ppsq\u0000~\u0000+q\u0000~\u0000"
							+ "/psq\u0000~\u0000\u0014ppsq\u0000~\u00001q\u0000~\u00008t\u0000\u0007PGNTypeq\u0000~\u0000$\u0000\u0000q\u0000~\u0000\u001fq\u0000~\u0000\u001fq\u0000~\u0000:sq\u0000~\u0000;w"
							+ "\f\u0000\u0000\u0000 ?@\u0000\u0000\u0000\u0000\u0000\u0013t\u0000\t123p/M/Sgt\u0000\u00072p/M/Plt\u0000\u00073p/M/Sgt\u0000\b1p/MF/Sgt\u0000\t1"
							+ "23p/M/Plt\u0000\b2p/MF/Plt\u0000\u00072p/M/Sgt\u0000\u00071p/F/Sgt\u0000\b3p/MF/Plt\u0000\u00073p/F/Pl"
							+ "t\u0000\u00071p/M/Sgt\u0000\u000bunspecifiedt\u0000\u00072p/F/Plt\u0000\t123p/F/Plt\u0000\u00073p/M/Plt\u0000\u00073"
							+ "p/F/Sgt\u0000\t123p/F/Sgt\u0000\b1p/MF/Plt\u0000\u00072p/F/Sgxq\u0000~\u0000&sq\u0000~\u0000\'q\u0000~\u0000\u00a3q\u0000~\u0000"
							+ "8sq\u0000~\u0000At\u0000\npossessiveq\u0000~\u00008q\u0000~\u0000Fsq\u0000~\u0000)ppsq\u0000~\u0000+q\u0000~\u0000/psq\u0000~\u0000\u0014ppsq"
							+ "\u0000~\u00001q\u0000~\u00008t\u0000\nScriptTypeq\u0000~\u0000$\u0000\u0000q\u0000~\u0000\u001fq\u0000~\u0000\u001fq\u0000~\u0000:sq\u0000~\u0000;w\f\u0000\u0000\u0000\u0010?@\u0000\u0000"
							+ "\u0000\u0000\u0000\u0004t\u0000\u0004typot\u0000\u0006formalt\u0000\u0005slangt\u0000\ncolloquialxq\u0000~\u0000&sq\u0000~\u0000\'q\u0000~\u0000\u00bfq\u0000"
							+ "~\u00008sq\u0000~\u0000At\u0000\u0006scriptq\u0000~\u00008q\u0000~\u0000Fsq\u0000~\u0000+ppq\u0000~\u0000\u0017sq\u0000~\u0000At\u0000\u000etransliter"
							+ "atedq\u0000~\u00008sq\u0000~\u0000+ppq\u0000~\u0000\u0017sq\u0000~\u0000At\u0000\bundottedq\u0000~\u00008sr\u0000\"com.sun.msv."
							+ "grammar.ExpressionPool\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\bexpTablet\u0000/Lcom/sun/msv/"
							+ "grammar/ExpressionPool$ClosedHash;xpsr\u0000-com.sun.msv.grammar."
							+ "ExpressionPool$ClosedHash\u00d7j\u00d0N\u00ef\u00e8\u00ed\u001c\u0003\u0000\u0003I\u0000\u0005countB\u0000\rstreamVersion"
							+ "L\u0000\u0006parentt\u0000$Lcom/sun/msv/grammar/ExpressionPool;xp\u0000\u0000\u0000\u001c\u0001pq\u0000~\u0000"
							+ "\bq\u0000~\u0000jq\u0000~\u0000*q\u0000~\u0000Hq\u0000~\u0000\u0005q\u0000~\u0000\u007fq\u0000~\u0000\u0012q\u0000~\u0000]q\u0000~\u0000\u008eq\u0000~\u0000\u0011q\u0000~\u0000Lq\u0000~\u0000sq\u0000~\u0000"
							+ "\u0007q\u0000~\u0000\tq\u0000~\u0000\u0010q\u0000~\u0000\u000bq\u0000~\u0000{q\u0000~\u0000\u009fq\u0000~\u0000\nq\u0000~\u0000\u0006q\u0000~\u0000wq\u0000~\u0000Pq\u0000~\u0000\u00bbq\u0000~\u0000\fq\u0000~\u0000"
							+ "\u000fq\u0000~\u0000\u0013q\u0000~\u0000\rq\u0000~\u0000\u000ex"));
		}
		return new com.sun.msv.verifier.regexp.REDocumentDeclaration(
				schemaFragment);
	}

	@Override
	public mila.generated.impl.runtime.UnmarshallingEventHandler createUnmarshaller(
			mila.generated.impl.runtime.UnmarshallingContext context) {
		return new mila.generated.impl.NounExceptionTypeImpl.Unmarshaller(context);
	}

	@Override
	public java.lang.String getConstruct() {
		if (_Construct == null) {
			return "unspecified";
		} else {
			return _Construct;
		}
	}

	@Override
	public java.lang.String getDotted() {
		if (_Dotted == null) {
			return "";
		} else {
			return _Dotted;
		}
	}

	@Override
	public java.lang.String getDual() {
		if (_Dual == null) {
			return "unspecified";
		} else {
			return _Dual;
		}
	}

	@Override
	public java.lang.String getFeminine() {
		if (_Feminine == null) {
			return "unspecified";
		} else {
			return _Feminine;
		}
	}

	@Override
	public java.lang.String getGender() {
		if (_Gender == null) {
			return "unspecified";
		} else {
			return _Gender;
		}
	}

	@Override
	public java.lang.String getNumber() {
		if (_Number == null) {
			return "unspecified";
		} else {
			return _Number;
		}
	}

	@Override
	public java.lang.String getPlural() {
		if (_Plural == null) {
			return "unspecified";
		} else {
			return _Plural;
		}
	}

	@Override
	public java.lang.String getPossessive() {
		if (_Possessive == null) {
			return "unspecified";
		} else {
			return _Possessive;
		}
	}

	@Override
	public java.lang.Class getPrimaryInterface() {
		return (mila.generated.NounExceptionType.class);
	}

	@Override
	public java.lang.String getScript() {
		if (_Script == null) {
			return "formal";
		} else {
			return _Script;
		}
	}

	@Override
	public java.lang.String getTransliterated() {
		return _Transliterated;
	}

	@Override
	public java.lang.String getUndotted() {
		return _Undotted;
	}

	@Override
	public java.lang.String getValue() {
		return _Value;
	}

	@Override
	public boolean isInflectConstructP() {
		if (!has_InflectConstructP) {
			return javax.xml.bind.DatatypeConverter
					.parseBoolean(com.sun.xml.bind.DatatypeConverterImpl
							.installHook("true"));
		} else {
			return _InflectConstructP;
		}
	}

	@Override
	public boolean isInflectConstructS() {
		if (!has_InflectConstructS) {
			return javax.xml.bind.DatatypeConverter
					.parseBoolean(com.sun.xml.bind.DatatypeConverterImpl
							.installHook("true"));
		} else {
			return _InflectConstructS;
		}
	}

	@Override
	public boolean isInflectPossessiveP() {
		if (!has_InflectPossessiveP) {
			return javax.xml.bind.DatatypeConverter
					.parseBoolean(com.sun.xml.bind.DatatypeConverterImpl
							.installHook("true"));
		} else {
			return _InflectPossessiveP;
		}
	}

	@Override
	public boolean isInflectPossessiveS() {
		if (!has_InflectPossessiveS) {
			return javax.xml.bind.DatatypeConverter
					.parseBoolean(com.sun.xml.bind.DatatypeConverterImpl
							.installHook("true"));
		} else {
			return _InflectPossessiveS;
		}
	}

	@Override
	public void serializeAttributes(mila.generated.impl.runtime.XMLSerializer context)
			throws org.xml.sax.SAXException {
		if (_Construct != null) {
			context.startAttribute("", "construct");
			try {
				context.text(_Construct, "Construct");
			} catch (java.lang.Exception e) {
				mila.generated.impl.runtime.Util.handlePrintConversionException(
						this, e, context);
			}
			context.endAttribute();
		}
		if (_Dotted != null) {
			context.startAttribute("", "dotted");
			try {
				context.text(_Dotted, "Dotted");
			} catch (java.lang.Exception e) {
				mila.generated.impl.runtime.Util.handlePrintConversionException(
						this, e, context);
			}
			context.endAttribute();
		}
		if (_Dual != null) {
			context.startAttribute("", "dual");
			try {
				context.text(_Dual, "Dual");
			} catch (java.lang.Exception e) {
				mila.generated.impl.runtime.Util.handlePrintConversionException(
						this, e, context);
			}
			context.endAttribute();
		}
		if (_Feminine != null) {
			context.startAttribute("", "feminine");
			try {
				context.text(_Feminine, "Feminine");
			} catch (java.lang.Exception e) {
				mila.generated.impl.runtime.Util.handlePrintConversionException(
						this, e, context);
			}
			context.endAttribute();
		}
		if (_Gender != null) {
			context.startAttribute("", "gender");
			try {
				context.text(_Gender, "Gender");
			} catch (java.lang.Exception e) {
				mila.generated.impl.runtime.Util.handlePrintConversionException(
						this, e, context);
			}
			context.endAttribute();
		}
		if (has_InflectConstructP) {
			context.startAttribute("", "inflectConstructP");
			try {
				context.text(javax.xml.bind.DatatypeConverter
						.printBoolean(_InflectConstructP), "InflectConstructP");
			} catch (java.lang.Exception e) {
				mila.generated.impl.runtime.Util.handlePrintConversionException(
						this, e, context);
			}
			context.endAttribute();
		}
		if (has_InflectConstructS) {
			context.startAttribute("", "inflectConstructS");
			try {
				context.text(javax.xml.bind.DatatypeConverter
						.printBoolean(_InflectConstructS), "InflectConstructS");
			} catch (java.lang.Exception e) {
				mila.generated.impl.runtime.Util.handlePrintConversionException(
						this, e, context);
			}
			context.endAttribute();
		}
		if (has_InflectPossessiveP) {
			context.startAttribute("", "inflectPossessiveP");
			try {
				context.text(javax.xml.bind.DatatypeConverter
						.printBoolean(_InflectPossessiveP),
						"InflectPossessiveP");
			} catch (java.lang.Exception e) {
				mila.generated.impl.runtime.Util.handlePrintConversionException(
						this, e, context);
			}
			context.endAttribute();
		}
		if (has_InflectPossessiveS) {
			context.startAttribute("", "inflectPossessiveS");
			try {
				context.text(javax.xml.bind.DatatypeConverter
						.printBoolean(_InflectPossessiveS),
						"InflectPossessiveS");
			} catch (java.lang.Exception e) {
				mila.generated.impl.runtime.Util.handlePrintConversionException(
						this, e, context);
			}
			context.endAttribute();
		}
		if (_Number != null) {
			context.startAttribute("", "number");
			try {
				context.text(_Number, "Number");
			} catch (java.lang.Exception e) {
				mila.generated.impl.runtime.Util.handlePrintConversionException(
						this, e, context);
			}
			context.endAttribute();
		}
		if (_Plural != null) {
			context.startAttribute("", "plural");
			try {
				context.text(_Plural, "Plural");
			} catch (java.lang.Exception e) {
				mila.generated.impl.runtime.Util.handlePrintConversionException(
						this, e, context);
			}
			context.endAttribute();
		}
		if (_Possessive != null) {
			context.startAttribute("", "possessive");
			try {
				context.text(_Possessive, "Possessive");
			} catch (java.lang.Exception e) {
				mila.generated.impl.runtime.Util.handlePrintConversionException(
						this, e, context);
			}
			context.endAttribute();
		}
		if (_Script != null) {
			context.startAttribute("", "script");
			try {
				context.text(_Script, "Script");
			} catch (java.lang.Exception e) {
				mila.generated.impl.runtime.Util.handlePrintConversionException(
						this, e, context);
			}
			context.endAttribute();
		}
		context.startAttribute("", "transliterated");
		try {
			context.text(_Transliterated, "Transliterated");
		} catch (java.lang.Exception e) {
			mila.generated.impl.runtime.Util.handlePrintConversionException(this, e,
					context);
		}
		context.endAttribute();
		context.startAttribute("", "undotted");
		try {
			context.text(_Undotted, "Undotted");
		} catch (java.lang.Exception e) {
			mila.generated.impl.runtime.Util.handlePrintConversionException(this, e,
					context);
		}
		context.endAttribute();
	}

	@Override
	public void serializeBody(mila.generated.impl.runtime.XMLSerializer context)
			throws org.xml.sax.SAXException {
		try {
			context.text(_Value, "Value");
		} catch (java.lang.Exception e) {
			mila.generated.impl.runtime.Util.handlePrintConversionException(this, e,
					context);
		}
	}

	@Override
	public void serializeURIs(mila.generated.impl.runtime.XMLSerializer context)
			throws org.xml.sax.SAXException {
	}

	@Override
	public void setConstruct(java.lang.String value) {
		_Construct = value;
	}

	@Override
	public void setDotted(java.lang.String value) {
		_Dotted = value;
	}

	@Override
	public void setDual(java.lang.String value) {
		_Dual = value;
	}

	@Override
	public void setFeminine(java.lang.String value) {
		_Feminine = value;
	}

	@Override
	public void setGender(java.lang.String value) {
		_Gender = value;
	}

	@Override
	public void setInflectConstructP(boolean value) {
		_InflectConstructP = value;
		has_InflectConstructP = true;
	}

	@Override
	public void setInflectConstructS(boolean value) {
		_InflectConstructS = value;
		has_InflectConstructS = true;
	}

	@Override
	public void setInflectPossessiveP(boolean value) {
		_InflectPossessiveP = value;
		has_InflectPossessiveP = true;
	}

	@Override
	public void setInflectPossessiveS(boolean value) {
		_InflectPossessiveS = value;
		has_InflectPossessiveS = true;
	}

	@Override
	public void setNumber(java.lang.String value) {
		_Number = value;
	}

	@Override
	public void setPlural(java.lang.String value) {
		_Plural = value;
	}

	@Override
	public void setPossessive(java.lang.String value) {
		_Possessive = value;
	}

	@Override
	public void setScript(java.lang.String value) {
		_Script = value;
	}

	@Override
	public void setTransliterated(java.lang.String value) {
		_Transliterated = value;
	}

	@Override
	public void setUndotted(java.lang.String value) {
		_Undotted = value;
	}

	@Override
	public void setValue(java.lang.String value) {
		_Value = value;
	}

}
