//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v1.0.5-b16-fcs 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2008.12.01 at 02:23:12 PM IST 
//

package mila.generated.impl;

public class QuantifierExceptionTypeImpl implements
		mila.generated.QuantifierExceptionType, com.sun.xml.bind.JAXBObject,
		mila.generated.impl.runtime.UnmarshallableObject,
		mila.generated.impl.runtime.XMLSerializable,
		mila.generated.impl.runtime.ValidatableObject {

	public class Unmarshaller extends
			mila.generated.impl.runtime.AbstractUnmarshallingEventHandlerImpl {

		public Unmarshaller(mila.generated.impl.runtime.UnmarshallingContext context) {
			super(context, "-----------------------------");
		}

		protected Unmarshaller(
				mila.generated.impl.runtime.UnmarshallingContext context,
				int startState) {
			this(context);
			state = startState;
		}

		private void eatText1(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_Dotted = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		private void eatText10(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_Value = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		private void eatText2(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_Gender = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		private void eatText3(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_Undotted = com.sun.xml.bind.WhiteSpaceProcessor
						.collapse(value);
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		private void eatText4(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_Construct = com.sun.xml.bind.WhiteSpaceProcessor
						.collapse(value);
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		private void eatText5(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_InflectConstruct = javax.xml.bind.DatatypeConverter
						.parseBoolean(com.sun.xml.bind.WhiteSpaceProcessor
								.collapse(value));
				has_InflectConstruct = true;
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		private void eatText6(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_Acronym = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		private void eatText7(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_Pgn = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		private void eatText8(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_Script = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		private void eatText9(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_Transliterated = com.sun.xml.bind.WhiteSpaceProcessor
						.collapse(value);
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		@Override
		public void enterAttribute(java.lang.String ___uri,
				java.lang.String ___local, java.lang.String ___qname)
				throws org.xml.sax.SAXException {
			int attIdx;
			outer: while (true) {
				switch (state) {
				case 28:
					revertToParentFromEnterAttribute(___uri, ___local, ___qname);
					return;
				case 6:
					if (("dotted" == ___local) && ("" == ___uri)) {
						state = 7;
						return;
					}
					state = 9;
					continue outer;
				case 9:
					if (("gender" == ___local) && ("" == ___uri)) {
						state = 10;
						return;
					}
					state = 12;
					continue outer;
				case 24:
					if (("undotted" == ___local) && ("" == ___uri)) {
						state = 25;
						return;
					}
					break;
				case 3:
					if (("construct" == ___local) && ("" == ___uri)) {
						state = 4;
						return;
					}
					state = 6;
					continue outer;
				case 12:
					if (("inflectConstruct" == ___local) && ("" == ___uri)) {
						state = 13;
						return;
					}
					state = 15;
					continue outer;
				case 0:
					if (("acronym" == ___local) && ("" == ___uri)) {
						state = 1;
						return;
					}
					state = 3;
					continue outer;
				case 15:
					if (("pgn" == ___local) && ("" == ___uri)) {
						state = 16;
						return;
					}
					state = 18;
					continue outer;
				case 18:
					if (("script" == ___local) && ("" == ___uri)) {
						state = 19;
						return;
					}
					state = 21;
					continue outer;
				case 21:
					if (("transliterated" == ___local) && ("" == ___uri)) {
						state = 22;
						return;
					}
					break;
				}
				super.enterAttribute(___uri, ___local, ___qname);
				break;
			}
		}

		@Override
		public void enterElement(java.lang.String ___uri,
				java.lang.String ___local, java.lang.String ___qname,
				org.xml.sax.Attributes __atts) throws org.xml.sax.SAXException {
			int attIdx;
			outer: while (true) {
				switch (state) {
				case 28:
					revertToParentFromEnterElement(___uri, ___local, ___qname,
							__atts);
					return;
				case 6:
					attIdx = context.getAttribute("", "dotted");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 9;
						eatText1(v);
						continue outer;
					}
					state = 9;
					continue outer;
				case 9:
					attIdx = context.getAttribute("", "gender");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 12;
						eatText2(v);
						continue outer;
					}
					state = 12;
					continue outer;
				case 24:
					attIdx = context.getAttribute("", "undotted");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 27;
						eatText3(v);
						continue outer;
					}
					break;
				case 3:
					attIdx = context.getAttribute("", "construct");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 6;
						eatText4(v);
						continue outer;
					}
					state = 6;
					continue outer;
				case 12:
					attIdx = context.getAttribute("", "inflectConstruct");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 15;
						eatText5(v);
						continue outer;
					}
					state = 15;
					continue outer;
				case 0:
					attIdx = context.getAttribute("", "acronym");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 3;
						eatText6(v);
						continue outer;
					}
					state = 3;
					continue outer;
				case 15:
					attIdx = context.getAttribute("", "pgn");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 18;
						eatText7(v);
						continue outer;
					}
					state = 18;
					continue outer;
				case 18:
					attIdx = context.getAttribute("", "script");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 21;
						eatText8(v);
						continue outer;
					}
					state = 21;
					continue outer;
				case 21:
					attIdx = context.getAttribute("", "transliterated");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 24;
						eatText9(v);
						continue outer;
					}
					break;
				}
				super.enterElement(___uri, ___local, ___qname, __atts);
				break;
			}
		}

		@Override
		public void handleText(final java.lang.String value)
				throws org.xml.sax.SAXException {
			int attIdx;
			outer: while (true) {
				try {
					switch (state) {
					case 28:
						revertToParentFromText(value);
						return;
					case 6:
						attIdx = context.getAttribute("", "dotted");
						if (attIdx >= 0) {
							final java.lang.String v = context
									.eatAttribute(attIdx);
							state = 9;
							eatText1(v);
							continue outer;
						}
						state = 9;
						continue outer;
					case 9:
						attIdx = context.getAttribute("", "gender");
						if (attIdx >= 0) {
							final java.lang.String v = context
									.eatAttribute(attIdx);
							state = 12;
							eatText2(v);
							continue outer;
						}
						state = 12;
						continue outer;
					case 24:
						attIdx = context.getAttribute("", "undotted");
						if (attIdx >= 0) {
							final java.lang.String v = context
									.eatAttribute(attIdx);
							state = 27;
							eatText3(v);
							continue outer;
						}
						break;
					case 27:
						state = 28;
						eatText10(value);
						return;
					case 3:
						attIdx = context.getAttribute("", "construct");
						if (attIdx >= 0) {
							final java.lang.String v = context
									.eatAttribute(attIdx);
							state = 6;
							eatText4(v);
							continue outer;
						}
						state = 6;
						continue outer;
					case 16:
						state = 17;
						eatText7(value);
						return;
					case 10:
						state = 11;
						eatText2(value);
						return;
					case 12:
						attIdx = context.getAttribute("", "inflectConstruct");
						if (attIdx >= 0) {
							final java.lang.String v = context
									.eatAttribute(attIdx);
							state = 15;
							eatText5(v);
							continue outer;
						}
						state = 15;
						continue outer;
					case 19:
						state = 20;
						eatText8(value);
						return;
					case 22:
						state = 23;
						eatText9(value);
						return;
					case 7:
						state = 8;
						eatText1(value);
						return;
					case 13:
						state = 14;
						eatText5(value);
						return;
					case 1:
						state = 2;
						eatText6(value);
						return;
					case 0:
						attIdx = context.getAttribute("", "acronym");
						if (attIdx >= 0) {
							final java.lang.String v = context
									.eatAttribute(attIdx);
							state = 3;
							eatText6(v);
							continue outer;
						}
						state = 3;
						continue outer;
					case 4:
						state = 5;
						eatText4(value);
						return;
					case 15:
						attIdx = context.getAttribute("", "pgn");
						if (attIdx >= 0) {
							final java.lang.String v = context
									.eatAttribute(attIdx);
							state = 18;
							eatText7(v);
							continue outer;
						}
						state = 18;
						continue outer;
					case 18:
						attIdx = context.getAttribute("", "script");
						if (attIdx >= 0) {
							final java.lang.String v = context
									.eatAttribute(attIdx);
							state = 21;
							eatText8(v);
							continue outer;
						}
						state = 21;
						continue outer;
					case 21:
						attIdx = context.getAttribute("", "transliterated");
						if (attIdx >= 0) {
							final java.lang.String v = context
									.eatAttribute(attIdx);
							state = 24;
							eatText9(v);
							continue outer;
						}
						break;
					case 25:
						state = 26;
						eatText3(value);
						return;
					}
				} catch (java.lang.RuntimeException e) {
					handleUnexpectedTextException(value, e);
				}
				break;
			}
		}

		@Override
		public void leaveAttribute(java.lang.String ___uri,
				java.lang.String ___local, java.lang.String ___qname)
				throws org.xml.sax.SAXException {
			int attIdx;
			outer: while (true) {
				switch (state) {
				case 8:
					if (("dotted" == ___local) && ("" == ___uri)) {
						state = 9;
						return;
					}
					break;
				case 23:
					if (("transliterated" == ___local) && ("" == ___uri)) {
						state = 24;
						return;
					}
					break;
				case 28:
					revertToParentFromLeaveAttribute(___uri, ___local, ___qname);
					return;
				case 6:
					attIdx = context.getAttribute("", "dotted");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 9;
						eatText1(v);
						continue outer;
					}
					state = 9;
					continue outer;
				case 17:
					if (("pgn" == ___local) && ("" == ___uri)) {
						state = 18;
						return;
					}
					break;
				case 9:
					attIdx = context.getAttribute("", "gender");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 12;
						eatText2(v);
						continue outer;
					}
					state = 12;
					continue outer;
				case 24:
					attIdx = context.getAttribute("", "undotted");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 27;
						eatText3(v);
						continue outer;
					}
					break;
				case 5:
					if (("construct" == ___local) && ("" == ___uri)) {
						state = 6;
						return;
					}
					break;
				case 3:
					attIdx = context.getAttribute("", "construct");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 6;
						eatText4(v);
						continue outer;
					}
					state = 6;
					continue outer;
				case 26:
					if (("undotted" == ___local) && ("" == ___uri)) {
						state = 27;
						return;
					}
					break;
				case 12:
					attIdx = context.getAttribute("", "inflectConstruct");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 15;
						eatText5(v);
						continue outer;
					}
					state = 15;
					continue outer;
				case 20:
					if (("script" == ___local) && ("" == ___uri)) {
						state = 21;
						return;
					}
					break;
				case 0:
					attIdx = context.getAttribute("", "acronym");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 3;
						eatText6(v);
						continue outer;
					}
					state = 3;
					continue outer;
				case 15:
					attIdx = context.getAttribute("", "pgn");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 18;
						eatText7(v);
						continue outer;
					}
					state = 18;
					continue outer;
				case 18:
					attIdx = context.getAttribute("", "script");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 21;
						eatText8(v);
						continue outer;
					}
					state = 21;
					continue outer;
				case 11:
					if (("gender" == ___local) && ("" == ___uri)) {
						state = 12;
						return;
					}
					break;
				case 21:
					attIdx = context.getAttribute("", "transliterated");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 24;
						eatText9(v);
						continue outer;
					}
					break;
				case 2:
					if (("acronym" == ___local) && ("" == ___uri)) {
						state = 3;
						return;
					}
					break;
				case 14:
					if (("inflectConstruct" == ___local) && ("" == ___uri)) {
						state = 15;
						return;
					}
					break;
				}
				super.leaveAttribute(___uri, ___local, ___qname);
				break;
			}
		}

		@Override
		public void leaveElement(java.lang.String ___uri,
				java.lang.String ___local, java.lang.String ___qname)
				throws org.xml.sax.SAXException {
			int attIdx;
			outer: while (true) {
				switch (state) {
				case 28:
					revertToParentFromLeaveElement(___uri, ___local, ___qname);
					return;
				case 6:
					attIdx = context.getAttribute("", "dotted");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 9;
						eatText1(v);
						continue outer;
					}
					state = 9;
					continue outer;
				case 9:
					attIdx = context.getAttribute("", "gender");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 12;
						eatText2(v);
						continue outer;
					}
					state = 12;
					continue outer;
				case 24:
					attIdx = context.getAttribute("", "undotted");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 27;
						eatText3(v);
						continue outer;
					}
					break;
				case 3:
					attIdx = context.getAttribute("", "construct");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 6;
						eatText4(v);
						continue outer;
					}
					state = 6;
					continue outer;
				case 12:
					attIdx = context.getAttribute("", "inflectConstruct");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 15;
						eatText5(v);
						continue outer;
					}
					state = 15;
					continue outer;
				case 0:
					attIdx = context.getAttribute("", "acronym");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 3;
						eatText6(v);
						continue outer;
					}
					state = 3;
					continue outer;
				case 15:
					attIdx = context.getAttribute("", "pgn");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 18;
						eatText7(v);
						continue outer;
					}
					state = 18;
					continue outer;
				case 18:
					attIdx = context.getAttribute("", "script");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 21;
						eatText8(v);
						continue outer;
					}
					state = 21;
					continue outer;
				case 21:
					attIdx = context.getAttribute("", "transliterated");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						state = 24;
						eatText9(v);
						continue outer;
					}
					break;
				}
				super.leaveElement(___uri, ___local, ___qname);
				break;
			}
		}

		@Override
		public java.lang.Object owner() {
			return mila.generated.impl.QuantifierExceptionTypeImpl.this;
		}

	}

	protected java.lang.String _Value;
	protected java.lang.String _Pgn;
	protected java.lang.String _Construct;
	protected java.lang.String _Gender;
	protected java.lang.String _Undotted;
	protected java.lang.String _Dotted;
	protected java.lang.String _Acronym;
	protected boolean has_InflectConstruct;
	protected boolean _InflectConstruct;
	protected java.lang.String _Script;
	protected java.lang.String _Transliterated;
	public final static java.lang.Class version = (mila.generated.impl.JAXBVersion.class);

	private static com.sun.msv.grammar.Grammar schemaFragment;

	private final static java.lang.Class PRIMARY_INTERFACE_CLASS() {
		return (mila.generated.QuantifierExceptionType.class);
	}

	@Override
	public com.sun.msv.verifier.DocumentDeclaration createRawValidator() {
		if (schemaFragment == null) {
			schemaFragment = com.sun.xml.bind.validator.SchemaDeserializer
					.deserialize(("\u00ac\u00ed\u0000\u0005sr\u0000\u001fcom.sun.msv.grammar.SequenceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.su"
							+ "n.msv.grammar.BinaryExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0004exp1t\u0000 Lcom/sun/msv/gra"
							+ "mmar/Expression;L\u0000\u0004exp2q\u0000~\u0000\u0002xr\u0000\u001ecom.sun.msv.grammar.Expressi"
							+ "on\u00f8\u0018\u0082\u00e8N5~O\u0002\u0000\u0002L\u0000\u0013epsilonReducibilityt\u0000\u0013Ljava/lang/Boolean;L\u0000\u000b"
							+ "expandedExpq\u0000~\u0000\u0002xpppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000pp"
							+ "sq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsr\u0000\u001bcom.sun.msv.grammar.DataExp\u0000\u0000\u0000\u0000\u0000"
							+ "\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\u0002dtt\u0000\u001fLorg/relaxng/datatype/Datatype;L\u0000\u0006exceptq\u0000~\u0000\u0002L"
							+ "\u0000\u0004namet\u0000\u001dLcom/sun/msv/util/StringPair;xq\u0000~\u0000\u0003ppsr\u0000\"com.sun.ms"
							+ "v.datatype.xsd.TokenType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000#com.sun.msv.datatype."
							+ "xsd.StringType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001Z\u0000\risAlwaysValidxr\u0000*com.sun.msv.dat"
							+ "atype.xsd.BuiltinAtomicType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000%com.sun.msv.dataty"
							+ "pe.xsd.ConcreteType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\'com.sun.msv.datatype.xsd.X"
							+ "SDatatypeImpl\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\fnamespaceUrit\u0000\u0012Ljava/lang/String;"
							+ "L\u0000\btypeNameq\u0000~\u0000\u0017L\u0000\nwhiteSpacet\u0000.Lcom/sun/msv/datatype/xsd/Wh"
							+ "iteSpaceProcessor;xpt\u0000 http://www.w3.org/2001/XMLSchemat\u0000\u0005to"
							+ "kensr\u00005com.sun.msv.datatype.xsd.WhiteSpaceProcessor$Collapse"
							+ "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000,com.sun.msv.datatype.xsd.WhiteSpaceProcessor\u0000"
							+ "\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xp\u0001sr\u00000com.sun.msv.grammar.Expression$NullSetExpre"
							+ "ssion\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003ppsr\u0000\u001bcom.sun.msv.util.StringPair\u00d0t\u001ejB"
							+ "\u008f\u008d\u00a0\u0002\u0000\u0002L\u0000\tlocalNameq\u0000~\u0000\u0017L\u0000\fnamespaceURIq\u0000~\u0000\u0017xpq\u0000~\u0000\u001bq\u0000~\u0000\u001asr\u0000\u001dc"
							+ "om.sun.msv.grammar.ChoiceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0001ppsr\u0000 com.sun.m"
							+ "sv.grammar.AttributeExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0003expq\u0000~\u0000\u0002L\u0000\tnameClasst\u0000\u001f"
							+ "Lcom/sun/msv/grammar/NameClass;xq\u0000~\u0000\u0003sr\u0000\u0011java.lang.Boolean\u00cd "
							+ "r\u0080\u00d5\u009c\u00fa\u00ee\u0002\u0000\u0001Z\u0000\u0005valuexp\u0000psq\u0000~\u0000\u000eppsr\u0000)com.sun.msv.datatype.xsd.En"
							+ "umerationFacet\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\u0006valuest\u0000\u000fLjava/util/Set;xr\u00009com."
							+ "sun.msv.datatype.xsd.DataTypeWithValueConstraintFacet\"\u00a7Ro\u00ca\u00c7\u008a"
							+ "T\u0002\u0000\u0000xr\u0000*com.sun.msv.datatype.xsd.DataTypeWithFacet\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000"
							+ "\u0005Z\u0000\fisFacetFixedZ\u0000\u0012needValueCheckFlagL\u0000\bbaseTypet\u0000)Lcom/sun/"
							+ "msv/datatype/xsd/XSDatatypeImpl;L\u0000\fconcreteTypet\u0000\'Lcom/sun/m"
							+ "sv/datatype/xsd/ConcreteType;L\u0000\tfacetNameq\u0000~\u0000\u0017xq\u0000~\u0000\u0016t\u0000\u0000t\u0000\u000eTh"
							+ "reeStateTypeq\u0000~\u0000\u001e\u0000\u0000q\u0000~\u0000\u0019q\u0000~\u0000\u0019t\u0000\u000benumerationsr\u0000\u0011java.util.Has"
							+ "hSet\u00baD\u0085\u0095\u0096\u00b8\u00b74\u0003\u0000\u0000xpw\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\u0003t\u0000\u000bunspecifiedt\u0000\u0004truet\u0000\u0005false"
							+ "xq\u0000~\u0000 sq\u0000~\u0000!q\u0000~\u00003q\u0000~\u00002sr\u0000#com.sun.msv.grammar.SimpleNameClas"
							+ "s\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\tlocalNameq\u0000~\u0000\u0017L\u0000\fnamespaceURIq\u0000~\u0000\u0017xr\u0000\u001dcom.sun"
							+ ".msv.grammar.NameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xpt\u0000\u0007acronymq\u0000~\u00002sr\u00000com.su"
							+ "n.msv.grammar.Expression$EpsilonExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003s"
							+ "q\u0000~\u0000(\u0001q\u0000~\u0000@sq\u0000~\u0000#ppsq\u0000~\u0000%q\u0000~\u0000)pq\u0000~\u0000*sq\u0000~\u0000;t\u0000\tconstructq\u0000~\u00002q"
							+ "\u0000~\u0000@sq\u0000~\u0000#ppsq\u0000~\u0000%q\u0000~\u0000)pq\u0000~\u0000\u0011sq\u0000~\u0000;t\u0000\u0006dottedq\u0000~\u00002q\u0000~\u0000@sq\u0000~\u0000#"
							+ "ppsq\u0000~\u0000%q\u0000~\u0000)psq\u0000~\u0000\u000eppsq\u0000~\u0000+q\u0000~\u00002t\u0000\nGenderTypeq\u0000~\u0000\u001e\u0000\u0000q\u0000~\u0000\u0019q\u0000"
							+ "~\u0000\u0019q\u0000~\u00004sq\u0000~\u00005w\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\u0004t\u0000\u000bunspecifiedt\u0000\bfemininet\u0000\u0016masc"
							+ "uline and femininet\u0000\tmasculinexq\u0000~\u0000 sq\u0000~\u0000!q\u0000~\u0000Nq\u0000~\u00002sq\u0000~\u0000;t\u0000"
							+ "\u0006genderq\u0000~\u00002q\u0000~\u0000@sq\u0000~\u0000#ppsq\u0000~\u0000%q\u0000~\u0000)psq\u0000~\u0000\u000eppsr\u0000$com.sun.msv"
							+ ".datatype.xsd.BooleanType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0014q\u0000~\u0000\u001at\u0000\u0007booleanq\u0000~"
							+ "\u0000\u001eq\u0000~\u0000 sq\u0000~\u0000!q\u0000~\u0000\\q\u0000~\u0000\u001asq\u0000~\u0000;t\u0000\u0010inflectConstructq\u0000~\u00002q\u0000~\u0000@sq"
							+ "\u0000~\u0000#ppsq\u0000~\u0000%q\u0000~\u0000)psq\u0000~\u0000\u000eppsq\u0000~\u0000+q\u0000~\u00002t\u0000\u0007PGNTypeq\u0000~\u0000\u001e\u0000\u0000q\u0000~\u0000\u0019q"
							+ "\u0000~\u0000\u0019q\u0000~\u00004sq\u0000~\u00005w\f\u0000\u0000\u0000 ?@\u0000\u0000\u0000\u0000\u0000\u0013t\u0000\t123p/M/Sgt\u0000\u00072p/M/Plt\u0000\u00073p/M/S"
							+ "gt\u0000\b1p/MF/Sgt\u0000\t123p/M/Plt\u0000\b2p/MF/Plt\u0000\u00072p/M/Sgt\u0000\u00071p/F/Sgt\u0000\b3p"
							+ "/MF/Plt\u0000\u00073p/F/Plt\u0000\u00071p/M/Sgt\u0000\u000bunspecifiedt\u0000\u00072p/F/Plt\u0000\t123p/F/"
							+ "Plt\u0000\u00073p/M/Plt\u0000\u00073p/F/Sgt\u0000\t123p/F/Sgt\u0000\b1p/MF/Plt\u0000\u00072p/F/Sgxq\u0000~\u0000"
							+ " sq\u0000~\u0000!q\u0000~\u0000dq\u0000~\u00002sq\u0000~\u0000;t\u0000\u0003pgnq\u0000~\u00002q\u0000~\u0000@sq\u0000~\u0000#ppsq\u0000~\u0000%q\u0000~\u0000)ps"
							+ "q\u0000~\u0000\u000eppsq\u0000~\u0000+q\u0000~\u00002t\u0000\nScriptTypeq\u0000~\u0000\u001e\u0000\u0000q\u0000~\u0000\u0019q\u0000~\u0000\u0019q\u0000~\u00004sq\u0000~\u00005w"
							+ "\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\u0004t\u0000\u0004typot\u0000\u0006formalt\u0000\u0005slangt\u0000\ncolloquialxq\u0000~\u0000 sq\u0000~"
							+ "\u0000!q\u0000~\u0000\u0080q\u0000~\u00002sq\u0000~\u0000;t\u0000\u0006scriptq\u0000~\u00002q\u0000~\u0000@sq\u0000~\u0000%ppq\u0000~\u0000\u0011sq\u0000~\u0000;t\u0000\u000et"
							+ "ransliteratedq\u0000~\u00002sq\u0000~\u0000%ppq\u0000~\u0000\u0011sq\u0000~\u0000;t\u0000\bundottedq\u0000~\u00002sr\u0000\"com"
							+ ".sun.msv.grammar.ExpressionPool\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\bexpTablet\u0000/Lcom"
							+ "/sun/msv/grammar/ExpressionPool$ClosedHash;xpsr\u0000-com.sun.msv"
							+ ".grammar.ExpressionPool$ClosedHash\u00d7j\u00d0N\u00ef\u00e8\u00ed\u001c\u0003\u0000\u0003I\u0000\u0005countB\u0000\rstre"
							+ "amVersionL\u0000\u0006parentt\u0000$Lcom/sun/msv/grammar/ExpressionPool;xp\u0000"
							+ "\u0000\u0000\u0010\u0001pq\u0000~\u0000Fq\u0000~\u0000\bq\u0000~\u0000Bq\u0000~\u0000Jq\u0000~\u0000\u0007q\u0000~\u0000\u0005q\u0000~\u0000`q\u0000~\u0000$q\u0000~\u0000\fq\u0000~\u0000\tq\u0000~\u0000|"
							+ "q\u0000~\u0000\rq\u0000~\u0000\nq\u0000~\u0000\u0006q\u0000~\u0000\u000bq\u0000~\u0000Wx"));
		}
		return new com.sun.msv.verifier.regexp.REDocumentDeclaration(
				schemaFragment);
	}

	@Override
	public mila.generated.impl.runtime.UnmarshallingEventHandler createUnmarshaller(
			mila.generated.impl.runtime.UnmarshallingContext context) {
		return new mila.generated.impl.QuantifierExceptionTypeImpl.Unmarshaller(
				context);
	}

	@Override
	public java.lang.String getAcronym() {
		if (_Acronym == null) {
			return "unspecified";
		} else {
			return _Acronym;
		}
	}

	@Override
	public java.lang.String getConstruct() {
		if (_Construct == null) {
			return "unspecified";
		} else {
			return _Construct;
		}
	}

	@Override
	public java.lang.String getDotted() {
		if (_Dotted == null) {
			return "";
		} else {
			return _Dotted;
		}
	}

	@Override
	public java.lang.String getGender() {
		if (_Gender == null) {
			return "unspecified";
		} else {
			return _Gender;
		}
	}

	@Override
	public java.lang.String getPgn() {
		if (_Pgn == null) {
			return "unspecified";
		} else {
			return _Pgn;
		}
	}

	@Override
	public java.lang.Class getPrimaryInterface() {
		return (mila.generated.QuantifierExceptionType.class);
	}

	@Override
	public java.lang.String getScript() {
		if (_Script == null) {
			return "formal";
		} else {
			return _Script;
		}
	}

	@Override
	public java.lang.String getTransliterated() {
		return _Transliterated;
	}

	@Override
	public java.lang.String getUndotted() {
		return _Undotted;
	}

	@Override
	public java.lang.String getValue() {
		return _Value;
	}

	@Override
	public boolean isInflectConstruct() {
		if (!has_InflectConstruct) {
			return javax.xml.bind.DatatypeConverter
					.parseBoolean(com.sun.xml.bind.DatatypeConverterImpl
							.installHook("true"));
		} else {
			return _InflectConstruct;
		}
	}

	@Override
	public void serializeAttributes(mila.generated.impl.runtime.XMLSerializer context)
			throws org.xml.sax.SAXException {
		if (_Acronym != null) {
			context.startAttribute("", "acronym");
			try {
				context.text(_Acronym, "Acronym");
			} catch (java.lang.Exception e) {
				mila.generated.impl.runtime.Util.handlePrintConversionException(
						this, e, context);
			}
			context.endAttribute();
		}
		if (_Construct != null) {
			context.startAttribute("", "construct");
			try {
				context.text(_Construct, "Construct");
			} catch (java.lang.Exception e) {
				mila.generated.impl.runtime.Util.handlePrintConversionException(
						this, e, context);
			}
			context.endAttribute();
		}
		if (_Dotted != null) {
			context.startAttribute("", "dotted");
			try {
				context.text(_Dotted, "Dotted");
			} catch (java.lang.Exception e) {
				mila.generated.impl.runtime.Util.handlePrintConversionException(
						this, e, context);
			}
			context.endAttribute();
		}
		if (_Gender != null) {
			context.startAttribute("", "gender");
			try {
				context.text(_Gender, "Gender");
			} catch (java.lang.Exception e) {
				mila.generated.impl.runtime.Util.handlePrintConversionException(
						this, e, context);
			}
			context.endAttribute();
		}
		if (has_InflectConstruct) {
			context.startAttribute("", "inflectConstruct");
			try {
				context.text(javax.xml.bind.DatatypeConverter
						.printBoolean(_InflectConstruct), "InflectConstruct");
			} catch (java.lang.Exception e) {
				mila.generated.impl.runtime.Util.handlePrintConversionException(
						this, e, context);
			}
			context.endAttribute();
		}
		if (_Pgn != null) {
			context.startAttribute("", "pgn");
			try {
				context.text(_Pgn, "Pgn");
			} catch (java.lang.Exception e) {
				mila.generated.impl.runtime.Util.handlePrintConversionException(
						this, e, context);
			}
			context.endAttribute();
		}
		if (_Script != null) {
			context.startAttribute("", "script");
			try {
				context.text(_Script, "Script");
			} catch (java.lang.Exception e) {
				mila.generated.impl.runtime.Util.handlePrintConversionException(
						this, e, context);
			}
			context.endAttribute();
		}
		context.startAttribute("", "transliterated");
		try {
			context.text(_Transliterated, "Transliterated");
		} catch (java.lang.Exception e) {
			mila.generated.impl.runtime.Util.handlePrintConversionException(this, e,
					context);
		}
		context.endAttribute();
		context.startAttribute("", "undotted");
		try {
			context.text(_Undotted, "Undotted");
		} catch (java.lang.Exception e) {
			mila.generated.impl.runtime.Util.handlePrintConversionException(this, e,
					context);
		}
		context.endAttribute();
	}

	@Override
	public void serializeBody(mila.generated.impl.runtime.XMLSerializer context)
			throws org.xml.sax.SAXException {
		try {
			context.text(_Value, "Value");
		} catch (java.lang.Exception e) {
			mila.generated.impl.runtime.Util.handlePrintConversionException(this, e,
					context);
		}
	}

	@Override
	public void serializeURIs(mila.generated.impl.runtime.XMLSerializer context)
			throws org.xml.sax.SAXException {
	}

	@Override
	public void setAcronym(java.lang.String value) {
		_Acronym = value;
	}

	@Override
	public void setConstruct(java.lang.String value) {
		_Construct = value;
	}

	@Override
	public void setDotted(java.lang.String value) {
		_Dotted = value;
	}

	@Override
	public void setGender(java.lang.String value) {
		_Gender = value;
	}

	@Override
	public void setInflectConstruct(boolean value) {
		_InflectConstruct = value;
		has_InflectConstruct = true;
	}

	@Override
	public void setPgn(java.lang.String value) {
		_Pgn = value;
	}

	@Override
	public void setScript(java.lang.String value) {
		_Script = value;
	}

	@Override
	public void setTransliterated(java.lang.String value) {
		_Transliterated = value;
	}

	@Override
	public void setUndotted(java.lang.String value) {
		_Undotted = value;
	}

	@Override
	public void setValue(java.lang.String value) {
		_Value = value;
	}

}
